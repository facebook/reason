{"version":3,
 "file":"./app.js",
 "sourceRoot":"",
 "names":[],
 "mappings":
 "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",
 "sources":
 ["/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/fs.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/unix.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/mlString.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/stdlib.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/int64.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/ieee_754.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/bigarray.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/bigstring.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/jslib.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/io.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/marshal.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/jslib_js_of_ocaml.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/gc.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/parsing.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/internalMod.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/lexing.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/polyfill/json2.js",
  "/Users/chenglou/.opam/4.02.3/lib/js_of_ocaml/md5.js",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/pervasives.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/array.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/list.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/bytes.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/camlinternalFormatBasics.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/string.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/sys.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/camlinternalLazy.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/buffer.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/printexc.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/digest.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/random.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/hashtbl.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/scanf.ml",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/callback.ml",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/Atom.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/AtomReasonCommon.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/JsUtils.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/NuclideJs.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/StringUtils.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/SuperMerlin.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/ocamlTypeToReasonType.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/MerlinServiceConvert.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/AtomReasonLocate.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/AtomReasonFormat.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/AtomReasonDiagnostics.re",
  "/Users/chenglou/Github/Reason/editorSupport/AtomReason/src/Index.re",
  "/Users/chenglou/.opam/4.02.3/lib/ocaml/std_exit.ml"],
 "sourcesContent":
 ["// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Dummy filesystem\n\n//Provides: caml_current_dir\nvar caml_current_dir = \"/\";\n//Provides: file_inode\nvar file_inode = 0\n\n//Provides: MlDir\n//Requires: file_inode, unix_time\nfunction MlDir(){ this.content={};\n                  this.inode = file_inode++;\n                  var now = unix_time();\n                  this.atime = now;\n                  this.mtime = now;\n                  this.ctime = now;\n                  }\nMlDir.prototype = {\n  exists:function(name){return this.content[name]?1:0;},\n  mk:function(name,c){this.content[name]=c},\n  get:function(name){return this.content[name]},\n  list:function(){\n    var a = [];\n    for(var n in this.content)\n      a.push(n);\n    return a;\n  },\n  remove:function(name){delete this.content[name];}\n}\n\n//Provides: MlFile\n//Requires: caml_create_string, file_inode, unix_time\nfunction MlFile(content){ this.data = content;\n                          this.inode = file_inode++;\n                          var now = unix_time();\n                          this.atime = now;\n                          this.mtime = now;\n                          this.ctime = now;\n}\nMlFile.prototype = {\n  truncate:function(){\n    this.data = caml_create_string(0);\n    this.modified();\n  },\n  modified:function() {\n    var now = unix_time();\n    this.atime = now;\n    this.mtime = now;\n  }\n}\n\n//Provides: caml_root_dir\n//Requires: MlDir\nvar caml_root_dir = new MlDir();\ncaml_root_dir.mk(\"\",new MlDir());\n\n//Provides: caml_sys_getcwd\n//Requires: caml_current_dir, caml_new_string\nfunction caml_sys_getcwd() { return caml_new_string(caml_current_dir); }\n//Provides: caml_sys_chdir\n//Requires: caml_current_dir, caml_make_path\n//Requires: caml_sys_file_exists, caml_sys_is_directory,caml_raise_no_such_file\nfunction caml_sys_chdir(dir) {\n  if(caml_sys_file_exists(dir) && caml_sys_is_directory(dir)){\n    var name = caml_make_path(dir);\n    name.push(\"\"); // we want the slash a the end\n    caml_current_dir = name.join(\"/\");\n    return 0;\n  }\n  else\n    caml_raise_no_such_file(dir);\n}\n//Provides: caml_raise_no_such_file\n//Requires: MlString, caml_raise_sys_error\nfunction caml_raise_no_such_file(name){\n  name = (name instanceof MlString)?name.toString():name;\n  caml_raise_sys_error (name + \": No such file or directory\");\n}\n\n//Provides: caml_raise_not_a_dir\n//Requires: MlString, caml_raise_sys_error\nfunction caml_raise_not_a_dir(name){\n  name = (name instanceof MlString)?name.toString():name;\n  caml_raise_sys_error (name + \": Not a directory\");\n}\n\n//Provides: caml_make_path\n//Requires: caml_current_dir,MlString\nfunction caml_make_path (name) {\n  name=(name instanceof MlString)?name.toString():name;\n  if(name.charCodeAt(0) != 47)\n    name = caml_current_dir + name;\n  var comp = name.split(\"/\");\n  var ncomp = []\n  for(var i = 0; i<comp.length; i++){\n    switch(comp[i]){\n    case \"..\": if(ncomp.length>1) ncomp.pop(); break;\n    case \".\": break;\n    case \"\": if(ncomp.length == 0) ncomp.push(\"\"); break;\n    default: ncomp.push(comp[i]);break\n    }\n  }\n  ncomp.orig = name;\n  return ncomp;\n\n}\n\n\n//Provides: caml_fs_register\n//Requires: MlDir, MlFile, caml_root_dir, caml_make_path, caml_raise_sys_error\n//Requires: MlString, caml_array_of_string\n//Requires: caml_invalid_argument, caml_new_string\n//Requires: caml_string_of_array\n// content can be : MlDIr,MlFile,MlString,Array, string\nfunction caml_fs_register(name,content) {\n  var path = caml_make_path(name);\n  var dir = caml_root_dir;\n  for(var i=0;i<path.length-1;i++){\n    var d = path[i];\n    if(!(dir.exists(d)))\n      dir.mk(d,new MlDir());\n    dir = dir.get(d);\n    if(!(dir instanceof MlDir))\n      caml_raise_sys_error (path.orig + \" : file already exists\");\n  }\n  var d = path[path.length-1];\n  if(dir.exists(d)) caml_raise_sys_error (path.orig + \" : file already exists\");\n  if(content instanceof MlDir) dir.mk(d,content);\n  else if(content instanceof MlFile) dir.mk(d,content);\n  else if(content instanceof MlString) dir.mk(d,new MlFile(content));\n  else if(content instanceof Array) dir.mk(d,new MlFile(caml_string_of_array(content)));\n  else if(content.toString) dir.mk(d,new MlFile((caml_new_string(content.toString()))));\n  else caml_invalid_argument(\"caml_fs_register\");\n  return 0;\n}\n\n//Provides: caml_fs_init\n//Requires: caml_fs_register\nfunction caml_fs_init (){\n  var tmp=joo_global_object.caml_fs_tmp\n  if(tmp){\n    for(var i = 0; i < tmp.length; i++){\n      caml_fs_register(tmp[i].name,tmp[i].content);\n    }\n  }\n  joo_global_object.caml_fs_register = caml_fs_register;\n  return 0;\n}\n\n//Provides: caml_fs_register_extern\nfunction caml_fs_register_extern(name,content){\n  if(joo_global_object.caml_fs_register)\n    joo_global_object.caml_fs_register(name,content);\n  else {\n    if(!joo_global_object.caml_fs_tmp) joo_global_object.caml_fs_tmp = [];\n    joo_global_object.caml_fs_tmp.push({name:name,content:content});\n  }\n  return 0;\n}\n\n//Provides: caml_fs_content\n//Requires: caml_root_dir, caml_raise_no_such_file\nfunction caml_fs_content(path){\n  var dir = caml_root_dir;\n  for(var i=0;i<path.length;i++){\n    if(!(dir.exists && dir.exists(path[i]))) caml_raise_no_such_file(path.orig);\n    dir=dir.get(path[i]);\n  }\n  return dir\n}\n\n//Provides: caml_sys_file_exists\n//Requires: caml_root_dir, caml_make_path\nfunction caml_sys_file_exists (name) {\n  var dir = caml_root_dir;\n  var path = caml_make_path(name);\n  var auto_load;\n  var pos;\n  for(var i=0;i<path.length;i++){\n    if(dir.auto) { auto_load = dir.auto; pos = i}\n    if(!(dir.exists && dir.exists(path[i]))) {\n      if(auto_load) {\n        return auto_load(path,pos);\n      }\n      else return 0;\n    }\n    dir=dir.get(path[i]);\n  }\n  return 1;\n}\n\n//Provides: caml_fs_register_autoload\n//Requires: MlDir, caml_make_path, caml_raise_sys_error, caml_root_dir\nfunction caml_fs_register_autoload(path,f){\n  var path = caml_make_path(path);\n  var dir = caml_root_dir;\n  for(var i=0;i<path.length;i++){\n    var d = path[i];\n    if(!(dir.exists(d)))\n      dir.mk(d,new MlDir());\n    dir = dir.get(d);\n    if(!(dir instanceof MlDir))\n      caml_raise_sys_error (path.orig + \" : not a directory\");\n  }\n  dir.auto = f;\n  return 0;\n}\n\n//Provides: caml_sys_read_directory\n//Requires: caml_new_string, MlDir\n//Requires: caml_fs_content, caml_make_path, caml_raise_not_a_dir\nfunction caml_sys_read_directory(name){\n  var dir = caml_fs_content(caml_make_path(name));\n  if(!(dir instanceof MlDir)){\n    caml_raise_not_a_dir(name);\n  }\n  var list = dir.list();\n  var l = new Array(list.length + 1);\n  l[0] = 0;\n  for(var i=0;i<list.length;i++)\n    l[i+1] = caml_new_string(list[i]);\n  return l;\n}\n\n//Provides: caml_sys_remove\n//Requires: caml_make_path, caml_fs_content, caml_raise_no_such_file\nfunction caml_sys_remove(name){\n  var path = caml_make_path(name);\n  var dir = caml_fs_content(path.slice(0,-1))\n  if(dir.exists(path[path.length-1]))\n    dir.remove(path[path.length-1]);\n  else caml_raise_no_such_file(name);\n  return 0;\n}\n\n//Provides: caml_sys_is_directory\n//Requires: caml_make_path, caml_fs_content, MlDir\nfunction caml_sys_is_directory(name){\n  var path = caml_make_path(name);\n  var dir = caml_fs_content(path);\n  return (dir instanceof MlDir)?1:0;\n}\n\n//Provides: caml_sys_rename\n//Requires: caml_fs_register,caml_sys_remove\n//Requires: caml_make_path,caml_fs_content\n//Requires: caml_sys_file_exists, caml_sys_is_directory, caml_raise_sys_error\nfunction caml_sys_rename(o,n){\n  var path = caml_make_path(o);\n  var content = caml_fs_content(path);\n  if(caml_sys_file_exists(n)){\n    if(caml_sys_is_directory(n)) caml_raise_sys_error(n.toString() + \" : is a directory\");\n    caml_sys_remove(n);\n  }\n  caml_fs_register(n, content);\n  caml_sys_remove(o);\n  return 0;\n}\n\n\n//Provides: caml_ba_map_file\n//Requires: caml_failwith\nfunction caml_ba_map_file(vfd, kind, layout, shared, dims, pos) {\n    // var data = caml_global_data.fds[vfd];\n    caml_failwith(\"caml_ba_map_file not Implemented\");\n}\n\n//Provides: caml_ba_map_file_bytecode\n//Requires: caml_ba_map_file\nfunction caml_ba_map_file_bytecode(argv,argn){\n  return caml_ba_map_file(argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]);\n}\n\n\n//Provides: unix_stat_file\n//Requires: caml_make_path, caml_fs_content, MlFile, MlDir,caml_ml_string_length\nfunction unix_stat_file(f){\n  if (f instanceof MlDir) {\n    var kind = 1; //S_DIR\n    var size = 0;\n  }\n  if (f instanceof MlFile) {\n    var kind = 0; //S_REG\n    var size = caml_ml_string_length(f.data);\n  }\n\n  return [0,\n   0, //st_dev\n   f.inode, // st_ino\n   kind, // st_kind\n   436, //st_perm 0o664\n   1, //st_nlink\n   1, //st_uid\n   1, //st_gid\n   0, //st_rdev\n   size,//st_size\n   +f.atime,\n   +f.mtime,\n   +f.ctime\n  ]\n}\n\n//Provides: unix_stat\n//Requires: caml_fs_content, caml_make_path, unix_stat_file\nfunction unix_stat(name){\n  var f = caml_fs_content(caml_make_path(name));\n  return unix_stat_file(f)\n}\n\n//Provides: unix_lstat\n//Requires: unix_stat\nvar unix_lstat = unix_stat\n\n//Provides: unix_fstat\n//Requires: unix_stat_file, caml_global_data\nfunction unix_fstat(idx){\n  return unix_stat_file(caml_global_data.fds[idx].file)\n}\n",
  "//Provides: unix_gettimeofday\nfunction unix_gettimeofday () {\n  return (new Date()).getTime() / 1000;\n}\n\n//Provides: unix_time\n//Requires: unix_gettimeofday\nfunction unix_time () {\n  return Math.floor(unix_gettimeofday ());\n}\n\n//Provides: unix_gmtime\nfunction unix_gmtime (t) {\n  var d = new Date (t * 1000);\n  var januaryfirst = new Date(Date.UTC(d.getUTCFullYear(), 0, 1));\n  var doy = Math.floor((d - januaryfirst) / 86400000);\n  return [0, d.getUTCSeconds(), d.getUTCMinutes(), d.getUTCHours(),\n          d.getUTCDate(), d.getUTCMonth(), d.getUTCFullYear() - 1900,\n          d.getUTCDay(), doy,\n          false | 0 /* for UTC daylight savings time is false */]\n}\n\n//Provides: unix_localtime\nfunction unix_localtime (t) {\n  var d = new Date (t * 1000);\n  var januaryfirst = new Date(d.getFullYear(), 0, 1);\n  var doy = Math.floor((d - januaryfirst) / 86400000);\n  var jan = new Date(d.getFullYear(), 0, 1);\n  var jul = new Date(d.getFullYear(), 6, 1);\n  var stdTimezoneOffset = Math.max(jan.getTimezoneOffset(), jul.getTimezoneOffset());\n  return [0, d.getSeconds(), d.getMinutes(), d.getHours(),\n  d.getDate(), d.getMonth(), d.getFullYear() - 1900,\n  d.getDay(), doy,\n  (d.getTimezoneOffset() < stdTimezoneOffset) | 0 /* daylight savings time  field. */]\n}\n\n//Provides: unix_mktime\n//Requires: unix_localtime\nfunction unix_mktime(tm){\n    var d = new Date(tm[6]+1900,tm[5],tm[4],tm[3],tm[2],tm[1]);\n    var t = Math.floor(d.getTime() / 1000);\n    var tm2 = unix_localtime(t);\n    return [0,t,tm2];\n}\n\n//Provides: win_startup const\nfunction win_startup() {}\n\n//Provides: win_cleanup const\nfunction win_cleanup() {}\n\n//Provides: win_handle_fd const\nfunction win_handle_fd(x) {return x;}\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010-2014 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n// An OCaml string is an object with three fields:\n// - tag 't'\n// - length 'l'\n// - contents 'c'\n//\n// The contents of the string can be either a JavaScript array or\n// a JavaScript string. The length of this string can be less than the\n// length of the OCaml string. In this case, remaining bytes are\n// assumed to be zeroes. Arrays are mutable but consumes more memory\n// than strings. A common pattern is to start from an empty string and\n// progressively fill it from the start. Partial strings makes it\n// possible to implement this efficiently.\n//\n// When converting to and from UTF-16, we keep track of whether the\n// string is composed only of ASCII characters (in which case, no\n// conversion needs to be performed) or not.\n//\n// The string tag can thus take the following values:\n//   full string     BYTE | UNKNOWN:      0\n//                   BYTE | ASCII:        9\n//                   BYTE | NOT_ASCII:    8\n//   string prefix   PARTIAL:             2\n//   array           ARRAY:               4\n//\n// One can use bit masking to discriminate these different cases:\n//   known_encoding(x) = x&8\n//   is_ascii(x) =       x&1\n//   kind(x) =           x&6\n\n//Provides: caml_str_repeat\nfunction caml_str_repeat(n, s) {\n  if (s.repeat) return s.repeat(n); // ECMAscript 6 and Firefox 24+\n  var r = \"\", l = 0;\n  if (n == 0) return r;\n  for(;;) {\n    if (n & 1) r += s;\n    n >>= 1;\n    if (n == 0) return r;\n    s += s;\n    l++;\n    if (l == 9) {\n      s.slice(0,1); // flatten the string\n      // then, the flattening of the whole string will be faster,\n      // as it will be composed of larger pieces\n    }\n  }\n}\n\n//Provides: caml_subarray_to_string\n//Requires: raw_array_sub\nfunction caml_subarray_to_string (a, i, len) {\n  var f = String.fromCharCode;\n  if (i == 0 && len <= 4096 && len == a.length) return f.apply (null, a);\n  var s = \"\";\n  for (; 0 < len; i += 1024,len-=1024)\n    s += f.apply (null, raw_array_sub(a,i, Math.min(len, 1024)));\n  return s;\n}\n\n//Provides: caml_utf8_of_utf16\nfunction caml_utf8_of_utf16(s) {\n  for (var b = \"\", t = b, c, d, i = 0, l = s.length; i < l; i++) {\n    c = s.charCodeAt(i);\n    if (c < 0x80) {\n      for (var j = i + 1; (j < l) && (c = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    if (c < 0x800) {\n      t += String.fromCharCode(0xc0 | (c >> 6));\n      t += String.fromCharCode(0x80 | (c & 0x3f));\n    } else if (c < 0xd800 || c >= 0xdfff) {\n      t += String.fromCharCode(0xe0 | (c >> 12),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    } else if (c >= 0xdbff || i + 1 == l ||\n               (d = s.charCodeAt(i + 1)) < 0xdc00 || d > 0xdfff) {\n      // Unmatched surrogate pair, replaced by \\ufffd (replacement character)\n      t += \"\\xef\\xbf\\xbd\";\n    } else {\n      i++;\n      c = (c << 10) + d - 0x35fdc00;\n      t += String.fromCharCode(0xf0 | (c >> 18),\n                               0x80 | ((c >> 12) & 0x3f),\n                               0x80 | ((c >> 6) & 0x3f),\n                               0x80 | (c & 0x3f));\n    }\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_utf16_of_utf8\nfunction caml_utf16_of_utf8(s) {\n  for (var b = \"\", t = \"\", c, c1, c2, v, i = 0, l = s.length; i < l; i++) {\n    c1 = s.charCodeAt(i);\n    if (c1 < 0x80) {\n      for (var j = i + 1; (j < l) && (c1 = s.charCodeAt(j)) < 0x80; j++);\n      if (j - i > 512) { t.substr(0, 1); b += t; t = \"\"; b += s.slice(i, j) }\n      else t += s.slice(i, j);\n      if (j == l) break;\n      i = j;\n    }\n    v = 1;\n    if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n      c = c2 + (c1 << 6);\n      if (c1 < 0xe0) {\n        v = c - 0x3080;\n        if (v < 0x80) v = 1;\n      } else {\n        v = 2;\n        if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128)) {\n          c = c2 + (c << 6);\n          if (c1 < 0xf0) {\n            v = c - 0xe2080;\n            if ((v < 0x800) || ((v >= 0xd7ff) && (v < 0xe000))) v = 2;\n          } else {\n              v = 3;\n              if ((++i < l) && (((c2 = s.charCodeAt(i)) & -64) == 128) &&\n                  (c1 < 0xf5)) {\n                v = c2 - 0x3c82080 + (c << 6);\n                if (v < 0x10000 || v > 0x10ffff) v = 3;\n              }\n          }\n        }\n      }\n    }\n    if (v < 4) { // Invalid sequence\n      i -= v;\n      t += \"\\ufffd\";\n    } else if (v > 0xffff)\n      t += String.fromCharCode(0xd7c0 + (v >> 10), 0xdc00 + (v & 0x3FF))\n    else\n      t += String.fromCharCode(v);\n    if (t.length > 1024) {t.substr(0, 1); b += t; t = \"\";}\n  }\n  return b+t;\n}\n\n//Provides: caml_is_ascii\nfunction caml_is_ascii (s) {\n  // The regular expression gets better at around this point for all browsers\n  if (s.length < 24) {\n    // Spidermonkey gets much slower when s.length >= 24 (on 64 bit archs)\n    for (var i = 0; i < s.length; i++) if (s.charCodeAt(i) > 127) return false;\n    return true;\n  } else\n    return !/[^\\x00-\\x7f]/.test(s);\n}\n\n//Provides: caml_to_js_string\n//Requires: caml_convert_string_to_bytes, caml_is_ascii, caml_utf16_of_utf8\nfunction caml_to_js_string(s) {\n  switch (s.t) {\n  case 9: /*BYTES | ASCII*/\n    return s.c;\n  default:\n    caml_convert_string_to_bytes(s);\n  case 0: /*BYTES | UNKOWN*/\n    if (caml_is_ascii(s.c)) {\n      s.t = 9; /*BYTES | ASCII*/\n      return s.c;\n    }\n    s.t = 8; /*BYTES | NOT_ASCII*/\n  case 8: /*BYTES | NOT_ASCII*/\n    return caml_utf16_of_utf8(s.c);\n  }\n}\n\n//Provides: caml_string_unsafe_get mutable\nfunction caml_string_unsafe_get (s, i) {\n  switch (s.t & 6) {\n  default: /* PARTIAL */\n    if (i >= s.c.length) return 0;\n  case 0: /* BYTES */\n    return s.c.charCodeAt(i);\n  case 4: /* ARRAY */\n    return s.c[i]\n  }\n}\n\n//Provides: caml_string_unsafe_set\n//Requires: caml_convert_string_to_array\nfunction caml_string_unsafe_set (s, i, c) {\n  // The OCaml compiler uses Char.unsafe_chr on integers larger than 255!\n  c &= 0xff;\n  if (s.t != 4 /* ARRAY */) {\n    if (i == s.c.length) {\n      s.c += String.fromCharCode (c);\n      if (i + 1 == s.l) s.t = 0; /*BYTES | UNKOWN*/\n      return 0;\n    }\n    caml_convert_string_to_array (s);\n  }\n  s.c[i] = c;\n  return 0;\n}\n\n//Provides: caml_string_bound_error\n//Requires: caml_invalid_argument\nfunction caml_string_bound_error () {\n  caml_invalid_argument (\"index out of bounds\");\n}\n\n//Provides: caml_string_get mutable\n//Requires: caml_string_bound_error, caml_string_unsafe_get\nfunction caml_string_get (s, i) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_get (s, i);\n}\n\n//Provides: caml_string_set\n//Requires: caml_string_bound_error, caml_string_unsafe_set\nfunction caml_string_set (s, i, c) {\n  if (i >>> 0 >= s.l) caml_string_bound_error();\n  return caml_string_unsafe_set (s, i, c);\n}\n\n//Provides: MlString\n//Requires: caml_to_js_string\nfunction MlString (tag, contents, length) {\n  this.t=tag; this.c=contents; this.l=length;\n}\nMlString.prototype.toString = function(){return caml_to_js_string(this)};\n\n//Provides: caml_convert_string_to_bytes\n//Requires: caml_str_repeat, caml_subarray_to_string\nfunction caml_convert_string_to_bytes (s) {\n  /* Assumes not BYTES */\n  if (s.t == 2 /* PARTIAL */)\n    s.c += caml_str_repeat(s.l - s.c.length, '\\0')\n  else\n    s.c = caml_subarray_to_string (s.c, 0, s.c.length);\n  s.t = 0; /*BYTES | UNKOWN*/\n}\n\n//Provides: caml_convert_string_to_array\nfunction caml_convert_string_to_array (s) {\n  /* Assumes not ARRAY */\n  var a = new Array(s.l), b = s.c, l = b.length, i = 0;\n  for (; i < l; i++) a[i] = b.charCodeAt(i);\n  for (l = s.l; i < l; i++) a[i] = 0;\n  s.c = a;\n  s.t = 4; /* ARRAY */\n  return a;\n}\n\n//Provides: caml_array_of_string mutable\n//Requires: caml_convert_string_to_array\nfunction caml_array_of_string (s) {\n  if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n  return s.c;\n}\n\n//Provides: caml_bytes_of_string mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_bytes_of_string (s) {\n  if ((s.t & 6) != 0 /* BYTES */) caml_convert_string_to_bytes(s);\n  return s.c;\n}\n\n//Provides: caml_js_to_string const\n//Requires: caml_is_ascii, caml_utf8_of_utf16, MlString\nfunction caml_js_to_string (s) {\n  var tag = 9 /* BYTES | ASCII */;\n  if (!caml_is_ascii(s))\n    tag = 8 /* BYTES | NOT_ASCII */, s = caml_utf8_of_utf16(s);\n  return new MlString(tag, s, s.length);\n}\n\n//Provides: caml_create_string const\n//Requires: MlString,caml_invalid_argument\nfunction caml_create_string(len) {\n  if (len < 0) caml_invalid_argument(\"String.create\");\n  return new MlString(len?2:9,\"\",len);\n}\n//Provides: caml_new_string\n//Requires: MlString\nfunction caml_new_string (s) { return new MlString(0,s,s.length); }\n//Provides: caml_string_of_array\n//Requires: MlString\nfunction caml_string_of_array (a) { return new MlString(4,a,a.length); }\n\n//Provides: caml_string_compare mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_compare(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?-1:(s1.c > s2.c)?1:0;\n}\n\n//Provides: caml_string_equal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_equal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c == s2.c)?1:0;\n}\n\n//Provides: caml_string_notequal mutable\n//Requires: caml_string_equal\nfunction caml_string_notequal(s1, s2) { return 1-caml_string_equal(s1, s2); }\n\n//Provides: caml_string_lessequal mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessequal(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c <= s2.c)?1:0;\n}\n\n//Provides: caml_string_lessthan mutable\n//Requires: caml_convert_string_to_bytes\nfunction caml_string_lessthan(s1, s2) {\n  (s1.t & 6) && caml_convert_string_to_bytes(s1);\n  (s2.t & 6) && caml_convert_string_to_bytes(s2);\n  return (s1.c < s2.c)?1:0;\n}\n\n//Provides: caml_string_greaterequal\n//Requires: caml_string_lessequal\nfunction caml_string_greaterequal(s1, s2) {\n  return caml_string_lessequal(s2,s1);\n}\n\n//Provides: caml_string_greaterthan\n//Requires: caml_string_lessthan\nfunction caml_string_greaterthan(s1, s2) {\n  return caml_string_lessthan(s2, s1);\n}\n\n//Provides: caml_fill_string\n//Requires: caml_str_repeat, caml_convert_string_to_array\nfunction caml_fill_string(s, i, l, c) {\n  if (l > 0) {\n    if (i == 0 && (l >= s.l || (s.t == 2 /* PARTIAL */ && l >= s.c.length))) {\n      if (c == 0) {\n        s.c = \"\";\n        s.t = 2; /* PARTIAL */\n      } else {\n        s.c = caml_str_repeat (l, String.fromCharCode(c));\n        s.t = (l == s.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n      }\n    } else {\n      if (s.t != 4 /* ARRAY */) caml_convert_string_to_array(s);\n      for (l += i; i < l; i++) s.c[i] = c;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_blit_string\n//Requires: caml_subarray_to_string, caml_convert_string_to_array\nfunction caml_blit_string(s1, i1, s2, i2, len) {\n  if (len == 0) return 0;\n  if ((i2 == 0) &&\n      (len >= s2.l || (s2.t == 2 /* PARTIAL */ && len >= s2.c.length))) {\n    s2.c = (s1.t == 4 /* ARRAY */)?\n             caml_subarray_to_string(s1.c, i1, len):\n             (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else if (s2.t == 2 /* PARTIAL */ && i2 == s2.c.length) {\n    s2.c += (s1.t == 4 /* ARRAY */)?\n             caml_subarray_to_string(s1.c, i1, len):\n             (i1 == 0 && s1.c.length == len)?s1.c:s1.c.substr(i1, len);\n    s2.t = (s2.c.length == s2.l)?0 /* BYTES | UNKOWN */ :2; /* PARTIAL */\n  } else {\n    if (s2.t != 4 /* ARRAY */) caml_convert_string_to_array(s2);\n    var c1 = s1.c, c2 = s2.c;\n    if (s1.t == 4 /* ARRAY */)\n      for (var i = 0; i < len; i++) c2 [i2 + i] = c1 [i1 + i];\n    else {\n      var l = Math.min (len, c1.length - i1);\n      for (var i = 0; i < l; i++) c2 [i2 + i] = c1.charCodeAt(i1 + i);\n      for (; i < len; i++) c2 [i2 + i] = 0;\n    }\n  }\n  return 0;\n}\n\n//Provides: caml_ml_string_length const\nfunction caml_ml_string_length(s) { return s.l }\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Core\n\n//Provides: raw_array_sub\nfunction raw_array_sub (a,i,l) {\n  var b = new Array(l);\n  for(var j = 0; j < l; j++) b[j] = a[i+j];\n  return b\n}\n\n//Provides: raw_array_copy\nfunction raw_array_copy (a) {\n  var l = a.length;\n  var b = new Array(l);\n  for(var i = 0; i < l; i++ ) b[i] = a[i];\n  return b\n}\n\n//Provides: raw_array_cons\nfunction raw_array_cons (a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  b[0]=x;\n  for(var i = 1; i <= l; i++ ) b[i] = a[i-1];\n  return b\n}\n\n//Provides: raw_array_append_one\nfunction raw_array_append_one(a,x) {\n  var l = a.length;\n  var b = new Array(l+1);\n  var i = 0;\n  for(; i < l; i++ ) b[i] = a[i];\n  b[i]=x;\n  return b\n}\n\n//Provides: caml_call_gen (const, shallow)\n//Requires: raw_array_sub\n//Requires: raw_array_append_one\nfunction caml_call_gen(f, args) {\n  if(f.fun)\n    return caml_call_gen(f.fun, args);\n  var n = f.length;\n  var argsLen = args.length;\n  var d = n - argsLen;\n  if (d == 0)\n    return f.apply(null, args);\n  else if (d < 0)\n    return caml_call_gen(f.apply(null,\n                                 raw_array_sub(args,0,n)),\n                         raw_array_sub(args,n,argsLen - n));\n  else\n    return function (x){ return caml_call_gen(f, raw_array_append_one(args,x)); };\n}\n\n//Provides: caml_named_values\nvar caml_named_values = {};\n\n//Provides: caml_register_named_value (const,const)\n//Requires: caml_named_values, caml_bytes_of_string\nfunction caml_register_named_value(nm,v) {\n  caml_named_values[caml_bytes_of_string(nm)] = v;\n  return 0;\n}\n\n//Provides: caml_named_value\n//Requires: caml_named_values\nfunction caml_named_value(nm) {\n  return caml_named_values[nm]\n}\n\n//Provides: caml_global_data\nvar caml_global_data = [0];\n\n//Provides: caml_register_global (const, shallow, const)\n//Requires: caml_global_data\nfunction caml_register_global (n, v, name_opt) {\n  caml_global_data[n + 1] = v;\n  if(name_opt) caml_global_data[name_opt] = v;\n}\n\n//Provides: caml_get_global_data mutable\n//Requires: caml_global_data\nfunction caml_get_global_data () { return caml_global_data; }\n\n//Raise exception\n\n\n//Provides: caml_raise_constant (const)\n//Version: < 4.02\nfunction caml_raise_constant (tag) { throw [0, tag]; }\n\n//Provides: caml_raise_constant (const)\n//Version: >= 4.02\nfunction caml_raise_constant (tag) { throw tag; }\n\n//Provides: caml_return_exn_constant (const)\n//Version: < 4.02\nfunction caml_return_exn_constant (tag) { return [0, tag]; }\n\n//Provides: caml_return_exn_constant (const)\n//Version: >= 4.02\nfunction caml_return_exn_constant (tag) { return tag; }\n\n//Provides: caml_raise_with_arg (const, const)\nfunction caml_raise_with_arg (tag, arg) { throw [0, tag, arg]; }\n\n//Provides: caml_raise_with_string (const, const)\n//Requires: caml_raise_with_arg,caml_new_string\nfunction caml_raise_with_string (tag, msg) {\n  caml_raise_with_arg (tag, caml_new_string (msg));\n}\n\n//Provides: caml_raise_sys_error (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_raise_sys_error (msg) {\n  caml_raise_with_string(caml_global_data.Sys_error, msg);\n}\n\n//Provides: caml_failwith (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_failwith (msg) {\n  caml_raise_with_string(caml_global_data.Failure, msg);\n}\n\n//Provides: caml_wrap_exception const (const)\n//Requires: caml_global_data,caml_js_to_string,caml_named_value\n//Requires: caml_return_exn_constant\nfunction caml_wrap_exception(e) {\n  if(e instanceof Array) return e;\n  //Stack_overflow: chrome, safari\n  if(joo_global_object.RangeError\n     && e instanceof joo_global_object.RangeError\n     && e.message\n     && e.message.match(/maximum call stack/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Stack_overflow: firefox\n  if(joo_global_object.InternalError\n     && e instanceof joo_global_object.InternalError\n     && e.message\n     && e.message.match(/too much recursion/i))\n    return caml_return_exn_constant(caml_global_data.Stack_overflow);\n  //Wrap Error in Js.Error exception\n  if(e instanceof joo_global_object.Error)\n    return [0,caml_named_value(\"jsError\"),e];\n  //fallback: wrapped in Failure\n  return [0,caml_global_data.Failure,caml_js_to_string (String(e))];\n}\n\n//Provides: caml_invalid_argument (const)\n//Requires: caml_raise_with_string, caml_global_data\nfunction caml_invalid_argument (msg) {\n  caml_raise_with_string(caml_global_data.Invalid_argument, msg);\n}\n\n//Provides: caml_raise_end_of_file\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_end_of_file () {\n  caml_raise_constant(caml_global_data.End_of_file);\n}\n\n//Provides: caml_raise_zero_divide\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_zero_divide () {\n  caml_raise_constant(caml_global_data.Division_by_zero);\n}\n\n//Provides: caml_raise_not_found\n//Requires: caml_raise_constant, caml_global_data\nfunction caml_raise_not_found () {\n  caml_raise_constant(caml_global_data.Not_found); }\n\n\n//Provides: caml_array_bound_error\n//Requires: caml_invalid_argument\nfunction caml_array_bound_error () {\n  caml_invalid_argument(\"index out of bounds\");\n}\n\n//Provides: caml_update_dummy\nfunction caml_update_dummy (x, y) {\n  if( typeof y===\"function\" ) { x.fun = y; return 0; }\n  if( y.fun ) { x.fun = y.fun; return 0; }\n  var i = y.length; while (i--) x[i] = y[i]; return 0;\n}\n\n//Provides: caml_obj_is_block const (const)\nfunction caml_obj_is_block (x) { return +(x instanceof Array); }\n//Provides: caml_obj_tag const (const)\n//Requires: MlString\nfunction caml_obj_tag (x) { return (x instanceof Array)?x[0]:(x instanceof MlString)?252:1000; }\n//Provides: caml_obj_set_tag (mutable, const)\nfunction caml_obj_set_tag (x, tag) { x[0] = tag; return 0; }\n//Provides: caml_obj_block const (const,const)\nfunction caml_obj_block (tag, size) {\n  var o = new Array(size+1);\n  o[0]=tag;\n  for (var i = 1; i <= size; i++) o[i] = 0;\n  return o;\n}\n//Provides: caml_obj_dup mutable (const)\nfunction caml_obj_dup (x) {\n  var l = x.length;\n  var a = new Array(l);\n  for(var i = 0; i < l; i++ ) a[i] = x[i];\n  return a;\n}\n//Provides: caml_obj_truncate (mutable, const)\n//Requires: caml_invalid_argument\nfunction caml_obj_truncate (x, s) {\n  if (s<=0 || s + 1 > x.length)\n    caml_invalid_argument (\"Obj.truncate\");\n  if (x.length != s + 1) x.length = s + 1;\n  return 0;\n}\n\n//Provides: caml_lazy_make_forward const (const)\nfunction caml_lazy_make_forward (v) { return [250, v]; }\n\n//Provides: caml_mul const\nif (!Math.imul)\n  Math.imul =\n    function (x,y)\n    { y |= 0; return ((((x >> 16) * y) << 16) + (x & 0xffff) * y)|0; };\nvar caml_mul = Math.imul;\n\n//slightly slower\n// function mul32(x,y) {\n//   var xlo = x & 0xffff;\n//   var xhi = x - xlo;\n//   return (((xhi * y) |0) + xlo * y)|0;\n// }\n\n//Provides: caml_div\n//Requires: caml_raise_zero_divide\nfunction caml_div(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return (x/y)|0;\n}\n\n//Provides: caml_mod\n//Requires: caml_raise_zero_divide\nfunction caml_mod(x,y) {\n  if (y == 0) caml_raise_zero_divide ();\n  return x%y;\n}\n\n///////////// Pervasive\n//Provides: caml_array_set (mutable, const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_set (array, index, newval) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  array[index+1]=newval; return 0;\n}\n\n//Provides: caml_array_get mutable (const, const)\n//Requires: caml_array_bound_error\nfunction caml_array_get (array, index) {\n  if ((index < 0) || (index >= array.length - 1)) caml_array_bound_error();\n  return array[index+1];\n}\n\n//Provides: caml_check_bound (const, const)\n//Requires: caml_array_bound_error\nfunction caml_check_bound (array, index) {\n  if (index >>> 0 >= array.length - 1) caml_array_bound_error();\n  return array;\n}\n\n//Provides: caml_make_vect const (const, const)\nfunction caml_make_vect (len, init) {\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=0;\n  for (var i = 1; i < len; i++) b[i] = init;\n  return b;\n}\n\n//Provides: caml_make_float_vect const (const)\nfunction caml_make_float_vect(len){\n  var len = len + 1 | 0;\n  var b = new Array(len);\n  b[0]=254;\n  for (var i = 1; i < len; i++) b[i] = 0;\n  return b\n}\n\n//Provides: caml_compare_val (const, const, const)\n//Requires: MlString, caml_int64_compare, caml_int_compare, caml_string_compare\n//Requires: caml_invalid_argument\nfunction caml_compare_val (a, b, total) {\n  var stack = [];\n  for(;;) {\n    if (!(total && a === b)) {\n      if (a instanceof MlString) {\n        if (b instanceof MlString) {\n            if (a !== b) {\n\u0009\u0009var x = caml_string_compare(a, b);\n\u0009\u0009if (x != 0) return x;\n\u0009    }\n        } else\n          // Should not happen\n          return 1;\n      } else if (a instanceof Array && a[0] === (a[0]|0)) {\n        var ta = a[0];\n        // ignore double_array_tag\n        if (ta === 254) ta=0;\n        // Forward object\n        if (ta === 250) {\n          a = a[1];\n          continue;\n        } else if (b instanceof Array && b[0] === (b[0]|0)) {\n          var tb = b[0];\n          // ignore double_array_tag\n          if (tb === 254) tb=0;\n          // Forward object\n          if (tb === 250) {\n            b = b[1];\n            continue;\n          } else if (ta != tb) {\n            return (ta < tb)?-1:1;\n          } else {\n            switch (ta) {\n            case 248: {\n\u0009\u0009// Object\n\u0009\u0009var x = caml_int_compare(a[2], b[2]);\n\u0009\u0009if (x != 0) return x;\n\u0009\u0009break;\n\u0009    }\n            case 251: {\n                caml_invalid_argument(\"equal: abstract value\");\n            }\n            case 255: {\n\u0009\u0009// Int64\n\u0009\u0009var x = caml_int64_compare(a, b);\n\u0009\u0009if (x != 0) return x;\n\u0009\u0009break;\n\u0009    }\n            default:\n              if (a.length != b.length) return (a.length < b.length)?-1:1;\n              if (a.length > 1) stack.push(a, b, 1);\n            }\n          }\n        } else\n          return 1;\n      } else if (b instanceof MlString ||\n                 (b instanceof Array && b[0] === (b[0]|0))) {\n        return -1;\n      } else if (typeof a != \"number\" && a && a.compare) {\n        return a.compare(b,total);\n      } else if (typeof a == \"function\") {\n        caml_invalid_argument(\"equal: functional value\");\n      } else {\n        if (a < b) return -1;\n        if (a > b) return 1;\n        if (a != b) {\n          if (!total) return NaN;\n          if (a == a) return 1;\n          if (b == b) return -1;\n        }\n      }\n    }\n    if (stack.length == 0) return 0;\n    var i = stack.pop();\n    b = stack.pop();\n    a = stack.pop();\n    if (i + 1 < a.length) stack.push(a, b, i + 1);\n    a = a[i];\n    b = b[i];\n  }\n}\n//Provides: caml_compare (const, const)\n//Requires: caml_compare_val\nfunction caml_compare (a, b) { return caml_compare_val (a, b, true); }\n//Provides: caml_int_compare mutable (const, const)\nfunction caml_int_compare (a, b) {\n  if (a < b) return (-1); if (a == b) return 0; return 1;\n}\n//Provides: caml_equal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_equal (x, y) { return +(caml_compare_val(x,y,false) == 0); }\n//Provides: caml_notequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_notequal (x, y) { return +(caml_compare_val(x,y,false) != 0); }\n//Provides: caml_greaterequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterequal (x, y) { return +(caml_compare_val(x,y,false) >= 0); }\n//Provides: caml_greaterthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_greaterthan (x, y) { return +(caml_compare_val(x,y,false) > 0); }\n//Provides: caml_lessequal mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessequal (x, y) { return +(caml_compare_val(x,y,false) <= 0); }\n//Provides: caml_lessthan mutable (const, const)\n//Requires: caml_compare_val\nfunction caml_lessthan (x, y) { return +(caml_compare_val(x,y,false) < 0); }\n\n//Provides: caml_parse_sign_and_base\n//Requires: caml_string_unsafe_get, caml_ml_string_length\nfunction caml_parse_sign_and_base (s) {\n  var i = 0, len = caml_ml_string_length(s), base = 10,\n     sign = (len > 0 && caml_string_unsafe_get(s,0) == 45)?(i++,-1):1;\n  if (i + 1 < len && caml_string_unsafe_get(s, i) == 48)\n    switch (caml_string_unsafe_get(s, i + 1)) {\n    case 120: case 88: base = 16; i += 2; break;\n    case 111: case 79: base =  8; i += 2; break;\n    case  98: case 66: base =  2; i += 2; break;\n    }\n  return [i, sign, base];\n}\n\n//Provides: caml_parse_digit\nfunction caml_parse_digit(c) {\n  if (c >= 48 && c <= 57)  return c - 48;\n  if (c >= 65 && c <= 90)  return c - 55;\n  if (c >= 97 && c <= 122) return c - 87;\n  return -1;\n}\n\n//Provides: caml_int_of_string (const)\n//Requires: caml_ml_string_length, caml_string_unsafe_get\n//Requires: caml_parse_sign_and_base, caml_parse_digit, caml_failwith\nfunction caml_int_of_string (s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var len = caml_ml_string_length(s);\n  var threshold = -1 >>> 0;\n  var c = (i < len)?caml_string_unsafe_get(s, i):0;\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = d;\n  for (i++;i<len;i++) {\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    res = base * res + d;\n    if (res > threshold) caml_failwith(\"int_of_string\");\n  }\n  if (i != len) caml_failwith(\"int_of_string\");\n  // For base different from 10, we expect an unsigned representation,\n  // hence any value of 'res' (less than 'threshold') is acceptable.\n  // But we have to convert the result back to a signed integer.\n  res = sign * res;\n  if ((base == 10) && ((res | 0) != res))\n    /* Signed representation expected, allow -2^(nbits-1) to 2^(nbits-1) - 1 */\n    caml_failwith(\"int_of_string\");\n  return res | 0;\n}\n\n//Provides: caml_float_of_string (const)\n//Requires: caml_failwith, caml_bytes_of_string\nfunction caml_float_of_string(s) {\n  var res;\n  s = caml_bytes_of_string (s);\n  res = +s;\n  if ((s.length > 0) && (res === res)) return res;\n  s = s.replace(/_/g,\"\");\n  res = +s;\n  if (((s.length > 0) && (res === res)) || /^[+-]?nan$/i.test(s)) return res;\n  var m = /^ *([+-]?)0x([0-9a-f]+)\\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec(s);\n//            1        2             3           4\n  if(m){\n    var m3 = m[3].replace(/0+$/,'');\n    var mantissa = parseInt(m[1] + m[2] + m3, 16);\n    var exponent = (m[4]|0) - 4*m3.length;\n    res = mantissa * Math.pow(2, exponent);\n    return res;\n  }\n  if(/^\\+?inf(inity)?$/i.test(s)) return Infinity;\n  if(/^-inf(inity)?$/i.test(s)) return -Infinity;\n  caml_failwith(\"float_of_string\");\n}\n\n//Provides: caml_is_printable const (const)\nfunction caml_is_printable(c) { return +(c > 31 && c < 127); }\n\n///////////// Format\n//Provides: caml_parse_format\n//Requires: caml_bytes_of_string, caml_invalid_argument\nfunction caml_parse_format (fmt) {\n  fmt = caml_bytes_of_string(fmt);\n  var len = fmt.length;\n  if (len > 31) caml_invalid_argument(\"format_int: format too long\");\n  var f =\n    { justify:'+', signstyle:'-', filler:' ', alternate:false,\n      base:0, signedconv:false, width:0, uppercase:false,\n      sign:1, prec:-1, conv:'f' };\n  for (var i = 0; i < len; i++) {\n    var c = fmt.charAt(i);\n    switch (c) {\n    case '-':\n      f.justify = '-'; break;\n    case '+': case ' ':\n      f.signstyle = c; break;\n    case '0':\n      f.filler = '0'; break;\n    case '#':\n      f.alternate = true; break;\n    case '1': case '2': case '3': case '4': case '5':\n    case '6': case '7': case '8': case '9':\n      f.width = 0;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.width = f.width * 10 + c; i++\n      }\n      i--;\n     break;\n    case '.':\n      f.prec = 0;\n      i++;\n      while (c=fmt.charCodeAt(i) - 48, c >= 0 && c <= 9) {\n        f.prec = f.prec * 10 + c; i++\n      }\n      i--;\n    case 'd': case 'i':\n      f.signedconv = true; /* fallthrough */\n    case 'u':\n      f.base = 10; break;\n    case 'x':\n      f.base = 16; break;\n    case 'X':\n      f.base = 16; f.uppercase = true; break;\n    case 'o':\n      f.base = 8; break;\n    case 'e': case 'f': case 'g':\n      f.signedconv = true; f.conv = c; break;\n    case 'E': case 'F': case 'G':\n      f.signedconv = true; f.uppercase = true;\n      f.conv = c.toLowerCase (); break;\n    }\n  }\n  return f;\n}\n\n//Provides: caml_finish_formatting\n//Requires: caml_new_string\nfunction caml_finish_formatting(f, rawbuffer) {\n  if (f.uppercase) rawbuffer = rawbuffer.toUpperCase();\n  var len = rawbuffer.length;\n  /* Adjust len to reflect additional chars (sign, etc) */\n  if (f.signedconv && (f.sign < 0 || f.signstyle != '-')) len++;\n  if (f.alternate) {\n    if (f.base == 8) len += 1;\n    if (f.base == 16) len += 2;\n  }\n  /* Do the formatting */\n  var buffer = \"\";\n  if (f.justify == '+' && f.filler == ' ')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  if (f.signedconv) {\n    if (f.sign < 0) buffer += '-';\n    else if (f.signstyle != '-') buffer += f.signstyle;\n  }\n  if (f.alternate && f.base == 8) buffer += '0';\n  if (f.alternate && f.base == 16) buffer += \"0x\";\n  if (f.justify == '+' && f.filler == '0')\n    for (var i = len; i < f.width; i++) buffer += '0';\n  buffer += rawbuffer;\n  if (f.justify == '-')\n    for (var i = len; i < f.width; i++) buffer += ' ';\n  return caml_new_string (buffer);\n}\n\n//Provides: caml_format_int const (const, const)\n//Requires: caml_parse_format, caml_finish_formatting, caml_str_repeat\n//Requires: caml_new_string, caml_bytes_of_string\nfunction caml_format_int(fmt, i) {\n  if (caml_bytes_of_string(fmt) == \"%d\") return caml_new_string(\"\"+i);\n  var f = caml_parse_format(fmt);\n  if (i < 0) { if (f.signedconv) { f.sign = -1; i = -i; } else i >>>= 0; }\n  var s = i.toString(f.base);\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - s.length;\n    if (n > 0) s = caml_str_repeat (n, '0') + s;\n  }\n  return caml_finish_formatting(f, s);\n}\n\n//Provides: caml_format_float const\n//Requires: caml_parse_format, caml_finish_formatting\nfunction caml_format_float (fmt, x) {\n  var s, f = caml_parse_format(fmt);\n  var prec = (f.prec < 0)?6:f.prec;\n  if (x < 0 || (x == 0 && 1/x == -Infinity)) { f.sign = -1; x = -x; }\n  if (isNaN(x)) { s = \"nan\"; f.filler = ' '; }\n  else if (!isFinite(x)) { s = \"inf\"; f.filler = ' '; }\n  else\n    switch (f.conv) {\n    case 'e':\n      var s = x.toExponential(prec);\n      // exponent should be at least two digits\n      var i = s.length;\n      if (s.charAt(i - 3) == 'e')\n        s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n      break;\n    case 'f':\n      s = x.toFixed(prec); break;\n    case 'g':\n      prec = prec?prec:1;\n      s = x.toExponential(prec - 1);\n      var j = s.indexOf('e');\n      var exp = +s.slice(j + 1);\n      if (exp < -4 || x >= 1e21 || x.toFixed(0).length > prec) {\n        // remove trailing zeroes\n        var i = j - 1; while (s.charAt(i) == '0') i--;\n        if (s.charAt(i) == '.') i--;\n        s = s.slice(0, i + 1) + s.slice(j);\n        i = s.length;\n        if (s.charAt(i - 3) == 'e')\n          s = s.slice (0, i - 1) + '0' + s.slice (i - 1);\n        break;\n      } else {\n        var p = prec;\n        if (exp < 0) { p -= exp + 1; s = x.toFixed(p); }\n        else while (s = x.toFixed(p), s.length > prec + 1) p--;\n        if (p) {\n          // remove trailing zeroes\n          var i = s.length - 1; while (s.charAt(i) == '0') i--;\n          if (s.charAt(i) == '.') i--;\n          s = s.slice(0, i + 1);\n        }\n      }\n      break;\n    }\n  return caml_finish_formatting(f, s);\n}\n\n///////////// Hashtbl\n//Provides: caml_hash_univ_param mutable\n//Requires: MlString, caml_convert_string_to_bytes\n//Requires: caml_int64_to_bytes, caml_int64_bits_of_float\nfunction caml_hash_univ_param (count, limit, obj) {\n  var hash_accu = 0;\n  function hash_aux (obj) {\n    limit --;\n    if (count < 0 || limit < 0) return;\n    if (obj instanceof Array && obj[0] === (obj[0]|0)) {\n      switch (obj[0]) {\n      case 248:\n        // Object\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[2]) | 0;\n        break;\n      case 250:\n        // Forward\n        limit++; hash_aux(obj); break;\n      case 255:\n        // Int64\n        count --;\n        hash_accu = (hash_accu * 65599 + obj[1] + (obj[2] << 24)) | 0;\n        break;\n      default:\n        count --;\n        hash_accu = (hash_accu * 19 + obj[0]) | 0;\n        for (var i = obj.length - 1; i > 0; i--) hash_aux (obj[i]);\n      }\n    } else if (obj instanceof MlString) {\n      count --;\n      switch (obj.t & 6) {\n      default: /* PARTIAL */\n        caml_convert_string_to_bytes(obj);\n      case 0: /* BYTES */\n        for (var b = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + b.charCodeAt(i)) | 0;\n        break;\n      case 2: /* ARRAY */\n        for (var a = obj.c, l = obj.l, i = 0; i < l; i++)\n          hash_accu = (hash_accu * 19 + a[i]) | 0;\n      }\n    } else if (obj === (obj|0)) {\n      // Integer\n      count --;\n      hash_accu = (hash_accu * 65599 + obj) | 0;\n    } else if (obj === +obj) {\n      // Float\n      count--;\n      var p = caml_int64_to_bytes (caml_int64_bits_of_float (obj));\n      for (var i = 7; i >= 0; i--) hash_accu = (hash_accu * 19 + p[i]) | 0;\n    }\n  }\n  hash_aux (obj);\n  return hash_accu & 0x3FFFFFFF;\n}\n\n//Provides: caml_hash mutable\n//Requires: MlString, caml_convert_string_to_bytes\n//Requires: caml_int64_bits_of_float, caml_mul\nvar caml_hash =\nfunction () {\n  var HASH_QUEUE_SIZE = 256;\n  function ROTL32(x,n) { return ((x << n) | (x >>> (32-n))); }\n  function MIX(h,d) {\n    d = caml_mul(d, 0xcc9e2d51|0);\n    d = ROTL32(d, 15);\n    d = caml_mul(d, 0x1b873593);\n    h ^= d;\n    h = ROTL32(h, 13);\n    return (((h + (h << 2))|0) + (0xe6546b64|0))|0;\n  }\n  function FINAL_MIX(h) {\n    h ^= h >>> 16;\n    h = caml_mul (h, 0x85ebca6b|0);\n    h ^= h >>> 13;\n    h = caml_mul (h, 0xc2b2ae35|0);\n    h ^= h >>> 16;\n    return h;\n  }\n  function caml_hash_mix_int64 (h, v) {\n    var lo = v[1] | (v[2] << 24);\n    var hi = (v[2] >>> 8) | (v[3] << 16);\n    h = MIX(h, lo);\n    h = MIX(h, hi);\n    return h;\n  }\n  function caml_hash_mix_int64_2 (h, v) {\n    var lo = v[1] | (v[2] << 24);\n    var hi = (v[2] >>> 8) | (v[3] << 16);\n    h = MIX(h, hi ^ lo);\n    return h;\n  }\n  function caml_hash_mix_string_str(h, s) {\n    var len = s.length, i, w;\n    for (i = 0; i + 4 <= len; i += 4) {\n      w = s.charCodeAt(i)\n          | (s.charCodeAt(i+1) << 8)\n          | (s.charCodeAt(i+2) << 16)\n          | (s.charCodeAt(i+3) << 24);\n      h = MIX(h, w);\n    }\n    w = 0;\n    switch (len & 3) {\n    case 3: w  = s.charCodeAt(i+2) << 16;\n    case 2: w |= s.charCodeAt(i+1) << 8;\n    case 1: w |= s.charCodeAt(i);\n            h = MIX(h, w);\n    default:\n    }\n    h ^= len;\n    return h;\n  }\n  function caml_hash_mix_string_arr(h, s) {\n    var len = s.length, i, w;\n    for (i = 0; i + 4 <= len; i += 4) {\n      w = s[i]\n          | (s[i+1] << 8)\n          | (s[i+2] << 16)\n          | (s[i+3] << 24);\n      h = MIX(h, w);\n    }\n    w = 0;\n    switch (len & 3) {\n    case 3: w  = s[i+2] << 16;\n    case 2: w |= s[i+1] << 8;\n    case 1: w |= s[i];\n            h = MIX(h, w);\n    default:\n    }\n    h ^= len;\n    return h;\n  }\n  return function (count, limit, seed, obj) {\n    var queue, rd, wr, sz, num, h, v, i, len;\n    sz = limit;\n    if (sz < 0 || sz > HASH_QUEUE_SIZE) sz = HASH_QUEUE_SIZE;\n    num = count;\n    h = seed;\n    queue = [obj]; rd = 0; wr = 1;\n    while (rd < wr && num > 0) {\n      v = queue[rd++];\n      if (v instanceof Array && v[0] === (v[0]|0)) {\n        switch (v[0]) {\n        case 248:\n          // Object\n          h = MIX(h, v[2]);\n          num--;\n          break;\n        case 250:\n          // Forward\n          queue[--rd] = v[1];\n          break;\n        case 255:\n          // Int64\n          h = caml_hash_mix_int64_2 (h, v);\n          num --;\n          break;\n        default:\n          var tag = ((v.length - 1) << 10) | v[0];\n          h = MIX(h, tag);\n          for (i = 1, len = v.length; i < len; i++) {\n            if (wr >= sz) break;\n            queue[wr++] = v[i];\n          }\n          break;\n        }\n      } else if (v instanceof MlString) {\n        switch (v.t & 6) {\n        default:\n          caml_convert_string_to_bytes (v);\n        case 0: /* BYTES */\n          h = caml_hash_mix_string_str(h, v.c);\n          break;\n        case 2: /* ARRAY */\n          h = caml_hash_mix_string_arr(h, v.c);\n        }\n        num--;\n      } else if (v === (v|0)) {\n        // Integer\n        h = MIX(h, v+v+1);\n        num--;\n      } else if (v === +v) {\n        // Float\n        h = caml_hash_mix_int64(h, caml_int64_bits_of_float (v));\n        num--;\n      }\n    }\n    h = FINAL_MIX(h);\n    return h & 0x3FFFFFFF;\n  }\n} ();\n\n///////////// Sys\n//Provides: caml_sys_time mutable\nvar caml_initial_time = new Date() * 0.001;\nfunction caml_sys_time () { return new Date() * 0.001 - caml_initial_time; }\n//Provides: caml_sys_get_config const\n//Requires: caml_new_string\nfunction caml_sys_get_config () {\n  return [0, caml_new_string(\"Unix\"), 32, 0];\n}\n//Provides: caml_sys_random_seed mutable\n//Version: < 4.00\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var x = new Date()^0xffffffff*Math.random();\n  return x;\n}\n\n//Provides: caml_sys_random_seed mutable\n//Version: >= 4.00\n//The function needs to return an array since OCaml 4.0...\nfunction caml_sys_random_seed () {\n  var x = new Date()^0xffffffff*Math.random();\n  return [0,x];\n}\n\n\n\n//Provides: caml_sys_const_big_endian const\nfunction caml_sys_const_big_endian () { return 0; }\n//Provides: caml_sys_const_word_size const\nfunction caml_sys_const_word_size () { return 32; }\n//Provides: caml_sys_const_int_size const\nfunction caml_sys_const_int_size () { return 32; }\n\n//Provides: caml_sys_const_max_wosize const\n// max_int / 4 so that the following does not overflow\n//let max_string_length = word_size / 8 * max_array_length - 1;;\nfunction caml_sys_const_max_wosize () { return (0x7FFFFFFF/4) | 0;}\n\n//Provides: caml_sys_const_ostype_cygwin const\nfunction caml_sys_const_ostype_cygwin () { return 0; }\n//Provides: caml_sys_const_ostype_unix const\nfunction caml_sys_const_ostype_unix () { return 1; }\n//Provides: caml_sys_const_ostype_win32 const\nfunction caml_sys_const_ostype_win32 () { return 0; }\n\n//Provides: caml_sys_system_command\nfunction caml_sys_system_command(_cmd){\n  return 127;\n}\n\n///////////// Array\n//Provides: caml_array_sub mutable\nfunction caml_array_sub (a, i, len) {\n  var a2 = new Array(len+1);\n  a2[0]=0;\n  for(var i2 = 1, i1= i+1; i2 <= len; i2++,i1++ ){\n    a2[i2]=a[i1];\n  }\n  return a2;\n}\n\n//Provides: caml_array_append mutable\nfunction caml_array_append(a1, a2) {\n  var l1 = a1.length, l2 = a2.length;\n  var l = l1+l2-1\n  var a = new Array(l);\n  a[0] = 0;\n  var i = 1,j = 1;\n  for(;i<l1;i++) a[i]=a1[i];\n  for(;i<l;i++,j++) a[i]=a2[j];\n  return a;\n}\n\n//Provides: caml_array_concat mutable\nfunction caml_array_concat(l) {\n  var a = [0];\n  while (l !== 0) {\n    var b = l[1];\n    for (var i = 1; i < b.length; i++) a.push(b[i]);\n    l = l[2];\n  }\n  return a;\n}\n\n//Provides: caml_array_blit\nfunction caml_array_blit(a1, i1, a2, i2, len) {\n  if (i2 <= i1) {\n    for (var j = 1; j <= len; j++) a2[i2 + j] = a1[i1 + j];\n  } else {\n    for (var j = len; j >= 1; j--) a2[i2 + j] = a1[i1 + j];\n  };\n  return 0;\n}\n\n///////////// CamlinternalOO\n//Provides: caml_get_public_method const\nvar caml_method_cache = [];\nfunction caml_get_public_method (obj, tag, cacheid) {\n  var meths = obj[1];\n  var ofs = caml_method_cache[cacheid];\n  if (ofs === null) {\n    // Make sure the array is not sparse\n    for (var i = caml_method_cache.length; i < cacheid; i++)\n      caml_method_cache[i] = 0;\n  } else if (meths[ofs] === tag) {\n//      console.log(\"cache hit\");\n    return meths[ofs - 1];\n  }\n//  console.log(\"cache miss\");\n  var li = 3, hi = meths[1] * 2 + 1, mi;\n  while (li < hi) {\n    mi = ((li+hi) >> 1) | 1;\n    if (tag < meths[mi+1]) hi = mi-2;\n    else li = mi;\n  }\n  caml_method_cache[cacheid] = li + 1;\n  /* return 0 if tag is not there */\n  return (tag == meths[li+1] ? meths[li] : 0);\n}\n\n//Provides: caml_final_register const\nfunction caml_final_register () { return 0; }\n//Provides: caml_final_release const\nfunction caml_final_release () { return 0; }\n//Provides: caml_backtrace_status const\nfunction caml_backtrace_status () { return 0; }\n//Provides: caml_get_exception_backtrace const\nfunction caml_get_exception_backtrace () { return 0; }\n//Provides: caml_get_exception_raw_backtrace const\nfunction caml_get_exception_raw_backtrace () { return [0]; }\n//Provides: caml_record_backtrace\nfunction caml_record_backtrace () { return 0; }\n//Provides: caml_convert_raw_backtrace const\nfunction caml_convert_raw_backtrace () { return 0; }\n//Provides: caml_get_current_callstack const\nfunction caml_get_current_callstack () { return [0]; }\n//Provides: caml_sys_getenv\n//Requires: caml_raise_not_found\n//Requires: caml_js_to_string\nfunction caml_sys_getenv (name) {\n  var g = joo_global_object;\n  var n = name.toString();\n  //nodejs env\n  if(g.process\n     && g.process.env\n     && g.process.env[n] != undefined)\n    return caml_js_to_string(g.process.env[n]);\n  caml_raise_not_found ();\n}\n//Provides: caml_sys_exit\n//Requires: caml_invalid_argument\nfunction caml_sys_exit (code) {\n  var g = joo_global_object;\n  if(g.quit) g.quit(code);\n  //nodejs\n  if(g.process && g.process.exit) g.process.exit(code);\n  caml_invalid_argument(\"Function 'exit' not implemented\");\n}\n\n//Provides: caml_sys_get_argv const\n//Requires: caml_js_to_string\n//Requires: raw_array_sub\nfunction caml_sys_get_argv () {\n  var g = joo_global_object;\n  var main = \"a.out\";\n  var args = []\n\n  if(g.process\n     && g.process.argv\n     && g.process.argv.length > 0) {\n    var argv = g.process.argv\n    //nodejs\n    main = argv[1];\n    args = raw_array_sub(argv,2,argv.length - 2);\n  }\n\n  var p = caml_js_to_string(main);\n  var args2 = [0, p];\n  for(var i = 0; i < args.length; i++)\n    args2.push(caml_js_to_string(args[i]));\n  return [0, p, args2];\n}\n\n//Provides: unix_inet_addr_of_string\nfunction unix_inet_addr_of_string () {return 0;}\n\n//Provides: caml_oo_last_id\nvar caml_oo_last_id = 0;\n\n//Provides: caml_set_oo_id\n//Requires: caml_oo_last_id\nfunction caml_set_oo_id (b) {\n  b[2]=caml_oo_last_id++;\n  return b;\n}\n\n//Provides: caml_fresh_oo_id\n//Requires: caml_oo_last_id\nfunction caml_fresh_oo_id() {\n  return caml_oo_last_id++;\n}\n\n//Provides: caml_install_signal_handler const\nfunction caml_install_signal_handler(){return 0}\n\n\n//Provides: caml_convert_raw_backtrace_slot\n//Requires: caml_failwith\nfunction caml_convert_raw_backtrace_slot(){\n  caml_failwith(\"caml_convert_raw_backtrace_slot\");\n}\n\n//Provides: caml_bswap16\nfunction caml_bswap16(x) {\n  return ((((x & 0x00FF) << 8) |\n           ((x & 0xFF00) >> 8)));\n}\n//Provides: caml_int32_bswap\nfunction caml_int32_bswap(x) {\n  return (((x & 0x000000FF) << 24) |\n          ((x & 0x0000FF00) << 8) |\n          ((x & 0x00FF0000) >> 8) |\n          ((x & 0xFF000000) >> 24));\n}\n//Provides: caml_int64_bswap\nfunction caml_int64_bswap(x) {\n  return [\n    255,\n    (((x[3] & 0x0000ff00) >> 8) |\n     ((x[3] & 0x000000ff) << 8) |\n     ((x[2] & 0x00ff0000))),\n    (((x[2] & 0x0000ff00) >> 8) |\n     ((x[2] & 0x000000ff) << 8) |\n     ((x[1] & 0x00ff0000))),\n    (((x[1] & 0x0000ff00) >> 8) |\n     ((x[1] & 0x000000ff) << 8))]\n}\n\n//Provides: caml_list_of_js_array const (const)\nfunction caml_list_of_js_array(a){\n  var l = 0;\n  for(var i=a.length - 1; i>=0; i--){\n    var e = a[i];\n    l = [0,e,l];\n  }\n  return l\n}\n\n//Provides: caml_runtime_warnings\nvar caml_runtime_warnings = 0;\n\n//Provides: caml_ml_enable_runtime_warnings\n//Requires: caml_runtime_warnings\nfunction caml_ml_enable_runtime_warnings (bool) {\n  caml_runtime_warnings = bool;\n  return 0;\n}\n\n//Provides: caml_ml_runtime_warnings_enabled\n//Requires: caml_runtime_warnings\nfunction caml_ml_runtime_warnings_enabled (_unit) {\n  return caml_runtime_warnings;\n}\n\n\n//Provides: caml_sys_isatty\nfunction caml_sys_isatty(_chan) {\n  return 0;\n}\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_int64_offset\nvar caml_int64_offset = Math.pow(2, -24);\n\n//Provides: caml_int64_ucompare const\nfunction caml_int64_ucompare(x,y) {\n  if (x[3] > y[3]) return 1;\n  if (x[3] < y[3]) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_ult const\n//Requires: caml_int64_ucompare\nfunction caml_int64_ult(x,y) { return caml_int64_ucompare(x,y) < 0; }\n\n//Provides: caml_int64_compare const\nfunction caml_int64_compare(x,y) {\n  var x3 = x[3] << 16;\n  var y3 = y[3] << 16;\n  if (x3 > y3) return 1;\n  if (x3 < y3) return -1;\n  if (x[2] > y[2]) return 1;\n  if (x[2] < y[2]) return -1;\n  if (x[1] > y[1]) return 1;\n  if (x[1] < y[1]) return -1;\n  return 0;\n}\n\n//Provides: caml_int64_neg const\nfunction caml_int64_neg (x) {\n  var y1 = - x[1];\n  var y2 = - x[2] + (y1 >> 24);\n  var y3 = - x[3] + (y2 >> 24);\n  return [255, y1 & 0xffffff, y2 & 0xffffff, y3 & 0xffff];\n}\n\n//Provides: caml_int64_add const\nfunction caml_int64_add (x, y) {\n  var z1 = x[1] + y[1];\n  var z2 = x[2] + y[2] + (z1 >> 24);\n  var z3 = x[3] + y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_sub const\nfunction caml_int64_sub (x, y) {\n  var z1 = x[1] - y[1];\n  var z2 = x[2] - y[2] + (z1 >> 24);\n  var z3 = x[3] - y[3] + (z2 >> 24);\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_mul const\n//Requires: caml_int64_offset\nfunction caml_int64_mul(x,y) {\n  var z1 = x[1] * y[1];\n  var z2 = ((z1 * caml_int64_offset) | 0) + x[2] * y[1] + x[1] * y[2];\n  var z3 = ((z2 * caml_int64_offset) | 0) + x[3] * y[1] + x[2] * y[2] + x[1] * y[3];\n  return [255, z1 & 0xffffff, z2 & 0xffffff, z3 & 0xffff];\n}\n\n//Provides: caml_int64_is_zero const\nfunction caml_int64_is_zero(x) {\n  return (x[3]|x[2]|x[1]) == 0;\n}\n\n//Provides: caml_int64_is_negative const\nfunction caml_int64_is_negative(x) {\n  return (x[3] << 16) < 0;\n}\n\n//Provides: caml_int64_is_min_int const\nfunction caml_int64_is_min_int(x) {\n  return x[3] == 0x8000 && (x[1]|x[2]) == 0;\n}\n\n//Provides: caml_int64_is_minus_one const\nfunction caml_int64_is_minus_one(x) {\n  return x[3] == 0xffff && (x[1]&x[2]) == 0xffffff;\n}\n\n//Provides: caml_int64_and const\nfunction caml_int64_and (x, y) {\n  return [255, x[1]&y[1], x[2]&y[2], x[3]&y[3]];\n}\n\n//Provides: caml_int64_or const\nfunction caml_int64_or (x, y) {\n  return [255, x[1]|y[1], x[2]|y[2], x[3]|y[3]];\n}\n\n//Provides: caml_int64_xor const\nfunction caml_int64_xor (x, y) {\n  return [255, x[1]^y[1], x[2]^y[2], x[3]^y[3]];\n}\n\n//Provides: caml_int64_shift_left const\nfunction caml_int64_shift_left (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            (x[1] << s) & 0xffffff,\n            ((x[2] << s) | (x[1] >> (24 - s))) & 0xffffff,\n            ((x[3] << s) | (x[2] >> (24 - s))) & 0xffff];\n  if (s < 48)\n    return [255, 0,\n            (x[1] << (s - 24)) & 0xffffff,\n            ((x[2] << (s - 24)) | (x[1] >> (48 - s))) & 0xffff];\n  return [255, 0, 0, (x[1] << (s - 48)) & 0xffff];\n}\n\n//Provides: caml_int64_shift_right_unsigned const\nfunction caml_int64_shift_right_unsigned (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (x[3] << (24 - s))) & 0xffffff,\n            (x[3] >> s)];\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            (x[3] >> (s - 24)),\n            0];\n  return [255, (x[3] >> (s - 48)), 0, 0];\n}\n\n//Provides: caml_int64_shift_right const\nfunction caml_int64_shift_right (x, s) {\n  s = s & 63;\n  if (s == 0) return x;\n  var h = (x[3] << 16) >> 16;\n  if (s < 24)\n    return [255,\n            ((x[1] >> s) | (x[2] << (24 - s))) & 0xffffff,\n            ((x[2] >> s) | (h << (24 - s))) & 0xffffff,\n            ((x[3] << 16) >> s) >>> 16];\n  var sign = (x[3] << 16) >> 31;\n  if (s < 48)\n    return [255,\n            ((x[2] >> (s - 24)) | (x[3] << (48 - s))) & 0xffffff,\n            ((x[3] << 16) >> (s - 24) >> 16) & 0xffffff,\n            sign & 0xffff];\n  return [255,\n          ((x[3] << 16) >> (s - 32)) & 0xffffff,\n          sign & 0xffffff, sign & 0xffff];\n}\n\n//Provides: caml_int64_lsl1 const\nfunction caml_int64_lsl1 (x) {\n  x[3] = (x[3] << 1) | (x[2] >> 23);\n  x[2] = ((x[2] << 1) | (x[1] >> 23)) & 0xffffff;\n  x[1] = (x[1] << 1) & 0xffffff;\n}\n\n//Provides: caml_int64_lsr1 const\nfunction caml_int64_lsr1 (x) {\n  x[1] = ((x[1] >>> 1) | (x[2] << 23)) & 0xffffff;\n  x[2] = ((x[2] >>> 1) | (x[3] << 23)) & 0xffffff;\n  x[3] = x[3] >>> 1;\n}\n\n//Provides: caml_int64_udivmod const\n//Requires: caml_int64_ucompare, caml_int64_lsl1, caml_int64_lsr1\n//Requires: caml_int64_sub\n//Requires: caml_obj_dup\nfunction caml_int64_udivmod (x, y) {\n  var offset = 0;\n  var modulus = caml_obj_dup(x);\n  var divisor = caml_obj_dup(y);\n  var quotient = [255, 0, 0, 0];\n  while (caml_int64_ucompare (modulus, divisor) > 0) {\n    offset++;\n    caml_int64_lsl1 (divisor);\n  }\n  while (offset >= 0) {\n    offset --;\n    caml_int64_lsl1 (quotient);\n    if (caml_int64_ucompare (modulus, divisor) >= 0) {\n      quotient[1] ++;\n      modulus = caml_int64_sub (modulus, divisor);\n    }\n    caml_int64_lsr1 (divisor);\n  }\n  return [0,quotient, modulus];\n}\n\n//Provides: caml_int64_div const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_div (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3] ^ y[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var q = caml_int64_udivmod(x, y)[1];\n  if (sign & 0x8000) q = caml_int64_neg(q);\n  return q;\n}\n\n//Provides: caml_int64_mod const\n//Requires: caml_int64_is_zero, caml_raise_zero_divide\n//Requires: caml_int64_neg, caml_int64_udivmod\nfunction caml_int64_mod (x, y)\n{\n  if (caml_int64_is_zero (y)) caml_raise_zero_divide ();\n  var sign = x[3];\n  if (x[3] & 0x8000) x = caml_int64_neg(x);\n  if (y[3] & 0x8000) y = caml_int64_neg(y);\n  var r = caml_int64_udivmod(x, y)[2];\n  if (sign & 0x8000) r = caml_int64_neg(r);\n  return r;\n}\n\n//Provides: caml_int64_of_int32 const\nfunction caml_int64_of_int32 (x) {\n  return [255, x & 0xffffff, (x >> 24) & 0xffffff, (x >> 31) & 0xffff]\n}\n\n//Provides: caml_int64_to_int32 const\nfunction caml_int64_to_int32 (x) {\n  return x[1] | (x[2] << 24);\n}\n\n//Provides: caml_int64_to_float const\nfunction caml_int64_to_float (x) {\n  return ((x[3] << 16) * Math.pow(2, 32) + x[2] * Math.pow(2, 24)) + x[1];\n}\n\n//Provides: caml_int64_of_float const\n//Requires: caml_int64_offset\nfunction caml_int64_of_float (x) {\n  if (x < 0) x = Math.ceil(x);\n  return [255,\n          x & 0xffffff,\n          Math.floor(x * caml_int64_offset) & 0xffffff,\n          Math.floor(x * caml_int64_offset * caml_int64_offset) & 0xffff];\n}\n\n//Provides: caml_int64_format const\n//Requires: caml_parse_format, caml_finish_formatting\n//Requires: caml_int64_is_negative, caml_int64_neg\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_to_int32\n//Requires: caml_int64_is_zero, caml_str_repeat\nfunction caml_int64_format (fmt, x) {\n  var f = caml_parse_format(fmt);\n  if (f.signedconv && caml_int64_is_negative(x)) {\n    f.sign = -1; x = caml_int64_neg(x);\n  }\n  var buffer = \"\";\n  var wbase = caml_int64_of_int32(f.base);\n  var cvtbl = \"0123456789abcdef\";\n  do {\n    var p = caml_int64_udivmod(x, wbase);\n    x = p[1];\n    buffer = cvtbl.charAt(caml_int64_to_int32(p[2])) + buffer;\n  } while (! caml_int64_is_zero(x));\n  if (f.prec >= 0) {\n    f.filler = ' ';\n    var n = f.prec - buffer.length;\n    if (n > 0) buffer = caml_str_repeat (n, '0') + buffer;\n  }\n  return caml_finish_formatting(f, buffer);\n}\n\n//Provides: caml_int64_of_string\n//Requires: caml_parse_sign_and_base, caml_failwith, caml_parse_digit, MlString\n//Requires: caml_int64_of_int32, caml_int64_udivmod, caml_int64_ult\n//Requires: caml_int64_add, caml_int64_mul, caml_int64_neg\n//Requires: caml_ml_string_length,caml_string_unsafe_get\nfunction caml_int64_of_string(s) {\n  var r = caml_parse_sign_and_base (s);\n  var i = r[0], sign = r[1], base = r[2];\n  var base64 = caml_int64_of_int32(base);\n  var threshold =\n    caml_int64_udivmod([255, 0xffffff, 0xfffffff, 0xffff], base64)[1];\n  var c = caml_string_unsafe_get(s, i);\n  var d = caml_parse_digit(c);\n  if (d < 0 || d >= base) caml_failwith(\"int_of_string\");\n  var res = caml_int64_of_int32(d);\n  for (;;) {\n    i++;\n    c = caml_string_unsafe_get(s, i);\n    if (c == 95) continue;\n    d = caml_parse_digit(c);\n    if (d < 0 || d >= base) break;\n    /* Detect overflow in multiplication base * res */\n    if (caml_int64_ult(threshold, res)) caml_failwith(\"int_of_string\");\n    d = caml_int64_of_int32(d);\n    res = caml_int64_add(caml_int64_mul(base64, res), d);\n    /* Detect overflow in addition (base * res) + d */\n    if (caml_int64_ult(res, d)) caml_failwith(\"int_of_string\");\n  }\n  if (i != caml_ml_string_length(s)) caml_failwith(\"int_of_string\");\n  if (r[2] == 10 && caml_int64_ult([255, 0, 0, 0x8000], res))\n    caml_failwith(\"int_of_string\");\n  if (sign < 0) res = caml_int64_neg(res);\n  return res;\n}\n\n//Provides: caml_int64_of_bytes\nfunction caml_int64_of_bytes(a) {\n  return [255, a[7] | (a[6] << 8) | (a[5] << 16),\n          a[4] | (a[3] << 8) | (a[2] << 16), a[1] | (a[0] << 8)];\n}\n//Provides: caml_int64_to_bytes\nfunction caml_int64_to_bytes(x) {\n  return [x[3] >> 8, x[3] & 0xff, x[2] >> 16, (x[2] >> 8) & 0xff, x[2] & 0xff,\n          x[1] >> 16, (x[1] >> 8) & 0xff, x[1] & 0xff];\n}\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: jsoo_floor_log2\nvar log2_ok = Math.log2 && Math.log2(1.1235582092889474E+307) == 1020\nfunction jsoo_floor_log2(x) {\n    if(log2_ok) return Math.floor(Math.log2(x))\n    var i = 0;\n    if (x == 0) return -Infinity;\n    if(x>=1) {while (x>=2) {x/=2; i++} }\n    else {while (x < 1) {x*=2; i--} };\n    return i;\n}\n\n//Provides: caml_int64_bits_of_float const\n//Requires: jsoo_floor_log2\nfunction caml_int64_bits_of_float (x) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return [255, 1, 0, 0xfff0];\n    return (x > 0)?[255,0,0,0x7ff0]:[255,0,0,0xfff0];\n  }\n  var sign = (x==0 && 1/x == -Infinity)?0x8000:(x>=0)?0:0x8000;\n  if (sign) x = -x;\n  // Int64.bits_of_float 1.1235582092889474E+307 = 0x7fb0000000000000L\n  // using Math.LOG2E*Math.log(x) in place of Math.log2 result in precision lost\n  var exp = jsoo_floor_log2(x) + 1023;\n  if (exp <= 0) {\n    exp = 0;\n    x /= Math.pow(2,-1026);\n  } else {\n    x /= Math.pow(2,exp-1027);\n    if (x < 16) {\n      x *= 2; exp -=1; }\n    if (exp == 0) {\n      x /= 2; }\n  }\n  var k = Math.pow(2,24);\n  var r3 = x|0;\n  x = (x - r3) * k;\n  var r2 = x|0;\n  x = (x - r2) * k;\n  var r1 = x|0;\n  r3 = (r3 &0xf) | sign | exp << 4;\n  return [255, r1, r2, r3];\n}\n\n//FP literals can be written using the hexadecimal\n//notation 0x<mantissa in hex>p<exponent> from ISO C99.\n//https://github.com/dankogai/js-hexfloat/blob/master/hexfloat.js\n//Provides: caml_hexstring_of_float const\n//Requires: caml_js_to_string, caml_str_repeat\nfunction caml_hexstring_of_float (x, prec, style) {\n  if (!isFinite(x)) {\n    if (isNaN(x)) return caml_js_to_string(\"nan\");\n    return caml_js_to_string ((x > 0)?\"infinity\":\"-infinity\");\n  }\n  var sign = (x==0 && 1/x == -Infinity)?1:(x>=0)?0:1;\n  if(sign) x = -x;\n  var exp = 0;\n  if (x == 0) { }\n  else if (x < 1) {\n    while (x < 1 && exp > -1022)  { x *= 2; exp-- }\n  } else {\n    while (x >= 2) { x /= 2; exp++ }\n  }\n  var exp_sign = exp < 0 ? '' : '+';\n  var sign_str = '';\n  if (sign) sign_str = '-'\n  else {\n    switch(style){\n    case 43 /* '+' */: sign_str = '+'; break;\n    case 32 /* ' ' */: sign_str = ' '; break;\n    default: break;\n    }\n  }\n  if (prec >= 0 && prec < 13) {\n    /* If a precision is given, and is small, round mantissa accordingly */\n      var cst = Math.pow(2,prec * 4);\n      x = Math.round(x * cst) / cst;\n  }\n  var x_str = x.toString(16);\n  if(prec >= 0){\n      var idx = x_str.indexOf('.');\n    if(idx<0) {\n      x_str += '.' + caml_str_repeat(prec, '0');\n    }\n    else {\n      var size = idx+1+prec;\n      if(x_str.length < size)\n        x_str += caml_str_repeat(size - x_str.length, '0');\n      else\n        x_str = x_str.substr(0,size);\n    }\n  }\n  return caml_js_to_string (sign_str + '0x' + x_str + 'p' + exp_sign + exp.toString(10));\n}\n\n//Provides: caml_int64_float_of_bits const\nfunction caml_int64_float_of_bits (x) {\n  var exp = (x[3] & 0x7fff) >> 4;\n  if (exp == 2047) {\n      if ((x[1]|x[2]|(x[3]&0xf)) == 0)\n        return (x[3] & 0x8000)?(-Infinity):Infinity;\n      else\n        return NaN;\n  }\n  var k = Math.pow(2,-24);\n  var res = (x[1]*k+x[2])*k+(x[3]&0xf);\n  if (exp > 0) {\n    res += 16;\n    res *= Math.pow(2,exp-1027);\n  } else\n    res *= Math.pow(2,-1026);\n  if (x[3] & 0x8000) res = - res;\n  return res;\n}\n//Provides: caml_classify_float const\nfunction caml_classify_float (x) {\n  if (isFinite (x)) {\n    if (Math.abs(x) >= 2.2250738585072014e-308) return 0;\n    if (x != 0) return 1;\n    return 2;\n  }\n  return isNaN(x)?4:3;\n}\n//Provides: caml_modf_float const\nfunction caml_modf_float (x) {\n  if (isFinite (x)) {\n    var neg = (1/x) < 0;\n    x = Math.abs(x);\n    var i = Math.floor (x);\n    var f = x - i;\n    if (neg) { i = -i; f = -f; }\n    return [0, f, i];\n  }\n  if (isNaN (x)) return [0, NaN, NaN];\n  return [0, 1/x, x];\n}\n//Provides: caml_ldexp_float const\nfunction caml_ldexp_float (x,exp) {\n  exp |= 0;\n  if (exp > 1023) {\n    exp -= 1023;\n    x *= Math.pow(2, 1023);\n    if (exp > 1023) {  // in case x is subnormal\n      exp -= 1023;\n      x *= Math.pow(2, 1023);\n    }\n  }\n  if (exp < -1023) {\n    exp += 1023;\n    x *= Math.pow(2, -1023);\n  }\n  x *= Math.pow(2, exp);\n  return x;\n}\n//Provides: caml_frexp_float const\n//Requires: jsoo_floor_log2\nfunction caml_frexp_float (x) {\n  if ((x == 0) || !isFinite(x)) return [0, x, 0];\n  var neg = x < 0;\n  if (neg) x = - x;\n  var exp = jsoo_floor_log2(x) + 1;\n  x *= Math.pow(2,-exp);\n  if (x < 0.5) { x *= 2; exp -= 1; }\n  if (neg) x = - x;\n  return [0, x, exp];\n}\n\n//Provides: caml_float_compare const\nfunction caml_float_compare (x, y) {\n  if (x === y) return 0;\n  if (x < y) return -1;\n  if (x > y) return 1;\n  if (x === x) return 1;\n  if (y === y) return -1;\n  return 0;\n}\n\n//Provides: caml_copysign_float const\nfunction caml_copysign_float (x, y) {\n  if (y == 0) y = 1 / y;\n  x = Math.abs(x);\n  return (y < 0)?(-x):x;\n}\n\n//Provides: caml_expm1_float const\nfunction caml_expm1_float (x) {\n  var y = Math.exp(x), z = y - 1;\n  return (Math.abs(x)>1?z:(z==0?x:x*z/Math.log(y)));\n}\n\n//Provides: caml_log1p_float const\nfunction caml_log1p_float (x) {\n  var y = 1 + x, z = y - 1;\n  return (z==0?x:x*Math.log(y)/z);\n}\n\n//Provides: caml_hypot_float const\nfunction caml_hypot_float (x, y) {\n  var x = Math.abs(x), y = Math.abs(y);\n  var a = Math.max(x, y), b = Math.min(x,y) / (a?a:1);\n  return (a * Math.sqrt(1 + b*b));\n}\n\n// FIX: these five functions only give approximate results.\n//Provides: caml_log10_float const\nfunction caml_log10_float (x) { return Math.LOG10E * Math.log(x); }\n//Provides: caml_cosh_float const\nfunction caml_cosh_float (x) { return (Math.exp(x) + Math.exp(-x)) / 2; }\n//Provides: caml_sinh_float const\nfunction caml_sinh_float (x) { return (Math.exp(x) - Math.exp(-x)) / 2; }\n//Provides: caml_tanh_float const\nfunction caml_tanh_float (x) {\n  var y = Math.exp(x), z = Math.exp(-x);\n  return (y + z) / (y - z);\n}\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard, Andy Ray\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n//\n// Bigarray.\n//\n// - all bigarray types including Int64 and Complex.\n// - fortran + c layouts\n// - sub/slice/reshape\n// - retain fast path for 1d array access\n//\n// Note; int64+complex support if provided by allocating a second TypedArray\n// Note; accessor functions are selected when the bigarray is created.  It is assumed\n//       that this results in just a function pointer and will thus be fast.\n\n//Provides: caml_ba_init const\nfunction caml_ba_init() {\n    return 0;\n}\n\n//Provides: caml_ba_init_views\n//Requires: caml_ba_views\nfunction caml_ba_init_views() {\n    if (!caml_ba_views) {\n        var g = joo_global_object;\n        caml_ba_views = [\n            [\n                g.Float32Array, g.Float64Array, g.Int8Array, g.Uint8Array,\n                g.Int16Array, g.Uint16Array, g.Int32Array, g.Int32Array,\n                g.Int32Array, g.Int32Array, g.Float32Array, g.Float64Array, g.Uint8Array],\n            [\n                0 /* General */, 0 /* General */, 0 /* General */, 0 /* General */,\n                0 /* General */, 0 /* General */, 0 /* General */, 1 /* Int64 */,\n                0 /* General */, 0 /* General */, 2 /* Complex */, 2 /* Complex */, 0 /* General */]\n        ];\n    }\n}\n\n//Provides: caml_ba_get_size\n//Requires: caml_invalid_argument\nfunction caml_ba_get_size(dims) {\n    var n_dims = dims.length;\n    var size = 1;\n    for (var i = 0; i < n_dims; i++) {\n        if (dims[i] < 0)\n            caml_invalid_argument(\"Bigarray.create: negative dimension\");\n        size = size * dims[i];\n    }\n    return size;\n}\n\n//Provides: caml_ba_views\nvar caml_ba_views;\n\n//Provides: caml_ba_create_from\n//Requires: caml_ba_get_size\n//Requires: caml_invalid_argument\n//Requires: caml_array_bound_error\nfunction caml_ba_create_from(data, data2, data_type, kind, layout, dims) {\n    var n_dims = dims.length;\n    var size = caml_ba_get_size(dims);\n\n    //\n    // Functions to compute the offsets for C or Fortran layout arrays\n    // from the given array of indices.\n    //\n    function offset_c(index) {\n        var ofs = 0;\n        if (n_dims != index.length)\n            caml_invalid_argument(\"Bigarray.get/set: bad number of dimensions\");\n        for (var i = 0; i < n_dims; i++) {\n            if (index[i] < 0 || index[i] >= dims[i])\n                caml_array_bound_error();\n            ofs = (ofs * dims[i]) + index[i];\n        }\n        return ofs;\n    }\n\n    function offset_fortran(index) {\n        var ofs = 0;\n        if (n_dims != index.length)\n            caml_invalid_argument(\"Bigarray.get/set: wrong number of indices\");\n        for (var i = n_dims - 1; i >= 0; i--) {\n            if (index[i] < 1 || index[i] > dims[i])\n                caml_array_bound_error();\n            ofs = (ofs * dims[i]) + (index[i] - 1);\n        }\n        return ofs;\n    }\n\n    var offset = layout == 0 ? offset_c : offset_fortran;\n\n    var dim0 = dims[0];\n\n    //\n    // Element get functions.\n    //\n    function get_std(index) {\n        var ofs = offset(index);\n        var v = data[ofs];\n        return v;\n    }\n\n    function get_int64(index) {\n        var off = offset(index);\n        var l = data[off];\n        var h = data2[off];\n        return [\n            255,\n            l & 0xffffff,\n            ((l >>> 24) & 0xff) | ((h & 0xffff) << 8),\n            (h >>> 16) & 0xffff];\n    }\n\n    function get_complex(index) {\n        var off = offset(index);\n        var r = data[off];\n        var i = data2[off];\n        return [254, r, i];\n    }\n\n    var get = data_type == 1 /* Int64 */ ? get_int64 : (data_type == 2 /* Complex */ ? get_complex : get_std);\n\n    function get1_c(i) {\n        if (i < 0 || i >= dim0)\n            caml_array_bound_error();\n        return data[i];\n    }\n    function get1_fortran(i) {\n        if (i < 1 || i > dim0)\n            caml_array_bound_error();\n        return data[i - 1];\n    }\n    function get1_any(i) {\n        return get([i]);\n    }\n\n    var get1 = data_type == 0 /* General */ ? (layout == 0 ? get1_c : get1_fortran) : get1_any;\n\n    //\n    // Element set functions\n    //\n    function set_std_raw(off, v) {\n        data[off] = v;\n    }\n\n    function set_int64_raw(off, v) {\n        data[off] = v[1] | ((v[2] & 0xff) << 24);\n        data2[off] = ((v[2] >>> 8) & 0xffff) | (v[3] << 16);\n    }\n\n    function set_complex_raw(off, v) {\n        data[off] = v[1];\n        data2[off] = v[2];\n    }\n\n    function set_std(index, v) {\n        var ofs = offset(index);\n        return set_std_raw(ofs, v);\n    }\n    function set_int64(index, v) {\n        return set_int64_raw(offset(index), v);\n    }\n    function set_complex(index, v) {\n        return set_complex_raw(offset(index), v);\n    }\n\n    var set = data_type == 1 /* Int64 */ ? set_int64 : (data_type == 2 /* Complex */ ? set_complex : set_std);\n\n    function set1_c(i, v) {\n        if (i < 0 || i >= dim0)\n            caml_array_bound_error();\n        data[i] = v;\n    }\n    function set1_fortran(i, v) {\n        if (i < 1 || i > dim0)\n            caml_array_bound_error();\n        data[i - 1] = v;\n    }\n    function set1_any(i, v) {\n        set([i], v);\n    }\n\n    var set1 = data_type == 0 /* General */ ? (layout == 0 ? set1_c : set1_fortran) : set1_any;\n\n    //\n    // other\n    //\n    function nth_dim(i) {\n        if (i < 0 || i >= n_dims)\n            caml_invalid_argument(\"Bigarray.dim\");\n        return dims[i];\n    }\n\n    function fill(v) {\n        if (data_type == 0 /* General */)\n            for (var i = 0; i < data.length; i++)\n                set_std_raw(i, v);\n        if (data_type == 1 /* Int64 */)\n            for (var i = 0; i < data.length; i++)\n                set_int64_raw(i, v);\n        if (data_type == 2 /* Complex */)\n            for (var i = 0; i < data.length; i++)\n                set_complex_raw(i, v);\n    }\n    function blit(from) {\n        if (n_dims != from.num_dims)\n            caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n        for (var i = 0; i < n_dims; i++)\n            if (dims[i] != from.nth_dim(i))\n                caml_invalid_argument(\"Bigarray.blit: dimension mismatch\");\n        data.set(from.data);\n        if (data_type != 0 /* General */)\n            data2.set(from.data2);\n    }\n\n    function sub(ofs, len) {\n        var changed_dim;\n        var mul = 1;\n\n        if (layout == 0) {\n            for (var i = 1; i < n_dims; i++)\n                mul = mul * dims[i];\n            changed_dim = 0;\n        } else {\n            for (var i = 0; i < (n_dims - 1); i++)\n                mul = mul * dims[i];\n            changed_dim = n_dims - 1;\n            ofs = ofs - 1;\n        }\n\n        if (ofs < 0 || len < 0 || (ofs + len) > dims[changed_dim])\n            caml_invalid_argument(\"Bigarray.sub: bad sub-array\");\n\n        var new_data = data.subarray(ofs * mul, (ofs + len) * mul);\n        var new_data2 = data_type == 0 /* General */ ? null : data2.subarray(ofs * mul, (ofs + len) * mul);\n\n        var new_dims = [];\n        for (var i = 0; i < n_dims; i++)\n            new_dims[i] = dims[i];\n        new_dims[changed_dim] = len;\n\n        return caml_ba_create_from(new_data, new_data2, data_type, kind, layout, new_dims);\n    }\n\n    function slice(vind) {\n        var num_inds = vind.length;\n        var index = [];\n        var sub_dims = [];\n        var ofs;\n\n        if (num_inds >= n_dims)\n            caml_invalid_argument(\"Bigarray.slice: too many indices\");\n\n        // Compute offset and check bounds\n        if (layout == 0) {\n            for (var i = 0; i < num_inds; i++)\n                index[i] = vind[i];\n            for (; i < n_dims; i++)\n                index[i] = 0;\n            ofs = offset(index);\n            sub_dims = dims.slice(num_inds);\n        } else {\n            for (var i = 0; i < num_inds; i++)\n                index[n_dims - num_inds + i] = vind[i];\n            for (var i = 0; i < n_dims - num_inds; i++)\n                index[i] = 1;\n            ofs = offset(index);\n            sub_dims = dims.slice(0, num_inds);\n        }\n\n        var size = caml_ba_get_size(sub_dims);\n        var new_data = data.subarray(ofs, ofs + size);\n        var new_data2 = data_type == 0 /* General */ ? null : data2.subarray(ofs, ofs + size);\n\n        return caml_ba_create_from(new_data, new_data2, data_type, kind, layout, sub_dims);\n    }\n\n    function reshape(vdim) {\n        var new_dim = [];\n        var num_dims = vdim.length;\n\n        if (num_dims < 1)\n            caml_invalid_argument(\"Bigarray.reshape: bad number of dimensions\");\n        var num_elts = 1;\n        for (var i = 0; i < num_dims; i++) {\n            new_dim[i] = vdim[i];\n            if (new_dim[i] < 0)\n                caml_invalid_argument(\"Bigarray.reshape: negative dimension\");\n            num_elts = num_elts * new_dim[i];\n        }\n\n        // Check that sizes agree\n        if (num_elts != size)\n            caml_invalid_argument(\"Bigarray.reshape: size mismatch\");\n\n        return caml_ba_create_from(data, data2, data_type, kind, layout, new_dim);\n    }\n\n    function compare(b, total) {\n        if (layout != b.layout)\n            return b.layout - layout;\n        if (n_dims != b.num_dims)\n            return b.num_dims - n_dims;\n        for (var i = 0; i < n_dims; i++)\n            if (nth_dim(i) != b.nth_dim(i))\n                return (nth_dim(i) < b.nth_dim(i)) ? -1 : 1;\n        switch (kind) {\n            case 0:\n            case 1:\n            case 10:\n            case 11:\n                var x, y;\n                for (var i = 0; i < data.length; i++) {\n                    x = data[i];\n                    y = b.data[i];\n\n                    //first array\n                    if (x < y)\n                        return -1;\n                    if (x > y)\n                        return 1;\n                    if (x != y) {\n                        if (x != y) {\n                            if (!total)\n                                return NaN;\n                            if (x == x)\n                                return 1;\n                            if (y == y)\n                                return -1;\n                        }\n                    }\n                    if (data2) {\n                        //second array\n                        x = data2[i];\n                        y = b.data2[i];\n                        if (x < y)\n                            return -1;\n                        if (x > y)\n                            return 1;\n                        if (x != y) {\n                            if (x != y) {\n                                if (!total)\n                                    return NaN;\n                                if (x == x)\n                                    return 1;\n                                if (y == y)\n                                    return -1;\n                            }\n                        }\n                    }\n                }\n                ;\n                break;\n\n            case 2:\n            case 3:\n            case 4:\n            case 5:\n            case 6:\n            case 8:\n            case 9:\n            case 12:\n                for (var i = 0; i < data.length; i++) {\n                    if (data[i] < b.data[i])\n                        return -1;\n                    if (data[i] > b.data[i])\n                        return 1;\n                }\n                ;\n                break;\n\n            case 7:\n                for (var i = 0; i < data.length; i++) {\n                    if (data2[i] < b.data2[i])\n                        return -1;\n                    if (data2[i] > b.data2[i])\n                        return 1;\n                    if (data[i] < b.data[i])\n                        return -1;\n                    if (data[i] > b.data[i])\n                        return 1;\n                }\n                ;\n                break;\n        }\n        return 0;\n    }\n\n    return {\n        data: data,\n        data2: data2,\n        data_type: data_type,\n        num_dims: n_dims,\n        nth_dim: nth_dim,\n        kind: kind,\n        layout: layout,\n        size: size,\n        sub: sub,\n        slice: slice,\n        blit: blit,\n        fill: fill,\n        reshape: reshape,\n        get: get,\n        get1: get1,\n        set: set,\n        set1: set1,\n        compare: compare\n    };\n}\n\n//Provides: caml_ba_create\n//Requires: caml_ba_create_from\n//Requires: caml_js_from_array\n//Requires: caml_ba_views\n//Requires: caml_ba_init_views\n//Requires: caml_invalid_argument\n//Requires: caml_ba_get_size\nfunction caml_ba_create(kind, layout, dims_ml) {\n    // Initialize TypedArray views\n    caml_ba_init_views();\n\n    // set up dimensions and calculate size\n    var dims = caml_js_from_array(dims_ml);\n\n    //var n_dims = dims.length;\n    var size = caml_ba_get_size(dims);\n\n    // Allocate TypedArray\n    var view = caml_ba_views[0][kind];\n    if (!view)\n        caml_invalid_argument(\"Bigarray.create: unsupported kind\");\n    var data = new view(size);\n\n    // 2nd TypedArray for int64, complex32 and complex64\n    var data_type = caml_ba_views[1][kind];\n    var data2 = null;\n    if (data_type != 0 /* General */) {\n        data2 = new view(size);\n    }\n\n    return caml_ba_create_from(data, data2, data_type, kind, layout, dims);\n}\n\n//Provides: caml_ba_kind\nfunction caml_ba_kind(ba) {\n    return ba.kind;\n}\n\n//Provides: caml_ba_layout\nfunction caml_ba_layout(ba) {\n    return ba.layout;\n}\n\n//Provides: caml_ba_num_dims\nfunction caml_ba_num_dims(ba, _dim) {\n    return ba.num_dims;\n}\n\n//Provides: caml_ba_dim\nfunction caml_ba_dim(ba, dim) {\n    return ba.nth_dim(dim);\n}\n\n//Provides: caml_ba_dim_1\nfunction caml_ba_dim_1(ba) {\n    return ba.nth_dim(0);\n}\n\n//Provides: caml_ba_dim_2\nfunction caml_ba_dim_2(ba) {\n    return ba.nth_dim(1);\n}\n\n//Provides: caml_ba_dim_3\nfunction caml_ba_dim_3(ba) {\n    return ba.nth_dim(2);\n}\n\n//Provides: caml_ba_get_generic\n//Requires: caml_js_from_array\nfunction caml_ba_get_generic(ba, index) {\n    return ba.get(caml_js_from_array(index));\n}\n\n//Provides: caml_ba_uint8_get16\nfunction caml_ba_uint8_get16(ba, i0) {\n    var b1 = ba.get1(i0);\n    var b2 = ba.get1(i0+1) << 8;\n    return (b1 | b2);\n}\n\n//Provides: caml_ba_uint8_get32\nfunction caml_ba_uint8_get32(ba, i0) {\n    var b1 = ba.get1(i0);\n    var b2 = ba.get1(i0+1) << 8;\n    var b3 = ba.get1(i0+2) << 16;\n    var b4 = ba.get1(i0+3) << 24;\n    return (b1 | b2 | b3 | b4);\n}\n\n//Provides: caml_ba_uint8_get64\nfunction caml_ba_uint8_get64(ba, i0) {\n    var b1 = ba.get1(i0);\n    var b2 = ba.get1(i0+1) << 8;\n    var b3 = ba.get1(i0+2) << 16;\n    var b4 = ba.get1(i0+3);\n    var b5 = ba.get1(i0+4) << 8;\n    var b6 = ba.get1(i0+5) << 16;\n    var b7 = ba.get1(i0+6);\n    var b8 = ba.get1(i0+7) << 8;\n    return [255, b1 | b2 | b3, b4 | b5 | b6, b7 | b8 ];\n}\n\n//Provides: caml_ba_get_1\nfunction caml_ba_get_1(ba, i0) {\n    return ba.get1(i0);\n}\n\n//Provides: caml_ba_get_2\nfunction caml_ba_get_2(ba, i0, i1) {\n    return ba.get([i0, i1]);\n}\n\n//Provides: caml_ba_get_3\nfunction caml_ba_get_3(ba, i0, i1, i2) {\n    return ba.get([i0, i1, i2]);\n}\n\n//Provides: caml_ba_set_generic\n//Requires: caml_js_from_array\nfunction caml_ba_set_generic(ba, index, v) {\n    return ba.set(caml_js_from_array(index), v);\n}\n\n//Provides: caml_ba_uint8_set16\nfunction caml_ba_uint8_set16(ba, i0, v) {\n    ba.set1(i0, v & 0xff);\n    ba.set1(i0+1, (v >>> 8) & 0xff);\n    return 0;\n}\n\n//Provides: caml_ba_uint8_set32\nfunction caml_ba_uint8_set32(ba, i0, v) {\n    ba.set1(i0, v & 0xff);\n    ba.set1(i0+1, (v >>> 8) & 0xff);\n    ba.set1(i0+2, (v >>> 16) & 0xff);\n    ba.set1(i0+3, (v >>> 24) & 0xff);\n    return 0;\n}\n\n//Provides: caml_ba_uint8_set64\nfunction caml_ba_uint8_set64(ba, i0, v) {\n    ba.set1(i0, v[1] & 0xff);\n    ba.set1(i0+1, (v[1] >> 8) & 0xff);\n    ba.set1(i0+2, v[1] >> 16);\n    ba.set1(i0+3, v[2] & 0xff);\n    ba.set1(i0+4, (v[2] >> 8) & 0xff);\n    ba.set1(i0+5, v[2] >> 16);\n    ba.set1(i0+6, v[3] & 0xff);\n    ba.set1(i0+7, v[3] >> 8);\n    return 0;\n}\n\n//Provides: caml_ba_set_1\nfunction caml_ba_set_1(ba, i0, v) {\n    return ba.set1(i0, v);\n}\n\n//Provides: caml_ba_set_2\nfunction caml_ba_set_2(ba, i0, i1, v) {\n    return ba.set([i0, i1], v);\n}\n\n//Provides: caml_ba_set_3\nfunction caml_ba_set_3(ba, i0, i1, i2, v) {\n    return ba.set([i0, i1, i2], v);\n}\n\n//Provides: caml_ba_blit\nfunction caml_ba_blit(src, dst) {\n    dst.blit(src);\n    return 0;\n}\n\n//Provides: caml_ba_fill\nfunction caml_ba_fill(ba, init) {\n    ba.fill(init);\n    return 0;\n}\n\n//Provides: caml_ba_sub\nfunction caml_ba_sub(ba, ofs, len) {\n    return ba.sub(ofs, len);\n}\n\n//Provides: caml_ba_slice\n//Requires: caml_js_from_array\nfunction caml_ba_slice(ba, vind) {\n    return ba.slice(caml_js_from_array(vind));\n}\n\n//Provides: caml_ba_reshape\n//Requires: caml_js_from_array\nfunction caml_ba_reshape(ba, vind) {\n    return ba.reshape(caml_js_from_array(vind));\n}\n",
  "///////// BIGSTRING\n//Provides: bigstring_alloc\n//Requires: caml_ba_create\nfunction bigstring_alloc(_,size){\n  return caml_ba_create(12, 0, [0,size]);\n}\n\n//Provides: bigstring_destroy_stub\nfunction bigstring_destroy_stub(_v) {\n  return 0; // noop\n}\n\n//Provides: bigstring_blit_bigstring_string_stub\n//Requires: caml_string_set, caml_ba_get_1\nfunction bigstring_blit_bigstring_string_stub(v_bstr, v_src_pos, v_str, v_dst_pos, v_len){\n  for (var i = 0; i < v_len; i++) caml_string_set(v_str,v_dst_pos + i,caml_ba_get_1(v_bstr,v_src_pos + i));\n  return 0;\n}\n\n//Provides: caml_blit_bigstring_to_string\n//Requires: bigstring_blit_bigstring_string_stub\nvar caml_blit_bigstring_to_string = bigstring_blit_bigstring_string_stub\n\n//Provides: bigstring_blit_string_bigstring_stub\n//Requires: caml_string_get, caml_ba_set_1\nfunction bigstring_blit_string_bigstring_stub(v_str, v_src_pos, v_bstr, v_dst_pos, v_len){\n  for (var i = 0; i < v_len; i++) caml_ba_set_1(v_bstr,v_dst_pos + i,caml_string_get(v_str,v_src_pos + i));\n  return 0;\n}\n\n//Provides: caml_blit_string_to_bigstring\n//Requires: bigstring_blit_string_bigstring_stub\nvar caml_blit_string_to_bigstring = bigstring_blit_string_bigstring_stub\n\n//Provides: bigstring_blit_stub\n//Requires: caml_ba_get_1, caml_ba_set_1\nfunction bigstring_blit_stub(s1, i1, s2, i2, len){\n  for (var i = 0; i < len; i++) caml_ba_set_1(s2,i2 + i,caml_ba_get_1(s1,i1 + i));\n  return 0;\n}\n\n//Provides: bigstring_memcmp_stub\n//Requires: caml_ba_get_1\nfunction bigstring_memcmp_stub(v_s1, v_s1_pos, v_s2, v_s2_pos, v_len){\n  for (var i = 0; i < v_len; i++) {\n    var a = caml_ba_get_1(v_s1,v_s1_pos + i);\n    var b = caml_ba_get_1(v_s2,v_s2_pos + i);\n    if (a < b) return -1;\n    if (a > b) return 1;\n  }\n  return 0;\n}\n\n\n//Provides: bigstring_to_array_buffer\nfunction bigstring_to_array_buffer(bs) {\n  return bs.data.buffer\n}\n\n//Provides: bigstring_of_array_buffer\n//Requires: caml_ba_create_from\nfunction bigstring_of_array_buffer(ab) {\n  var ta = new joo_global_object.Uint8Array(ab);\n  return caml_ba_create_from(ta, null, 0, 12, 0, [ta.length])\n}\n",
  "// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib\n\n//Provides: caml_js_pure_expr const\nfunction caml_js_pure_expr (f) { return f(); }\n\n//Provides: caml_js_set (mutable, const, const)\nfunction caml_js_set(o,f,v) { o[f]=v;return 0}\n//Provides: caml_js_get mutable (const, const)\nfunction caml_js_get(o,f) { return o[f]; }\n//Provides: caml_js_delete (mutable, const)\nfunction caml_js_delete(o,f) { delete o[f]; return 0}\n\n//Provides: caml_js_instanceof (const, const)\nfunction caml_js_instanceof(o,c) { return o instanceof c; }\n\n//Provides: caml_js_typeof (const)\nfunction caml_js_typeof(o) { return typeof o; }\n\n//Provides: caml_js_on_ie const\nfunction caml_js_on_ie () {\n  var ua =\n    joo_global_object.navigator?joo_global_object.navigator.userAgent:\"\";\n  return ua.indexOf(\"MSIE\") != -1 && ua.indexOf(\"Opera\") != 0;\n}\n\n//Provides: caml_js_html_escape const (const)\nvar caml_js_regexps = { amp:/&/g, lt:/</g, quot:/\\\"/g, all:/[&<\\\"]/ };\nfunction caml_js_html_escape (s) {\n  if (!caml_js_regexps.all.test(s)) return s;\n  return s.replace(caml_js_regexps.amp, \"&amp;\")\n          .replace(caml_js_regexps.lt, \"&lt;\")\n          .replace(caml_js_regexps.quot, \"&quot;\");\n}\n\n//Provides: caml_js_html_entities const (const)\nfunction caml_js_html_entities(s) {\n    var str, temp = document.createElement('p');\n    temp.innerHTML= s;\n    str= temp.textContent || temp.innerText;\n    temp=null;\n    return str;\n}\n\n/////////// Debugging console\n//Provides: caml_js_get_console const\nfunction caml_js_get_console () {\n  var c = joo_global_object.console?joo_global_object.console:{};\n  var m = [\"log\", \"debug\", \"info\", \"warn\", \"error\", \"assert\", \"dir\", \"dirxml\",\n           \"trace\", \"group\", \"groupCollapsed\", \"groupEnd\", \"time\", \"timeEnd\"];\n  function f () {}\n  for (var i = 0; i < m.length; i++) if (!c[m[i]]) c[m[i]]=f;\n  return c;\n}\n\n//Provides:caml_trampoline\nfunction caml_trampoline(res) {\n  var c = 1;\n  while(res && res.joo_tramp){\n    res = res.joo_tramp.apply(null, res.joo_args);\n    c++;\n  }\n  //if(c>10) joo_global_object.console.log(\"trampoline \", c, \"times\")\n  return res;\n}\n\n//Provides:caml_trampoline_return\nfunction caml_trampoline_return(f,args) {\n  return {joo_tramp:f,joo_args:args};\n}\n\n//Provides: js_print_stdout (const)\nfunction js_print_stdout(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stdout.write(s)\n  } else {\n  // Do not output the last \\n if present\n  // as console logging display a newline at the end\n  if(s.charCodeAt(s.length - 1) == 10)\n    s = s.substr(0,s.length - 1 );\n  var v = g.console;\n  v  && v.log && v.log(s);\n  }\n}\n//Provides: js_print_stderr (const)\nfunction js_print_stderr(s) {\n  var g = joo_global_object;\n  if (g.process && g.process.stdout && g.process.stdout.write) {\n    g.process.stderr.write(s)\n  } else {\n  // Do not output the last \\n if present\n  // as console logging display a newline at the end\n  if(s.charCodeAt(s.length - 1) == 10)\n    s = s.substr(0,s.length - 1 );\n  var v = g.console;\n  v && v.error && v.error(s);\n  }\n}\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Io\n\n//Provides: caml_sys_close\n//Requires: caml_global_data\nfunction caml_sys_close(fd) {\n  delete caml_global_data.fds[fd];\n  return 0;\n}\n\n//Provides: caml_sys_open\n//Requires: MlString, caml_raise_sys_error, caml_global_data,caml_sys_file_exists\n//Requires: caml_fs_register,caml_make_path,caml_fs_content\n//Requires: caml_raise_no_such_file,caml_sys_is_directory\n//Requires: caml_create_string,MlFile,caml_ml_string_length\nfunction caml_sys_open_internal(idx,file,flags) {\n  if(caml_global_data.fds === undefined) caml_global_data.fds = new Array();\n  flags=flags?flags:{};\n  var info = {};\n  info.file = file;\n  info.offset = flags.append?caml_ml_string_length(file.data):0;\n  info.flags = flags;\n  caml_global_data.fds[idx] = info;\n  caml_global_data.fd_last_idx = idx;\n  return idx;\n}\nfunction caml_sys_open (name, flags, _perms) {\n  var f = {};\n  while(flags){\n    switch(flags[1]){\n    case 0: f.rdonly = 1;break;\n    case 1: f.wronly = 1;break;\n    case 2: f.append = 1;break;\n    case 3: f.create = 1;break;\n    case 4: f.truncate = 1;break;\n    case 5: f.excl = 1; break;\n    case 6: f.binary = 1;break;\n    case 7: f.text = 1;break;\n    case 8: f.nonblock = 1;break;\n    }\n    flags=flags[2];\n  }\n  var name2 = name.toString();\n  var path = caml_make_path(name);\n  if(f.rdonly && f.wronly)\n    caml_raise_sys_error(name2 + \" : flags Open_rdonly and Open_wronly are not compatible\");\n  if(f.text && f.binary)\n    caml_raise_sys_error(name2 + \" : flags Open_text and Open_binary are not compatible\");\n  if (caml_sys_file_exists(name)) {\n    if (caml_sys_is_directory(name)) caml_raise_sys_error(name2 + \" : is a directory\");\n    if (f.create && f.excl) caml_raise_sys_error(name2 + \" : file already exists\");\n    var idx = caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;\n    var file = caml_fs_content(path);\n    if(f.truncate) file.truncate();\n    return caml_sys_open_internal (idx+1,file,f);\n  } else if (f.create) {\n    var idx = caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;\n    caml_fs_register(name,caml_create_string(0));\n    var file = caml_fs_content(path);\n    return caml_sys_open_internal (idx+1,file,f);\n  }\n  else caml_raise_no_such_file (name);\n}\ncaml_sys_open_internal(0,new MlFile(caml_create_string(0))); //stdin\ncaml_sys_open_internal(1,new MlFile(caml_create_string(0))); //stdout\ncaml_sys_open_internal(2,new MlFile(caml_create_string(0))); //stderr\n\n\n// ocaml Channels\n\n//Provides: caml_ml_set_channel_name\nfunction caml_ml_set_channel_name() {\n  return 0\n}\n\n//Provides: caml_ml_out_channels\nvar caml_ml_out_channels = new Array();\n\n//Provides: caml_ml_out_channels_list\n//Requires: caml_ml_out_channels\nfunction caml_ml_out_channels_list () {\n  var l = 0;\n  for(var c in caml_ml_out_channels){\n    if(caml_ml_out_channels[c].opened)\n      l=[0,caml_ml_out_channels[c],l];\n  }\n  return l;\n}\n\n\n//Provides: caml_ml_open_descriptor_out\n//Requires: js_print_stderr, js_print_stdout, caml_ml_out_channels, caml_global_data,caml_sys_open\n//Requires: caml_raise_sys_error,caml_new_string\n//Requires: caml_create_string, caml_blit_string,caml_ml_string_length\nfunction caml_std_output(chan,s){\n  var str = caml_new_string(s);\n  var slen = caml_ml_string_length(str);\n  var clen = caml_ml_string_length(chan.file.data);\n  var offset = chan.offset;\n  if(offset + slen >= clen) {\n    var new_str = caml_create_string (offset + slen);\n    caml_blit_string(chan.file.data, 0, new_str, 0, clen);\n    caml_blit_string(str, 0, new_str, offset, slen);\n    chan.file.data = new_str;\n  }\n  chan.offset += slen;\n  chan.file.modified();\n  return 0;\n}\n\nfunction caml_ml_open_descriptor_out (fd) {\n  var output;\n  switch(fd){\n    case 1: output=js_print_stdout;break;\n    case 2: output=js_print_stderr;break;\n    default: output=caml_std_output;\n  }\n  var data = caml_global_data.fds[fd];\n  if(data.flags.rdonly) caml_raise_sys_error(\"fd \"+ fd + \" is readonly\");\n  var channel = {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n\n    buffer:\"\",\n    output : output\n  };\n  caml_ml_out_channels[channel.fd]=channel;\n  return channel;\n}\n\n//Provides: caml_ml_open_descriptor_in\n//Requires: caml_global_data,caml_sys_open,caml_raise_sys_error\nfunction caml_ml_open_descriptor_in (fd)  {\n  var data = caml_global_data.fds[fd];\n  if(data.flags.wronly) caml_raise_sys_error(\"fd \"+ fd + \" is writeonly\");\n\n  return {\n    file:data.file,\n    offset:data.offset,\n    fd:fd,\n    opened:true,\n    refill:null\n  };\n}\n\n\n//Provides: caml_ml_set_binary_mode\n//Requires: caml_global_data\nfunction caml_ml_set_binary_mode(chan,mode){\n  var data = caml_global_data.fds[chan.fd];\n  data.flags.text = !mode\n  data.flags.binary = mode\n  return 0;\n}\n\n//Input from in_channel\n\n//Provides: caml_ml_close_channel\n//Requires: caml_ml_flush, caml_ml_out_channels\n//Requires: caml_sys_close\nfunction caml_ml_close_channel (channel) {\n    caml_ml_flush(channel);\n    channel.opened = false;\n    delete caml_ml_out_channels[channel.fd];\n    caml_sys_close(channel.fd)\n    return 0;\n}\n\n//Provides: caml_ml_channel_size\n//Requires: caml_ml_string_length\nfunction caml_ml_channel_size(chan) {\n  return caml_ml_string_length(chan.file.data);\n}\n\n//Provides: caml_ml_channel_size_64\n//Requires: caml_ml_channel_size,caml_int64_of_float,caml_ml_string_length\nfunction caml_ml_channel_size_64(chan) {\n  return caml_int64_of_float(caml_ml_string_length(chan.file.data));\n}\n\n//Provides: caml_ml_set_channel_output\nfunction caml_ml_set_channel_output(chan,f) {\n  chan.output = f;\n  return 0;\n}\n\n//Provides: caml_ml_set_channel_refill\nfunction caml_ml_set_channel_refill(chan,f) {\n  chan.refill = f;\n  return 0;\n}\n\n//Provides: caml_ml_refill_input\n//Requires: caml_ml_string_length, caml_create_string, caml_blit_string\nfunction caml_ml_refill_input (chan) {\n  var str = chan.refill();\n  var str_len = caml_ml_string_length(str);\n  if (str_len == 0) chan.refill = null;\n  var old_len = caml_ml_string_length(chan.file.data) - chan.offset;\n  if (old_len == 0) {\n    chan.file.data = str;\n  } else {\n    var new_data = caml_create_string(old_len + str_len);\n    caml_blit_string(chan.file.data, chan.offset, new_data, 0, old_len);\n    caml_blit_string(str, 0, new_data, old_len, str_len);\n    chan.file.data = new_data;\n  }\n  chan.offset = 0;\n  return str_len;\n}\n\n//Provides: caml_ml_may_refill_input\n//Requires: caml_ml_string_length, caml_ml_refill_input\nfunction caml_ml_may_refill_input (chan) {\n  if (chan.refill == null) return;\n  if (caml_ml_string_length(chan.file.data) != chan.offset) return;\n  caml_ml_refill_input (chan);\n}\n\n//Provides: caml_ml_input\n//Requires: caml_blit_string, caml_string_of_array, caml_ml_string_length\n//Requires: caml_ml_refill_input\nfunction caml_ml_input (chan, s, i, l) {\n  var l2 = caml_ml_string_length(chan.file.data) - chan.offset;\n  if (l2 == 0 && chan.refill != null) l2 = caml_ml_refill_input(chan);\n  if (l2 < l) l = l2;\n  caml_blit_string(chan.file.data, chan.offset, s, i, l);\n  chan.offset += l;\n  return l;\n}\n\n//Provides: caml_fs_file_content\n//Requires: caml_string_of_array, caml_fs_content, caml_make_path, MlFile\n//Requires: caml_raise_not_found, unix_time\nfunction caml_fs_file_content(name) {\n  var path = caml_make_path(name);\n  var f = caml_fs_content(path);\n  if(f instanceof MlFile){\n    var now = unix_time();\n    f.atime = now;\n    return f.data;\n  }\n  caml_raise_not_found();\n}\n\n//Provides: caml_input_value\n//Requires: caml_marshal_data_size, caml_input_value_from_string, caml_string_of_array\nfunction caml_input_value (chan) {\n  var str = chan.file.data;\n  var offset = [chan.offset];\n  var _len = caml_marshal_data_size (str, offset[0]);\n  var res = caml_input_value_from_string(str, offset);\n  chan.offset = offset[0];\n  return res;\n}\n\n//Provides: caml_ml_input_char\n//Requires: caml_raise_end_of_file, caml_array_bound_error\n//Requires: caml_ml_string_length, caml_string_get, caml_ml_may_refill_input\nfunction caml_ml_input_char (chan) {\n  caml_ml_may_refill_input(chan);\n  if (chan.offset >= caml_ml_string_length(chan.file.data))\n    caml_raise_end_of_file();\n  var c = caml_string_get(chan.file.data, chan.offset);\n  chan.offset++;\n  return c;\n}\n\n//Provides: caml_ml_input_int\n//Requires: caml_raise_end_of_file\n//Requires: caml_ml_string_length, caml_string_unsafe_get, caml_ml_refill_input\nfunction caml_ml_input_int (chan) {\n  var s = chan.file.data, o = chan.offset;\n  while ((o + 3) >= caml_ml_string_length(s)) {\n    var l = caml_ml_refill_input(chan);\n    if (l == 0) caml_raise_end_of_file();\n    s = chan.file.data;\n    o = chan.offset;\n  }\n  var r = (caml_string_unsafe_get(s,o) << 24) | (caml_string_unsafe_get(s,o+1) << 16) | (caml_string_unsafe_get(s,o+2) << 8) | (caml_string_unsafe_get(s,o+3));\n  chan.offset+=4;\n  return r;\n}\n\n//Provides: caml_ml_seek_in\n//Requires: caml_raise_sys_error\nfunction caml_ml_seek_in(chan,pos){\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_in_64\n//Requires: caml_int64_to_float, caml_raise_sys_error\nfunction caml_ml_seek_in_64(chan,pos){\n  if (chan.refill != null) caml_raise_sys_error(\"Illegal seek\");\n  chan.offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_in\nfunction caml_ml_pos_in(chan) {return chan.offset}\n\n//Provides: caml_ml_pos_in_64\n//Requires: caml_int64_of_float\nfunction caml_ml_pos_in_64(chan) {return caml_int64_of_float(chan.offset)}\n\n//Provides: caml_ml_input_scan_line\n//Requires: caml_array_bound_error, caml_ml_string_length, caml_string_get\n//Requires: caml_ml_may_refill_input\nfunction caml_ml_input_scan_line(chan){\n  caml_ml_may_refill_input(chan);\n  var p = chan.offset;\n  var s = chan.file.data;\n  var len = caml_ml_string_length(s);\n  if(p >= len) { return 0;}\n  while(true) {\n    if(p >= len) return - (p - chan.offset);\n    if(caml_string_get(s, p) == 10) return p - chan.offset + 1;\n    p++;\n  }\n}\n\n//Provides: caml_ml_flush\n//Requires: caml_raise_sys_error\nfunction caml_ml_flush (oc) {\n    if(! oc.opened) caml_raise_sys_error(\"Cannot flush a closed channel\");\n    if(oc.buffer == \"\") return 0;\n    if(oc.output) {\n      switch(oc.output.length){\n      case 2: oc.output(oc,oc.buffer);break;\n      default: oc.output(oc.buffer)\n      };\n    }\n    oc.buffer = \"\";\n    return 0;\n}\n\n//output to out_channel\n\n//Provides: caml_ml_output\n//Requires: caml_ml_flush,caml_ml_string_length\n//Requires: caml_create_string, caml_blit_string, caml_raise_sys_error\nfunction caml_ml_output (oc,buffer,offset,len) {\n    if(! oc.opened) caml_raise_sys_error(\"Cannot output to a closed channel\");\n    var string;\n    if(offset == 0 && caml_ml_string_length(buffer) == len)\n        string = buffer;\n    else {\n        string = caml_create_string(len);\n        caml_blit_string(buffer,offset,string,0,len);\n    }\n    var jsstring = string.toString();\n    var id = jsstring.lastIndexOf(\"\\n\");\n    if(id < 0)\n        oc.buffer+=jsstring;\n    else {\n        oc.buffer+=jsstring.substr(0,id+1);\n        caml_ml_flush (oc);\n        oc.buffer += jsstring.substr(id+1);\n    }\n    return 0;\n}\n//Provides: caml_ml_output_char\n//Requires: caml_ml_output\n//Requires: caml_new_string\nfunction caml_ml_output_char (oc,c) {\n    var s = caml_new_string(String.fromCharCode(c));\n    caml_ml_output(oc,s,0,1);\n    return 0;\n}\n\n//Provides: caml_output_value\n//Requires: caml_output_value_to_string, caml_ml_output,caml_ml_string_length\nfunction caml_output_value (chan,v,_flags) {\n  var s = caml_output_value_to_string(v);\n  caml_ml_output(chan,s,0,caml_ml_string_length(s));\n  return 0;\n}\n\n\n//Provides: caml_ml_seek_out\nfunction caml_ml_seek_out(chan,pos){\n  chan.offset = pos;\n  return 0;\n}\n\n//Provides: caml_ml_seek_out_64\n//Requires: caml_int64_to_float\nfunction caml_ml_seek_out_64(chan,pos){\n  chan.offset = caml_int64_to_float(pos);\n  return 0;\n}\n\n//Provides: caml_ml_pos_out\nfunction caml_ml_pos_out(chan) {return chan.offset}\n\n//Provides: caml_ml_pos_out_64\n//Requires: caml_int64_of_float\nfunction caml_ml_pos_out_64(chan) {\n  return caml_int64_of_float (chan.offset);\n}\n\n//Provides: caml_ml_output_int\n//Requires: caml_ml_output\n//Requires: caml_string_of_array\nfunction caml_ml_output_int (oc,i) {\n  var arr = [(i>>24) & 0xFF,(i>>16) & 0xFF,(i>>8) & 0xFF,i & 0xFF ];\n  var s = caml_string_of_array(arr);\n  caml_ml_output(oc,s,0,4);\n  return 0\n}\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_marshal_constants\nvar caml_marshal_constants = {\n  PREFIX_SMALL_BLOCK:         0x80,\n  PREFIX_SMALL_INT:           0x40,\n  PREFIX_SMALL_STRING:        0x20,\n  CODE_INT8:                  0x00,\n  CODE_INT16:                 0x01,\n  CODE_INT32:                 0x02,\n  CODE_INT64:                 0x03,\n  CODE_SHARED8:               0x04,\n  CODE_SHARED16:              0x05,\n  CODE_SHARED32:              0x06,\n  CODE_BLOCK32:               0x08,\n  CODE_BLOCK64:               0x13,\n  CODE_STRING8:               0x09,\n  CODE_STRING32:              0x0A,\n  CODE_DOUBLE_BIG:            0x0B,\n  CODE_DOUBLE_LITTLE:         0x0C,\n  CODE_DOUBLE_ARRAY8_BIG:     0x0D,\n  CODE_DOUBLE_ARRAY8_LITTLE:  0x0E,\n  CODE_DOUBLE_ARRAY32_BIG:    0x0F,\n  CODE_DOUBLE_ARRAY32_LITTLE: 0x07,\n  CODE_CODEPOINTER:           0x10,\n  CODE_INFIXPOINTER:          0x11,\n  CODE_CUSTOM:                0x12\n}\n\n\n//Provides: MlStringReader\n//Requires: caml_new_string, caml_bytes_of_string\nfunction MlStringReader (s, i) { this.s = caml_bytes_of_string(s); this.i = i; }\nMlStringReader.prototype = {\n  read8u:function () { return this.s.charCodeAt(this.i++); },\n  read8s:function () { return this.s.charCodeAt(this.i++) << 24 >> 24; },\n  read16u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 8) | s.charCodeAt(i + 1)\n  },\n  read16s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 2;\n    return (s.charCodeAt(i) << 24 >> 16) | s.charCodeAt(i + 1);\n  },\n  read32u:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return ((s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n            (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3)) >>> 0;\n  },\n  read32s:function () {\n    var s = this.s, i = this.i;\n    this.i = i + 4;\n    return (s.charCodeAt(i) << 24) | (s.charCodeAt(i+1) << 16) |\n      (s.charCodeAt(i+2) << 8) | s.charCodeAt(i+3);\n  },\n  readstr:function (len) {\n    var i = this.i;\n    this.i = i + len;\n    return caml_new_string(this.s.substring(i, i + len));\n  }\n}\n\n//Provides: caml_float_of_bytes\n//Requires: caml_int64_float_of_bits, caml_int64_of_bytes\nfunction caml_float_of_bytes (a) {\n  return caml_int64_float_of_bits (caml_int64_of_bytes (a));\n}\n\n//Provides: caml_input_value_from_string mutable\n//Requires: caml_failwith\n//Requires: caml_float_of_bytes, caml_int64_of_bytes\n//Requires: MlStringReader\nfunction caml_input_value_from_string(s, ofs) {\n  var reader = new MlStringReader (s, typeof ofs==\"number\"?ofs:ofs[0]);\n  var _magic = reader.read32u ();\n  var _block_len = reader.read32u ();\n  var num_objects = reader.read32u ();\n  var _size_32 = reader.read32u ();\n  var _size_64 = reader.read32u ();\n  var stack = [];\n  var intern_obj_table = (num_objects > 0)?[]:null;\n  var obj_counter = 0;\n  function intern_rec () {\n    var code = reader.read8u ();\n    if (code >= 0x40 /*cst.PREFIX_SMALL_INT*/) {\n      if (code >= 0x80 /*cst.PREFIX_SMALL_BLOCK*/) {\n        var tag = code & 0xF;\n        var size = (code >> 4) & 0x7;\n        var v = [tag];\n        if (size == 0) return v;\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        stack.push(v, size);\n        return v;\n      } else\n        return (code & 0x3F);\n    } else {\n      if (code >= 0x20/*cst.PREFIX_SMALL_STRING */) {\n        var len = code & 0x1F;\n        var v = reader.readstr (len);\n        if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n        return v;\n      } else {\n        switch(code) {\n        case 0x00: //cst.CODE_INT8:\n          return reader.read8s ();\n        case 0x01: //cst.CODE_INT16:\n          return reader.read16s ();\n        case 0x02: //cst.CODE_INT32:\n          return reader.read32s ();\n        case 0x03: //cst.CODE_INT64:\n          caml_failwith(\"input_value: integer too large\");\n          break;\n        case 0x04: //cst.CODE_SHARED8:\n          var ofs = reader.read8u ();\n          return intern_obj_table[obj_counter - ofs];\n        case 0x05: //cst.CODE_SHARED16:\n          var ofs = reader.read16u ();\n          return intern_obj_table[obj_counter - ofs];\n        case 0x06: //cst.CODE_SHARED32:\n          var ofs = reader.read32u ();\n          return intern_obj_table[obj_counter - ofs];\n        case 0x08: //cst.CODE_BLOCK32:\n          var header = reader.read32u ();\n          var tag = header & 0xFF;\n          var size = header >> 10;\n          var v = [tag];\n          if (size == 0) return v;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          stack.push(v, size);\n          return v;\n        case 0x13: //cst.CODE_BLOCK64:\n          caml_failwith (\"input_value: data block too large\");\n          break;\n        case 0x09: //cst.CODE_STRING8:\n          var len = reader.read8u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0A: //cst.CODE_STRING32:\n          var len = reader.read32u();\n          var v = reader.readstr (len);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0C: //cst.CODE_DOUBLE_LITTLE:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[7 - i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0B: //cst.CODE_DOUBLE_BIG:\n          var t = new Array(8);;\n          for (var i = 0;i < 8;i++) t[i] = reader.read8u ();\n          var v = caml_float_of_bytes (t);\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          return v;\n        case 0x0E: //cst.CODE_DOUBLE_ARRAY8_LITTLE:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0D: //cst.CODE_DOUBLE_ARRAY8_BIG:\n          var len = reader.read8u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x07: //cst.CODE_DOUBLE_ARRAY32_LITTLE:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[7 - j] = reader.read8u();\n            v[i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x0F: //cst.CODE_DOUBLE_ARRAY32_BIG:\n          var len = reader.read32u();\n          var v = new Array(len+1);\n          v[0] = 254;\n          var t = new Array(8);;\n          for (var i = 1;i <= len;i++) {\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            v [i] = caml_float_of_bytes (t);\n          }\n          return v;\n        case 0x10: //cst.CODE_CODEPOINTER:\n        case 0x11: //cst.CODE_INFIXPOINTER:\n          caml_failwith (\"input_value: code pointer\");\n          break;\n        case 0x12: //cst.CODE_CUSTOM:\n          var c, s = \"\";\n          while ((c = reader.read8u ()) != 0) s += String.fromCharCode (c);\n          switch(s) {\n          case \"_j\":\n            // Int64\n            var t = new Array(8);;\n            for (var j = 0;j < 8;j++) t[j] = reader.read8u();\n            var v = caml_int64_of_bytes (t);\n            if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n            return v;\n          case \"_i\":\n            // Int32\n            var v = reader.read32s ();\n            if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n            return v;\n          case \"_n\":\n            // Nativeint\n            switch (reader.read8u ()) {\n            case 1:\n              var v = reader.read32s ();\n              if (intern_obj_table) intern_obj_table[obj_counter++] = v;\n              return v;\n            case 2:\n              caml_failwith(\"input_value: native integer value too large\");\n            default:\n              caml_failwith(\"input_value: ill-formed native integer\");\n            }\n          default:\n            caml_failwith(\"input_value: unknown custom block identifier\");\n          }\n        default:\n          caml_failwith (\"input_value: ill-formed message\");\n        }\n      }\n    }\n  }\n  var res = intern_rec ();\n  while (stack.length > 0) {\n    var size = stack.pop();\n    var v = stack.pop();\n    var d = v.length;\n    if (d < size) stack.push(v, size);\n    v[d] = intern_rec ();\n  }\n  if (typeof ofs!=\"number\") ofs[0] = reader.i;\n  return res;\n}\n\n//Provides: caml_marshal_data_size mutable\n//Requires: caml_failwith, caml_string_unsafe_get\nfunction caml_marshal_data_size (s, ofs) {\n  function get32(s,i) {\n    return (caml_string_unsafe_get(s, i) << 24) |\n           (caml_string_unsafe_get(s, i + 1) << 16) |\n           (caml_string_unsafe_get(s, i + 2) << 8) |\n            caml_string_unsafe_get(s, i + 3);\n  }\n  if (get32(s, ofs) != (0x8495A6BE|0))\n    caml_failwith(\"Marshal.data_size: bad object\");\n  return (get32(s, ofs + 4));\n}\n\n//Provides: caml_output_val\n//Requires: caml_int64_to_bytes, caml_failwith\n//Requires: caml_int64_bits_of_float\n//Requires: MlString, caml_ml_string_length, caml_string_unsafe_get\nvar caml_output_val = function (){\n  function Writer () { this.chunk = []; }\n  Writer.prototype = {\n    chunk_idx:20, block_len:0, obj_counter:0, size_32:0, size_64:0,\n    write:function (size, value) {\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    write_code:function (size, code, value) {\n      this.chunk[this.chunk_idx++] = code;\n      for (var i = size - 8;i >= 0;i -= 8)\n        this.chunk[this.chunk_idx++] = (value >> i) & 0xFF;\n    },\n    finalize:function () {\n      this.block_len = this.chunk_idx - 20;\n      this.chunk_idx = 0;\n      this.write (32, 0x8495A6BE);\n      this.write (32, this.block_len);\n      this.write (32, this.obj_counter);\n      this.write (32, this.size_32);\n      this.write (32, this.size_64);\n      return this.chunk;\n    }\n  }\n  return function (v) {\n    var writer = new Writer ();\n    var stack = [];\n    function extern_rec (v) {\n      if (v instanceof Array && v[0] === (v[0]|0)) {\n        if (v[0] == 255) {\n          // Int64\n          writer.write (8, 0x12 /*cst.CODE_CUSTOM*/);\n          for (var i = 0; i < 3; i++) writer.write (8, \"_j\\0\".charCodeAt(i));\n          var b = caml_int64_to_bytes (v);\n          for (var i = 0; i < 8; i++) writer.write (8, b[i]);\n          writer.size_32 += 4;\n          writer.size_64 += 3;\n          return;\n        }\n        if (v[0] == 251) {\n          caml_failwith(\"output_value: abstract value (Abstract)\");\n        }\n        if (v[0] < 16 && v.length - 1 < 8)\n          writer.write (8, 0x80 /*cst.PREFIX_SMALL_BLOCK*/ + v[0] + ((v.length - 1)<<4));\n        else\n          writer.write_code(32, 0x08 /*cst.CODE_BLOCK32*/, ((v.length-1) << 10) | v[0]);\n        writer.size_32 += v.length;\n        writer.size_64 += v.length;\n        if (v.length > 1) stack.push (v, 1);\n      } else if (v instanceof MlString) {\n        var len = caml_ml_string_length(v);\n        if (len < 0x20)\n          writer.write (8, 0x20 /*cst.PREFIX_SMALL_STRING*/ + len);\n        else if (len < 0x100)\n          writer.write_code (8, 0x09/*cst.CODE_STRING8*/, len);\n        else\n          writer.write_code (32, 0x0A /*cst.CODE_STRING32*/, len);\n        for (var i = 0;i < len;i++)\n          writer.write (8, caml_string_unsafe_get(v,i));\n        writer.size_32 += 1 + (((len + 4) / 4)|0);\n        writer.size_64 += 1 + (((len + 8) / 8)|0);\n      } else {\n        if (v != (v|0)){\n          var type_of_v = typeof v;\n//\n// If a float happens to be an integer it is serialized as an integer\n// (Js_of_ocaml cannot tell whether the type of an integer number is\n// float or integer.) This can result in unexpected crashes when\n// unmarshalling using the standard runtime. It seems better to\n// systematically fail on marshalling.\n//\n//          if(type_of_v != \"number\")\n          caml_failwith(\"output_value: abstract value (\"+type_of_v+\")\");\n//          var t = caml_int64_to_bytes(caml_int64_bits_of_float(v));\n//          writer.write (8, 0x0B /*cst.CODE_DOUBLE_BIG*/);\n//          for(var i = 0; i<8; i++){writer.write(8,t[i])}\n        }\n        else if (v >= 0 && v < 0x40) {\n          writer.write (8, 0X40 /*cst.PREFIX_SMALL_INT*/ + v);\n        } else {\n          if (v >= -(1 << 7) && v < (1 << 7))\n            writer.write_code(8, 0x00 /*cst.CODE_INT8*/, v);\n          else if (v >= -(1 << 15) && v < (1 << 15))\n            writer.write_code(16, 0x01 /*cst.CODE_INT16*/, v);\n          else\n            writer.write_code(32, 0x02 /*cst.CODE_INT32*/, v);\n        }\n      }\n    }\n    extern_rec (v);\n    while (stack.length > 0) {\n      var i = stack.pop ();\n      var v = stack.pop ();\n      if (i + 1 < v.length) stack.push (v, i + 1);\n      extern_rec (v[i]);\n    }\n    writer.finalize ();\n    return writer.chunk;\n  }\n} ();\n\n//Provides: caml_output_value_to_string mutable\n//Requires: caml_output_val, caml_string_of_array\nfunction caml_output_value_to_string (v, _fl) {\n  /* ignores flags... */\n  return caml_string_of_array (caml_output_val (v));\n}\n\n//Provides: caml_output_value_to_buffer\n//Requires: caml_output_val, caml_failwith, caml_blit_string\nfunction caml_output_value_to_buffer (s, ofs, len, v, _fl) {\n  /* ignores flags... */\n  var t = caml_output_val (v);\n  if (t.length > len) caml_failwith (\"Marshal.to_buffer: buffer overflow\");\n  caml_blit_string(t, 0, s, ofs, t.length);\n  return 0;\n}\n",
  "// Js_of_ocaml library\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n///////////// Jslib: code specific to Js_of_ocaml\n\n//Provides: caml_js_from_bool const (const)\nfunction caml_js_from_bool(x) { return !!x; }\n//Provides: caml_js_to_bool const (const)\nfunction caml_js_to_bool(x) { return +x; }\n//Provides: caml_js_from_float const (const)\nfunction caml_js_from_float(x) { return x; }\n//Provides: caml_js_to_float const (const)\nfunction caml_js_to_float(x) { return x; }\n//Provides: caml_js_from_string mutable (const)\n//Requires: MlString\nfunction caml_js_from_string(s) { return s.toString(); }\n//Provides: caml_js_from_array mutable (shallow)\n//Requires: raw_array_sub\nfunction caml_js_from_array(a) { return raw_array_sub(a,1,a.length-1); }\n//Provides: caml_js_to_array mutable (shallow)\n//Requires: raw_array_cons\nfunction caml_js_to_array(a) { return raw_array_cons(a,0); }\n\n//Provides: caml_js_var mutable (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_js_var(x) {\n  var x = x.toString();\n  //Checks that x has the form ident[.ident]*\n  if(!x.match(/^[a-zA-Z_$][a-zA-Z_$0-9]*(\\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/)){\n    js_print_stderr(\"caml_js_var: \\\"\" + x + \"\\\" is not a valid JavaScript variable. continuing ..\");\n    //joo_global_object.console.error(\"Js.Unsafe.eval_string\")\n  }\n  return eval(x);\n}\n//Provides: caml_js_call (const, mutable, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_call(f, o, args) { return f.apply(o, caml_js_from_array(args)); }\n//Provides: caml_js_fun_call (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_fun_call(f, args) { return f.apply(null, caml_js_from_array(args)); }\n//Provides: caml_js_meth_call (mutable, const, shallow)\n//Requires: MlString\n//Requires: caml_js_from_array\nfunction caml_js_meth_call(o, f, args) {\n  return o[f.toString()].apply(o, caml_js_from_array(args));\n}\n//Provides: caml_js_new (const, shallow)\n//Requires: caml_js_from_array\nfunction caml_js_new(c, a) {\n  switch (a.length) {\n  case 1: return new c;\n  case 2: return new c (a[1]);\n  case 3: return new c (a[1],a[2]);\n  case 4: return new c (a[1],a[2],a[3]);\n  case 5: return new c (a[1],a[2],a[3],a[4]);\n  case 6: return new c (a[1],a[2],a[3],a[4],a[5]);\n  case 7: return new c (a[1],a[2],a[3],a[4],a[5],a[6]);\n  case 8: return new c (a[1],a[2],a[3],a[4],a[5],a[6], a[7]);\n  }\n  function F() { return c.apply(this, caml_js_from_array(a)); }\n  F.prototype = c.prototype;\n  return new F;\n}\n//Provides: caml_js_wrap_callback const (const)\n//Requires: caml_call_gen,raw_array_copy\nfunction caml_js_wrap_callback(f) {\n  return function () {\n    if(arguments.length > 0){\n      return caml_call_gen(f, raw_array_copy(arguments));\n    } else {\n      return caml_call_gen(f, [undefined]);\n    }\n  }\n}\n//Provides: caml_js_wrap_meth_callback const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback(f) {\n  return function () {\n    return caml_call_gen(f,raw_array_cons(arguments,this));\n  }\n}\n//Provides: caml_js_wrap_meth_callback_unsafe const (const)\n//Requires: caml_call_gen,raw_array_cons\nfunction caml_js_wrap_meth_callback_unsafe(f) {\n  return function () { f.apply(null, raw_array_cons(arguments,this)); }\n}\n//Provides: caml_js_equals mutable (const, const)\nfunction caml_js_equals (x, y) { return +(x == y); }\n//Provides: caml_js_to_byte_string const\n//Requires: caml_new_string\nfunction caml_js_to_byte_string (s) {return caml_new_string (s);}\n\n//Provides: caml_js_eval_string (const)\n//Requires: MlString\nfunction caml_js_eval_string (s) {return eval(s.toString());}\n\n//Provides: caml_js_expr (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_js_expr(s) {\n  js_print_stderr(\"caml_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_pure_js_expr const (const)\n//Requires: js_print_stderr\n//Requires: MlString\nfunction caml_pure_js_expr (s){\n  js_print_stderr(\"caml_pure_js_expr: fallback to runtime evaluation\");\n  return eval(s.toString());}\n\n//Provides: caml_js_object (object_literal)\n//Requires: MlString\nfunction caml_js_object (a) {\n  var o = {};\n  for (var i = 1; i < a.length; i++) {\n    var p = a[i];\n    o[p[1].toString()] = p[2];\n  }\n  return o;\n}\n",
  "\n\n//Provides: caml_gc_minor\nfunction caml_gc_minor(){ return 0}\n//Provides: caml_gc_major\nfunction caml_gc_major(){ return 0}\n//Provides: caml_gc_full_major\nfunction caml_gc_full_major(){ return 0}\n//Provides: caml_gc_compaction\nfunction caml_gc_compaction(){ return 0}\n//Provides: caml_gc_counters\nfunction caml_gc_counters() { return [254,0,0,0] }\n//Provides: caml_gc_quick_stat\nfunction caml_gc_quick_stat(){\n  return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n}\n//Provides: caml_gc_stat\nfunction caml_gc_stat() {\n  return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0]\n}\n",
  "/***********************************************************************/\n/*                                                                     */\n/*                           Objective Caml                            */\n/*                                                                     */\n/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */\n/*                                                                     */\n/*  Copyright 1996 Institut National de Recherche en Informatique et   */\n/*  en Automatique.  All rights reserved.  This file is distributed    */\n/*  under the terms of the GNU Library General Public License, with    */\n/*  the special exception on linking described in file ../LICENSE.     */\n/*                                                                     */\n/***********************************************************************/\n\n/* $Id: parsing.c 8983 2008-08-06 09:38:25Z xleroy $ */\n\n/* The PDA automaton for parsers generated by camlyacc */\n\n/* The pushdown automata */\n\n//Provides: caml_parse_engine\n//Requires: caml_lex_array\nfunction caml_parse_engine(tables, env, cmd, arg)\n{\n  var ERRCODE = 256;\n\n  //var START = 0;\n  //var TOKEN_READ = 1;\n  //var STACKS_GROWN_1 = 2;\n  //var STACKS_GROWN_2 = 3;\n  //var SEMANTIC_ACTION_COMPUTED = 4;\n  //var ERROR_DETECTED = 5;\n  var loop = 6;\n  var testshift = 7;\n  var shift = 8;\n  var shift_recover = 9;\n  var reduce = 10;\n\n  var READ_TOKEN = 0;\n  var RAISE_PARSE_ERROR = 1;\n  var GROW_STACKS_1 = 2;\n  var GROW_STACKS_2 = 3;\n  var COMPUTE_SEMANTIC_ACTION = 4;\n  var CALL_ERROR_FUNCTION = 5;\n\n  var env_s_stack = 1;\n  var env_v_stack = 2;\n  var env_symb_start_stack = 3;\n  var env_symb_end_stack = 4;\n  var env_stacksize = 5;\n  var env_stackbase = 6;\n  var env_curr_char = 7;\n  var env_lval = 8;\n  var env_symb_start = 9;\n  var env_symb_end = 10;\n  var env_asp = 11;\n  var env_rule_len = 12;\n  var env_rule_number = 13;\n  var env_sp = 14;\n  var env_state = 15;\n  var env_errflag = 16;\n\n  // var _tbl_actions = 1;\n  var tbl_transl_const = 2;\n  var tbl_transl_block = 3;\n  var tbl_lhs = 4;\n  var tbl_len = 5;\n  var tbl_defred = 6;\n  var tbl_dgoto = 7;\n  var tbl_sindex = 8;\n  var tbl_rindex = 9;\n  var tbl_gindex = 10;\n  var tbl_tablesize = 11;\n  var tbl_table = 12;\n  var tbl_check = 13;\n  // var _tbl_error_function = 14;\n  // var _tbl_names_const = 15;\n  // var _tbl_names_block = 16;\n\n  if (!tables.dgoto) {\n    tables.defred = caml_lex_array (tables[tbl_defred]);\n    tables.sindex = caml_lex_array (tables[tbl_sindex]);\n    tables.check  = caml_lex_array (tables[tbl_check]);\n    tables.rindex = caml_lex_array (tables[tbl_rindex]);\n    tables.table  = caml_lex_array (tables[tbl_table]);\n    tables.len    = caml_lex_array (tables[tbl_len]);\n    tables.lhs    = caml_lex_array (tables[tbl_lhs]);\n    tables.gindex = caml_lex_array (tables[tbl_gindex]);\n    tables.dgoto  = caml_lex_array (tables[tbl_dgoto]);\n  }\n\n  var res = 0, n, n1, n2, state1;\n\n  // RESTORE\n  var sp = env[env_sp];\n  var state = env[env_state];\n  var errflag = env[env_errflag];\n\n  exit:for (;;) {\n    switch(cmd) {\n    case 0://START:\n      state = 0;\n      errflag = 0;\n      // Fall through\n\n    case 6://loop:\n      n = tables.defred[state];\n      if (n != 0) { cmd = reduce; break; }\n      if (env[env_curr_char] >= 0) { cmd = testshift; break; }\n      res = READ_TOKEN;\n      break exit;\n                                  /* The ML code calls the lexer and updates */\n                                  /* symb_start and symb_end */\n    case 1://TOKEN_READ:\n      if (arg instanceof Array) {\n        env[env_curr_char] = tables[tbl_transl_block][arg[0] + 1];\n        env[env_lval] = arg[1];\n      } else {\n        env[env_curr_char] = tables[tbl_transl_const][arg + 1];\n        env[env_lval] = 0;\n      }\n      // Fall through\n\n    case 7://testshift:\n      n1 = tables.sindex[state];\n      n2 = n1 + env[env_curr_char];\n      if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n          tables.check[n2] == env[env_curr_char]) {\n        cmd = shift; break;\n      }\n      n1 = tables.rindex[state];\n      n2 = n1 + env[env_curr_char];\n      if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n          tables.check[n2] == env[env_curr_char]) {\n        n = tables.table[n2];\n        cmd = reduce; break;\n      }\n      if (errflag <= 0) {\n        res = CALL_ERROR_FUNCTION;\n        break exit;\n      }\n      // Fall through\n                                  /* The ML code calls the error function */\n    case 5://ERROR_DETECTED:\n      if (errflag < 3) {\n        errflag = 3;\n        for (;;) {\n          state1 = env[env_s_stack][sp + 1];\n          n1 = tables.sindex[state1];\n          n2 = n1 + ERRCODE;\n          if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n              tables.check[n2] == ERRCODE) {\n            cmd = shift_recover; break;\n          } else {\n            if (sp <= env[env_stackbase]) return RAISE_PARSE_ERROR;\n                                    /* The ML code raises Parse_error */\n            sp--;\n          }\n        }\n      } else {\n        if (env[env_curr_char] == 0) return RAISE_PARSE_ERROR;\n                                    /* The ML code raises Parse_error */\n        env[env_curr_char] = -1;\n        cmd = loop; break;\n      }\n      // Fall through\n    case 8://shift:\n      env[env_curr_char] = -1;\n      if (errflag > 0) errflag--;\n      // Fall through\n    case 9://shift_recover:\n      state = tables.table[n2];\n      sp++;\n      if (sp >= env[env_stacksize]) {\n        res = GROW_STACKS_1;\n        break exit;\n      }\n      // Fall through\n                                   /* The ML code resizes the stacks */\n    case 2://STACKS_GROWN_1:\n      env[env_s_stack][sp + 1] = state;\n      env[env_v_stack][sp + 1] = env[env_lval];\n      env[env_symb_start_stack][sp + 1] = env[env_symb_start];\n      env[env_symb_end_stack][sp + 1] = env[env_symb_end];\n      cmd = loop;\n      break;\n\n    case 10://reduce:\n      var m = tables.len[n];\n      env[env_asp] = sp;\n      env[env_rule_number] = n;\n      env[env_rule_len] = m;\n      sp = sp - m + 1;\n      m = tables.lhs[n];\n      state1 = env[env_s_stack][sp];\n      n1 = tables.gindex[m];\n      n2 = n1 + state1;\n      if (n1 != 0 && n2 >= 0 && n2 <= tables[tbl_tablesize] &&\n          tables.check[n2] == state1)\n        state = tables.table[n2];\n      else\n        state = tables.dgoto[m];\n      if (sp >= env[env_stacksize]) {\n        res = GROW_STACKS_2;\n        break exit;\n      }\n      // Fall through\n                                  /* The ML code resizes the stacks */\n    case 3://STACKS_GROWN_2:\n      res = COMPUTE_SEMANTIC_ACTION;\n      break exit;\n                                  /* The ML code calls the semantic action */\n    case 4://SEMANTIC_ACTION_COMPUTED:\n      env[env_s_stack][sp + 1] = state;\n      env[env_v_stack][sp + 1] = arg;\n      var asp = env[env_asp];\n      env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];\n      if (sp > asp) {\n        /* This is an epsilon production. Take symb_start equal to symb_end. */\n        env[env_symb_start_stack][sp + 1] = env[env_symb_end_stack][asp + 1];\n      }\n      cmd = loop; break;\n                                  /* Should not happen */\n    default:\n      return RAISE_PARSE_ERROR;\n    }\n  }\n  // SAVE\n  env[env_sp] = sp;\n  env[env_state] = state;\n  env[env_errflag] = errflag;\n  return res;\n}\n\n//Provides: caml_set_parser_trace const\n//Dummy function!\nfunction caml_set_parser_trace() { return 0; }\n",
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2014 Jérôme Vouillon, Hugo Heuzard\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n//Provides: caml_CamlinternalMod_init_mod\n//Requires: caml_raise_with_arg, caml_global_data\nfunction caml_CamlinternalMod_init_mod(loc,shape) {\n  function undef_module (_x) {\n    caml_raise_with_arg(caml_global_data.Undefined_recursive_module, loc);\n  }\n  function loop (shape,struct,idx){\n    if(typeof shape === \"number\")\n      switch(shape){\n      case 0://function\n        struct[idx]={fun:undef_module};\n        break;\n      case 1://lazy\n        struct[idx]=[246, undef_module];\n        break;\n      default://case 2://class\n        struct[idx]=[];\n      }\n    else\n      switch(shape[0]){\n      case 0://module\n        struct[idx] = [0];\n        for(var i=1;i<shape[1].length;i++)\n          loop(shape[1][i],struct[idx],i);\n        break;\n      default://case 1://Value\n        struct[idx] = shape[1];\n      }\n  }\n  var res = [];\n  loop(shape,res,0);\n  return res[0]\n}\n//Provides: caml_CamlinternalMod_update_mod\n//Requires: caml_update_dummy\nfunction caml_CamlinternalMod_update_mod(shape,real,x) {\n  if(typeof shape === \"number\")\n    switch(shape){\n    case 0://function\n      real.fun = x;\n      break;\n    case 1://lazy\n    default://case 2://class\n      caml_update_dummy(real,x);\n    }\n  else\n    switch(shape[0]){\n    case 0://module\n      for(var i=1;i<shape[1].length;i++)\n        caml_CamlinternalMod_update_mod(shape[1][i],real[i],x[i]);\n      break;\n    //case 1://Value\n    default:\n    };\n  return 0\n}\n",
  "/***********************************************************************/\n/*                                                                     */\n/*                           Objective Caml                            */\n/*                                                                     */\n/*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         */\n/*                                                                     */\n/*  Copyright 1996 Institut National de Recherche en Informatique et   */\n/*  en Automatique.  All rights reserved.  This file is distributed    */\n/*  under the terms of the GNU Library General Public License, with    */\n/*  the special exception on linking described in file ../LICENSE.     */\n/*                                                                     */\n/***********************************************************************/\n\n/* $Id: lexing.c 6045 2004-01-01 16:42:43Z doligez $ */\n\n/* The table-driven automaton for lexers generated by camllex. */\n\n//Provides: caml_lex_array\n//Requires: caml_bytes_of_string\nfunction caml_lex_array(s) {\n  s = caml_bytes_of_string(s);\n  var l = s.length / 2;\n  var a = new Array(l);\n  for (var i = 0; i < l; i++)\n    a[i] = (s.charCodeAt(2 * i) | (s.charCodeAt(2 * i + 1) << 8)) << 16 >> 16;\n  return a;\n}\n\n//Provides: caml_lex_engine\n//Requires: caml_failwith, caml_lex_array, caml_array_of_string\nfunction caml_lex_engine(tbl, start_state, lexbuf) {\n  var lex_buffer = 2;\n  var lex_buffer_len = 3;\n  var lex_start_pos = 5;\n  var lex_curr_pos = 6;\n  var lex_last_pos = 7;\n  var lex_last_action = 8;\n  var lex_eof_reached = 9;\n  var lex_base = 1;\n  var lex_backtrk = 2;\n  var lex_default = 3;\n  var lex_trans = 4;\n  var lex_check = 5;\n\n  if (!tbl.lex_default) {\n    tbl.lex_base =    caml_lex_array (tbl[lex_base]);\n    tbl.lex_backtrk = caml_lex_array (tbl[lex_backtrk]);\n    tbl.lex_check =   caml_lex_array (tbl[lex_check]);\n    tbl.lex_trans =   caml_lex_array (tbl[lex_trans]);\n    tbl.lex_default = caml_lex_array (tbl[lex_default]);\n  }\n\n  var c, state = start_state;\n\n  var buffer = caml_array_of_string(lexbuf[lex_buffer]);\n\n  if (state >= 0) {\n    /* First entry */\n    lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];\n    lexbuf[lex_last_action] = -1;\n  } else {\n    /* Reentry after refill */\n    state = -state - 1;\n  }\n  for(;;) {\n    /* Lookup base address or action number for current state */\n    var base = tbl.lex_base[state];\n    if (base < 0) return -base-1;\n    /* See if it's a backtrack point */\n    var backtrk = tbl.lex_backtrk[state];\n    if (backtrk >= 0) {\n      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];\n      lexbuf[lex_last_action] = backtrk;\n    }\n    /* See if we need a refill */\n    if (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len]){\n      if (lexbuf[lex_eof_reached] == 0)\n        return -state - 1;\n      else\n        c = 256;\n    }else{\n      /* Read next input char */\n      c = buffer[lexbuf[lex_curr_pos]];\n      lexbuf[lex_curr_pos] ++;\n    }\n    /* Determine next state */\n    if (tbl.lex_check[base + c] == state)\n      state = tbl.lex_trans[base + c];\n    else\n      state = tbl.lex_default[state];\n    /* If no transition on this char, return to last backtrack point */\n    if (state < 0) {\n      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];\n      if (lexbuf[lex_last_action] == -1)\n        caml_failwith(\"lexing: empty token\");\n      else\n        return lexbuf[lex_last_action];\n    }else{\n      /* Erase the EOF condition only if the EOF pseudo-character was\n         consumed by the automaton (i.e. there was no backtrack above)\n       */\n      if (c == 256) lexbuf[lex_eof_reached] = 0;\n    }\n  }\n}\n\n/***********************************************/\n/* New lexer engine, with memory of positions  */\n/***********************************************/\n\n//Provides: caml_new_lex_engine\n//Requires: caml_failwith, caml_lex_array\n//Requires: caml_bytes_of_string, caml_array_of_string\nfunction caml_lex_run_mem(s, i, mem, curr_pos) {\n  for (;;) {\n    var dst = s.charCodeAt(i); i++;\n    if (dst == 0xff) return;\n    var src = s.charCodeAt(i); i++;\n    if (src == 0xff)\n      mem [dst + 1] = curr_pos;\n    else\n      mem [dst + 1] = mem [src + 1];\n  }\n}\n\nfunction caml_lex_run_tag(s, i, mem) {\n  for (;;) {\n    var dst = s.charCodeAt(i); i++;\n    if (dst == 0xff) return ;\n    var src = s.charCodeAt(i); i++;\n    if (src == 0xff)\n      mem [dst + 1] = -1;\n    else\n      mem [dst + 1] = mem [src + 1];\n  }\n}\n\nfunction caml_new_lex_engine(tbl, start_state, lexbuf) {\n  var lex_buffer = 2;\n  var lex_buffer_len = 3;\n  var lex_start_pos = 5;\n  var lex_curr_pos = 6;\n  var lex_last_pos = 7;\n  var lex_last_action = 8;\n  var lex_eof_reached = 9;\n  var lex_mem = 10;\n  var lex_base = 1;\n  var lex_backtrk = 2;\n  var lex_default = 3;\n  var lex_trans = 4;\n  var lex_check = 5;\n  var lex_base_code = 6;\n  var lex_backtrk_code = 7;\n  var lex_default_code = 8;\n  var lex_trans_code = 9;\n  var lex_check_code = 10;\n  var lex_code = 11;\n\n  if (!tbl.lex_default) {\n    tbl.lex_base =    caml_lex_array (tbl[lex_base]);\n    tbl.lex_backtrk = caml_lex_array (tbl[lex_backtrk]);\n    tbl.lex_check =   caml_lex_array (tbl[lex_check]);\n    tbl.lex_trans =   caml_lex_array (tbl[lex_trans]);\n    tbl.lex_default = caml_lex_array (tbl[lex_default]);\n  }\n  if (!tbl.lex_default_code) {\n    tbl.lex_base_code =    caml_lex_array (tbl[lex_base_code]);\n    tbl.lex_backtrk_code = caml_lex_array (tbl[lex_backtrk_code]);\n    tbl.lex_check_code =   caml_lex_array (tbl[lex_check_code]);\n    tbl.lex_trans_code =   caml_lex_array (tbl[lex_trans_code]);\n    tbl.lex_default_code = caml_lex_array (tbl[lex_default_code]);\n  }\n  if (tbl.lex_code == null) tbl.lex_code = caml_bytes_of_string(tbl[lex_code]);\n\n  var c, state = start_state;\n\n  var buffer = caml_array_of_string(lexbuf[lex_buffer]);\n\n  if (state >= 0) {\n    /* First entry */\n    lexbuf[lex_last_pos] = lexbuf[lex_start_pos] = lexbuf[lex_curr_pos];\n    lexbuf[lex_last_action] = -1;\n  } else {\n    /* Reentry after refill */\n    state = -state - 1;\n  }\n  for(;;) {\n    /* Lookup base address or action number for current state */\n    var base = tbl.lex_base[state];\n    if (base < 0) {\n      var pc_off = tbl.lex_base_code[state];\n      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);\n      return -base-1;\n    }\n    /* See if it's a backtrack point */\n    var backtrk = tbl.lex_backtrk[state];\n    if (backtrk >= 0) {\n      var pc_off = tbl.lex_backtrk_code[state];\n      caml_lex_run_tag(tbl.lex_code, pc_off, lexbuf[lex_mem]);\n      lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];\n      lexbuf[lex_last_action] = backtrk;\n    }\n    /* See if we need a refill */\n    if (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len]){\n      if (lexbuf[lex_eof_reached] == 0)\n        return -state - 1;\n      else\n        c = 256;\n    }else{\n      /* Read next input char */\n      c = buffer[lexbuf[lex_curr_pos]];\n      lexbuf[lex_curr_pos] ++;\n    }\n    /* Determine next state */\n    var pstate = state ;\n    if (tbl.lex_check[base + c] == state)\n      state = tbl.lex_trans[base + c];\n    else\n      state = tbl.lex_default[state];\n    /* If no transition on this char, return to last backtrack point */\n    if (state < 0) {\n      lexbuf[lex_curr_pos] = lexbuf[lex_last_pos];\n      if (lexbuf[lex_last_action] == -1)\n        caml_failwith(\"lexing: empty token\");\n      else\n        return lexbuf[lex_last_action];\n    }else{\n      /* If some transition, get and perform memory moves */\n      var base_code = tbl.lex_base_code[pstate], pc_off;\n      if (tbl.lex_check_code[base_code + c] == pstate)\n        pc_off = tbl.lex_trans_code[base_code + c];\n      else\n        pc_off = tbl.lex_default_code[pstate];\n      if (pc_off > 0)\n        caml_lex_run_mem\n          (tbl.lex_code, pc_off, lexbuf[lex_mem], lexbuf[lex_curr_pos]);\n      /* Erase the EOF condition only if the EOF pseudo-character was\n         consumed by the automaton (i.e. there was no backtrack above)\n       */\n      if (c == 256) lexbuf[lex_eof_reached] = 0;\n    }\n  }\n}\n\n",
  null,
  "// Js_of_ocaml runtime support\n// http://www.ocsigen.org/js_of_ocaml/\n// Copyright (C) 2010 Jérôme Vouillon\n// Laboratoire PPS - CNRS Université Paris Diderot\n//\n// This program is free software; you can redistribute it and/or modify\n// it under the terms of the GNU Lesser General Public License as published by\n// the Free Software Foundation, with linking exception;\n// either version 2.1 of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU Lesser General Public License for more details.\n//\n// You should have received a copy of the GNU Lesser General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.\n\n\n//Provides: caml_md5_chan\n//Requires: caml_md5_string, caml_string_of_array,caml_ml_string_length\nfunction caml_md5_chan(chan,len){\n  if(len<0){\n    len=caml_ml_string_length(chan.file.data) - chan.offset;\n  }\n  return caml_md5_string(chan.file.data,chan.offset,len);\n}\n\n//Provides: caml_md5_string\n//Requires: caml_string_of_array, caml_convert_string_to_bytes\nvar caml_md5_string =\nfunction () {\n  function add (x, y) { return (x + y) | 0; }\n  function xx(q,a,b,x,s,t) {\n    a = add(add(a, q), add(x, t));\n    return add((a << s) | (a >>> (32 - s)), b);\n  }\n  function ff(a,b,c,d,x,s,t) {\n    return xx((b & c) | ((~b) & d), a, b, x, s, t);\n  }\n  function gg(a,b,c,d,x,s,t) {\n    return xx((b & d) | (c & (~d)), a, b, x, s, t);\n  }\n  function hh(a,b,c,d,x,s,t) { return xx(b ^ c ^ d, a, b, x, s, t); }\n  function ii(a,b,c,d,x,s,t) { return xx(c ^ (b | (~d)), a, b, x, s, t); }\n\n  function md5(buffer, length) {\n    var i = length;\n    buffer[i >> 2] |= 0x80 << (8 * (i & 3));\n    for (i = (i & ~0x3) + 8;(i & 0x3F) < 60 ;i += 4)\n      buffer[(i >> 2) - 1] = 0;\n    buffer[(i >> 2) -1] = length << 3;\n    buffer[i >> 2] = (length >> 29) & 0x1FFFFFFF;\n\n    var w = [0x67452301, 0xEFCDAB89, 0x98BADCFE, 0x10325476];\n\n    for(i = 0; i < buffer.length; i += 16) {\n      var a = w[0], b = w[1], c = w[2], d = w[3];\n\n      a = ff(a, b, c, d, buffer[i+ 0], 7, 0xD76AA478);\n      d = ff(d, a, b, c, buffer[i+ 1], 12, 0xE8C7B756);\n      c = ff(c, d, a, b, buffer[i+ 2], 17, 0x242070DB);\n      b = ff(b, c, d, a, buffer[i+ 3], 22, 0xC1BDCEEE);\n      a = ff(a, b, c, d, buffer[i+ 4], 7, 0xF57C0FAF);\n      d = ff(d, a, b, c, buffer[i+ 5], 12, 0x4787C62A);\n      c = ff(c, d, a, b, buffer[i+ 6], 17, 0xA8304613);\n      b = ff(b, c, d, a, buffer[i+ 7], 22, 0xFD469501);\n      a = ff(a, b, c, d, buffer[i+ 8], 7, 0x698098D8);\n      d = ff(d, a, b, c, buffer[i+ 9], 12, 0x8B44F7AF);\n      c = ff(c, d, a, b, buffer[i+10], 17, 0xFFFF5BB1);\n      b = ff(b, c, d, a, buffer[i+11], 22, 0x895CD7BE);\n      a = ff(a, b, c, d, buffer[i+12], 7, 0x6B901122);\n      d = ff(d, a, b, c, buffer[i+13], 12, 0xFD987193);\n      c = ff(c, d, a, b, buffer[i+14], 17, 0xA679438E);\n      b = ff(b, c, d, a, buffer[i+15], 22, 0x49B40821);\n\n      a = gg(a, b, c, d, buffer[i+ 1], 5, 0xF61E2562);\n      d = gg(d, a, b, c, buffer[i+ 6], 9, 0xC040B340);\n      c = gg(c, d, a, b, buffer[i+11], 14, 0x265E5A51);\n      b = gg(b, c, d, a, buffer[i+ 0], 20, 0xE9B6C7AA);\n      a = gg(a, b, c, d, buffer[i+ 5], 5, 0xD62F105D);\n      d = gg(d, a, b, c, buffer[i+10], 9, 0x02441453);\n      c = gg(c, d, a, b, buffer[i+15], 14, 0xD8A1E681);\n      b = gg(b, c, d, a, buffer[i+ 4], 20, 0xE7D3FBC8);\n      a = gg(a, b, c, d, buffer[i+ 9], 5, 0x21E1CDE6);\n      d = gg(d, a, b, c, buffer[i+14], 9, 0xC33707D6);\n      c = gg(c, d, a, b, buffer[i+ 3], 14, 0xF4D50D87);\n      b = gg(b, c, d, a, buffer[i+ 8], 20, 0x455A14ED);\n      a = gg(a, b, c, d, buffer[i+13], 5, 0xA9E3E905);\n      d = gg(d, a, b, c, buffer[i+ 2], 9, 0xFCEFA3F8);\n      c = gg(c, d, a, b, buffer[i+ 7], 14, 0x676F02D9);\n      b = gg(b, c, d, a, buffer[i+12], 20, 0x8D2A4C8A);\n\n      a = hh(a, b, c, d, buffer[i+ 5], 4, 0xFFFA3942);\n      d = hh(d, a, b, c, buffer[i+ 8], 11, 0x8771F681);\n      c = hh(c, d, a, b, buffer[i+11], 16, 0x6D9D6122);\n      b = hh(b, c, d, a, buffer[i+14], 23, 0xFDE5380C);\n      a = hh(a, b, c, d, buffer[i+ 1], 4, 0xA4BEEA44);\n      d = hh(d, a, b, c, buffer[i+ 4], 11, 0x4BDECFA9);\n      c = hh(c, d, a, b, buffer[i+ 7], 16, 0xF6BB4B60);\n      b = hh(b, c, d, a, buffer[i+10], 23, 0xBEBFBC70);\n      a = hh(a, b, c, d, buffer[i+13], 4, 0x289B7EC6);\n      d = hh(d, a, b, c, buffer[i+ 0], 11, 0xEAA127FA);\n      c = hh(c, d, a, b, buffer[i+ 3], 16, 0xD4EF3085);\n      b = hh(b, c, d, a, buffer[i+ 6], 23, 0x04881D05);\n      a = hh(a, b, c, d, buffer[i+ 9], 4, 0xD9D4D039);\n      d = hh(d, a, b, c, buffer[i+12], 11, 0xE6DB99E5);\n      c = hh(c, d, a, b, buffer[i+15], 16, 0x1FA27CF8);\n      b = hh(b, c, d, a, buffer[i+ 2], 23, 0xC4AC5665);\n\n      a = ii(a, b, c, d, buffer[i+ 0], 6, 0xF4292244);\n      d = ii(d, a, b, c, buffer[i+ 7], 10, 0x432AFF97);\n      c = ii(c, d, a, b, buffer[i+14], 15, 0xAB9423A7);\n      b = ii(b, c, d, a, buffer[i+ 5], 21, 0xFC93A039);\n      a = ii(a, b, c, d, buffer[i+12], 6, 0x655B59C3);\n      d = ii(d, a, b, c, buffer[i+ 3], 10, 0x8F0CCC92);\n      c = ii(c, d, a, b, buffer[i+10], 15, 0xFFEFF47D);\n      b = ii(b, c, d, a, buffer[i+ 1], 21, 0x85845DD1);\n      a = ii(a, b, c, d, buffer[i+ 8], 6, 0x6FA87E4F);\n      d = ii(d, a, b, c, buffer[i+15], 10, 0xFE2CE6E0);\n      c = ii(c, d, a, b, buffer[i+ 6], 15, 0xA3014314);\n      b = ii(b, c, d, a, buffer[i+13], 21, 0x4E0811A1);\n      a = ii(a, b, c, d, buffer[i+ 4], 6, 0xF7537E82);\n      d = ii(d, a, b, c, buffer[i+11], 10, 0xBD3AF235);\n      c = ii(c, d, a, b, buffer[i+ 2], 15, 0x2AD7D2BB);\n      b = ii(b, c, d, a, buffer[i+ 9], 21, 0xEB86D391);\n\n      w[0] = add(a, w[0]);\n      w[1] = add(b, w[1]);\n      w[2] = add(c, w[2]);\n      w[3] = add(d, w[3]);\n    }\n\n    var t = new Array(16);\n    for (var i = 0; i < 4; i++)\n      for (var j = 0; j < 4; j++)\n        t[i * 4 + j] = (w[i] >> (8 * j)) & 0xFF;\n    return t;\n  }\n\n  return function (s, ofs, len) {\n    // FIX: maybe we should perform the computation by chunk of 64 bytes\n    // as in http://www.myersdaily.org/joseph/javascript/md5.js\n    var buf = [];\n    switch (s.t & 6) {\n    default:\n      caml_convert_string_to_bytes(s);\n    case 0: /* BYTES */\n      var b = s.c;\n      for (var i = 0; i < len; i+=4) {\n        var j = i + ofs;\n        buf[i>>2] =\n          b.charCodeAt(j) | (b.charCodeAt(j+1) << 8) |\n          (b.charCodeAt(j+2) << 16) | (b.charCodeAt(j+3) << 24);\n      }\n      for (; i < len; i++) buf[i>>2] |= b.charCodeAt(i + ofs) << (8 * (i & 3));\n      break;\n    case 4: /* ARRAY */\n      var a = s.c;\n      for (var i = 0; i < len; i+=4) {\n        var j = i + ofs;\n        buf[i>>2] = a[j] | (a[j+1] << 8) | (a[j+2] << 16) | (a[j+3] << 24);\n      }\n      for (; i < len; i++) buf[i>>2] |= a[i + ofs] << (8 * (i & 3));\n    }\n    return caml_string_of_array(md5(buf, len));\n  }\n} ();\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* type 'a option = None | Some of 'a *)\n\n(* Exceptions *)\n\nexternal register_named_value : string -> 'a -> unit\n                              = \"caml_register_named_value\"\n\nlet () =\n  (* for asmrun/fail.c *)\n  register_named_value \"Pervasives.array_bound_error\"\n    (Invalid_argument \"index out of bounds\")\n\n\nexternal raise : exn -> 'a = \"%raise\"\nexternal raise_notrace : exn -> 'a = \"%raise_notrace\"\n\nlet failwith s = raise(Failure s)\nlet invalid_arg s = raise(Invalid_argument s)\n\nexception Exit\n\n(* Composition operators *)\n\nexternal ( |> ) : 'a -> ('a -> 'b) -> 'b = \"%revapply\"\nexternal ( @@ ) : ('a -> 'b) -> 'a -> 'b = \"%apply\"\n\n(* Debugging *)\n\nexternal __LOC__ : string = \"%loc_LOC\"\nexternal __FILE__ : string = \"%loc_FILE\"\nexternal __LINE__ : int = \"%loc_LINE\"\nexternal __MODULE__ : string = \"%loc_MODULE\"\nexternal __POS__ : string * int * int * int = \"%loc_POS\"\n\nexternal __LOC_OF__ : 'a -> string * 'a = \"%loc_LOC\"\nexternal __LINE_OF__ : 'a -> int * 'a = \"%loc_LINE\"\nexternal __POS_OF__ : 'a -> (string * int * int * int) * 'a = \"%loc_POS\"\n\n(* Comparisons *)\n\nexternal ( = ) : 'a -> 'a -> bool = \"%equal\"\nexternal ( <> ) : 'a -> 'a -> bool = \"%notequal\"\nexternal ( < ) : 'a -> 'a -> bool = \"%lessthan\"\nexternal ( > ) : 'a -> 'a -> bool = \"%greaterthan\"\nexternal ( <= ) : 'a -> 'a -> bool = \"%lessequal\"\nexternal ( >= ) : 'a -> 'a -> bool = \"%greaterequal\"\nexternal compare : 'a -> 'a -> int = \"%compare\"\n\nlet min x y = if x <= y then x else y\nlet max x y = if x >= y then x else y\n\nexternal ( == ) : 'a -> 'a -> bool = \"%eq\"\nexternal ( != ) : 'a -> 'a -> bool = \"%noteq\"\n\n(* Boolean operations *)\n\nexternal not : bool -> bool = \"%boolnot\"\nexternal ( & ) : bool -> bool -> bool = \"%sequand\"\nexternal ( && ) : bool -> bool -> bool = \"%sequand\"\nexternal ( or ) : bool -> bool -> bool = \"%sequor\"\nexternal ( || ) : bool -> bool -> bool = \"%sequor\"\n\n(* Integer operations *)\n\nexternal ( ~- ) : int -> int = \"%negint\"\nexternal ( ~+ ) : int -> int = \"%identity\"\nexternal succ : int -> int = \"%succint\"\nexternal pred : int -> int = \"%predint\"\nexternal ( + ) : int -> int -> int = \"%addint\"\nexternal ( - ) : int -> int -> int = \"%subint\"\nexternal ( * ) : int -> int -> int = \"%mulint\"\nexternal ( / ) : int -> int -> int = \"%divint\"\nexternal ( mod ) : int -> int -> int = \"%modint\"\n\nlet abs x = if x >= 0 then x else -x\n\nexternal ( land ) : int -> int -> int = \"%andint\"\nexternal ( lor ) : int -> int -> int = \"%orint\"\nexternal ( lxor ) : int -> int -> int = \"%xorint\"\n\nlet lnot x = x lxor (-1)\n\nexternal ( lsl ) : int -> int -> int = \"%lslint\"\nexternal ( lsr ) : int -> int -> int = \"%lsrint\"\nexternal ( asr ) : int -> int -> int = \"%asrint\"\n\nlet max_int = (-1) lsr 1\nlet min_int = max_int + 1\n\n(* Floating-point operations *)\n\nexternal ( ~-. ) : float -> float = \"%negfloat\"\nexternal ( ~+. ) : float -> float = \"%identity\"\nexternal ( +. ) : float -> float -> float = \"%addfloat\"\nexternal ( -. ) : float -> float -> float = \"%subfloat\"\nexternal ( *. ) : float -> float -> float = \"%mulfloat\"\nexternal ( /. ) : float -> float -> float = \"%divfloat\"\nexternal ( ** ) : float -> float -> float = \"caml_power_float\" \"pow\" \"float\"\nexternal exp : float -> float = \"caml_exp_float\" \"exp\" \"float\"\nexternal expm1 : float -> float = \"caml_expm1_float\" \"caml_expm1\" \"float\"\nexternal acos : float -> float = \"caml_acos_float\" \"acos\" \"float\"\nexternal asin : float -> float = \"caml_asin_float\" \"asin\" \"float\"\nexternal atan : float -> float = \"caml_atan_float\" \"atan\" \"float\"\nexternal atan2 : float -> float -> float = \"caml_atan2_float\" \"atan2\" \"float\"\nexternal hypot : float -> float -> float\n               = \"caml_hypot_float\" \"caml_hypot\" \"float\"\nexternal cos : float -> float = \"caml_cos_float\" \"cos\" \"float\"\nexternal cosh : float -> float = \"caml_cosh_float\" \"cosh\" \"float\"\nexternal log : float -> float = \"caml_log_float\" \"log\" \"float\"\nexternal log10 : float -> float = \"caml_log10_float\" \"log10\" \"float\"\nexternal log1p : float -> float = \"caml_log1p_float\" \"caml_log1p\" \"float\"\nexternal sin : float -> float = \"caml_sin_float\" \"sin\" \"float\"\nexternal sinh : float -> float = \"caml_sinh_float\" \"sinh\" \"float\"\nexternal sqrt : float -> float = \"caml_sqrt_float\" \"sqrt\" \"float\"\nexternal tan : float -> float = \"caml_tan_float\" \"tan\" \"float\"\nexternal tanh : float -> float = \"caml_tanh_float\" \"tanh\" \"float\"\nexternal ceil : float -> float = \"caml_ceil_float\" \"ceil\" \"float\"\nexternal floor : float -> float = \"caml_floor_float\" \"floor\" \"float\"\nexternal abs_float : float -> float = \"%absfloat\"\nexternal copysign : float -> float -> float\n                  = \"caml_copysign_float\" \"caml_copysign\" \"float\"\nexternal mod_float : float -> float -> float = \"caml_fmod_float\" \"fmod\" \"float\"\nexternal frexp : float -> float * int = \"caml_frexp_float\"\nexternal ldexp : float -> int -> float = \"caml_ldexp_float\"\nexternal modf : float -> float * float = \"caml_modf_float\"\nexternal float : int -> float = \"%floatofint\"\nexternal float_of_int : int -> float = \"%floatofint\"\nexternal truncate : float -> int = \"%intoffloat\"\nexternal int_of_float : float -> int = \"%intoffloat\"\nexternal float_of_bits : int64 -> float = \"caml_int64_float_of_bits\"\nlet infinity =\n  float_of_bits 0x7F_F0_00_00_00_00_00_00L\nlet neg_infinity =\n  float_of_bits 0xFF_F0_00_00_00_00_00_00L\nlet nan =\n  float_of_bits 0x7F_F0_00_00_00_00_00_01L\nlet max_float =\n  float_of_bits 0x7F_EF_FF_FF_FF_FF_FF_FFL\nlet min_float =\n  float_of_bits 0x00_10_00_00_00_00_00_00L\nlet epsilon_float =\n  float_of_bits 0x3C_B0_00_00_00_00_00_00L\n\ntype fpclass =\n    FP_normal\n  | FP_subnormal\n  | FP_zero\n  | FP_infinite\n  | FP_nan\nexternal classify_float : float -> fpclass = \"caml_classify_float\"\n\n(* String and byte sequence operations -- more in modules String and Bytes *)\n\nexternal string_length : string -> int = \"%string_length\"\nexternal bytes_length : bytes -> int = \"%string_length\"\nexternal bytes_create : int -> bytes = \"caml_create_string\"\nexternal string_blit : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" \"noalloc\"\nexternal bytes_blit : bytes -> int -> bytes -> int -> int -> unit\n                        = \"caml_blit_string\" \"noalloc\"\nexternal bytes_unsafe_to_string : bytes -> string = \"%identity\"\nexternal bytes_unsafe_of_string : string -> bytes = \"%identity\"\n\nlet ( ^ ) s1 s2 =\n  let l1 = string_length s1 and l2 = string_length s2 in\n  let s = bytes_create (l1 + l2) in\n  string_blit s1 0 s 0 l1;\n  string_blit s2 0 s l1 l2;\n  bytes_unsafe_to_string s\n\n(* Character operations -- more in module Char *)\n\nexternal int_of_char : char -> int = \"%identity\"\nexternal unsafe_char_of_int : int -> char = \"%identity\"\nlet char_of_int n =\n  if n < 0 || n > 255 then invalid_arg \"char_of_int\" else unsafe_char_of_int n\n\n(* Unit operations *)\n\nexternal ignore : 'a -> unit = \"%ignore\"\n\n(* Pair operations *)\n\nexternal fst : 'a * 'b -> 'a = \"%field0\"\nexternal snd : 'a * 'b -> 'b = \"%field1\"\n\n(* References *)\n\ntype 'a ref = { mutable contents : 'a }\nexternal ref : 'a -> 'a ref = \"%makemutable\"\nexternal ( ! ) : 'a ref -> 'a = \"%field0\"\nexternal ( := ) : 'a ref -> 'a -> unit = \"%setfield0\"\nexternal incr : int ref -> unit = \"%incr\"\nexternal decr : int ref -> unit = \"%decr\"\n\n(* String conversion functions *)\n\nexternal format_int : string -> int -> string = \"caml_format_int\"\nexternal format_float : string -> float -> string = \"caml_format_float\"\n\nlet string_of_bool b =\n  if b then \"true\" else \"false\"\nlet bool_of_string = function\n  | \"true\" -> true\n  | \"false\" -> false\n  | _ -> invalid_arg \"bool_of_string\"\n\nlet string_of_int n =\n  format_int \"%d\" n\n\nexternal int_of_string : string -> int = \"caml_int_of_string\"\nexternal string_get : string -> int -> char = \"%string_safe_get\"\n\nlet valid_float_lexem s =\n  let l = string_length s in\n  let rec loop i =\n    if i >= l then s ^ \".\" else\n    match string_get s i with\n    | '0' .. '9' | '-' -> loop (i + 1)\n    | _ -> s\n  in\n  loop 0\n;;\n\nlet string_of_float f = valid_float_lexem (format_float \"%.12g\" f);;\n\nexternal float_of_string : string -> float = \"caml_float_of_string\"\n\n(* List operations -- more in module List *)\n\nlet rec ( @ ) l1 l2 =\n  match l1 with\n    [] -> l2\n  | hd :: tl -> hd :: (tl @ l2)\n\n(* I/O operations *)\n\ntype in_channel\ntype out_channel\n\nexternal open_descriptor_out : int -> out_channel\n                             = \"caml_ml_open_descriptor_out\"\nexternal open_descriptor_in : int -> in_channel = \"caml_ml_open_descriptor_in\"\n\nlet stdin = open_descriptor_in 0\nlet stdout = open_descriptor_out 1\nlet stderr = open_descriptor_out 2\n\n(* General output functions *)\n\ntype open_flag =\n    Open_rdonly | Open_wronly | Open_append\n  | Open_creat | Open_trunc | Open_excl\n  | Open_binary | Open_text | Open_nonblock\n\nexternal open_desc : string -> open_flag list -> int -> int = \"caml_sys_open\"\n\nlet open_out_gen mode perm name =\n  open_descriptor_out(open_desc name mode perm)\n\nlet open_out name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_text] 0o666 name\n\nlet open_out_bin name =\n  open_out_gen [Open_wronly; Open_creat; Open_trunc; Open_binary] 0o666 name\n\nexternal flush : out_channel -> unit = \"caml_ml_flush\"\n\nexternal out_channels_list : unit -> out_channel list\n                           = \"caml_ml_out_channels_list\"\n\nlet flush_all () =\n  let rec iter = function\n      [] -> ()\n    | a :: l -> (try flush a with _ -> ()); iter l\n  in iter (out_channels_list ())\n\nexternal unsafe_output : out_channel -> bytes -> int -> int -> unit\n                       = \"caml_ml_output\"\nexternal unsafe_output_string : out_channel -> string -> int -> int -> unit\n                              = \"caml_ml_output\"\n\nexternal output_char : out_channel -> char -> unit = \"caml_ml_output_char\"\n\nlet output_bytes oc s =\n  unsafe_output oc s 0 (bytes_length s)\n\nlet output_string oc s =\n  unsafe_output_string oc s 0 (string_length s)\n\nlet output oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"output\"\n  else unsafe_output oc s ofs len\n\nlet output_substring oc s ofs len =\n  if ofs < 0 || len < 0 || ofs > string_length s - len\n  then invalid_arg \"output_substring\"\n  else unsafe_output_string oc s ofs len\n\nexternal output_byte : out_channel -> int -> unit = \"caml_ml_output_char\"\nexternal output_binary_int : out_channel -> int -> unit = \"caml_ml_output_int\"\n\nexternal marshal_to_channel : out_channel -> 'a -> unit list -> unit\n     = \"caml_output_value\"\nlet output_value chan v = marshal_to_channel chan v []\n\nexternal seek_out : out_channel -> int -> unit = \"caml_ml_seek_out\"\nexternal pos_out : out_channel -> int = \"caml_ml_pos_out\"\nexternal out_channel_length : out_channel -> int = \"caml_ml_channel_size\"\nexternal close_out_channel : out_channel -> unit = \"caml_ml_close_channel\"\nlet close_out oc = flush oc; close_out_channel oc\nlet close_out_noerr oc =\n  (try flush oc with _ -> ());\n  (try close_out_channel oc with _ -> ())\nexternal set_binary_mode_out : out_channel -> bool -> unit\n                             = \"caml_ml_set_binary_mode\"\n\n(* General input functions *)\n\nlet open_in_gen mode perm name =\n  open_descriptor_in(open_desc name mode perm)\n\nlet open_in name =\n  open_in_gen [Open_rdonly; Open_text] 0 name\n\nlet open_in_bin name =\n  open_in_gen [Open_rdonly; Open_binary] 0 name\n\nexternal input_char : in_channel -> char = \"caml_ml_input_char\"\n\nexternal unsafe_input : in_channel -> bytes -> int -> int -> int\n                      = \"caml_ml_input\"\n\nlet input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"input\"\n  else unsafe_input ic s ofs len\n\nlet rec unsafe_really_input ic s ofs len =\n  if len <= 0 then () else begin\n    let r = unsafe_input ic s ofs len in\n    if r = 0\n    then raise End_of_file\n    else unsafe_really_input ic s (ofs + r) (len - r)\n  end\n\nlet really_input ic s ofs len =\n  if ofs < 0 || len < 0 || ofs > bytes_length s - len\n  then invalid_arg \"really_input\"\n  else unsafe_really_input ic s ofs len\n\nlet really_input_string ic len =\n  let s = bytes_create len in\n  really_input ic s 0 len;\n  bytes_unsafe_to_string s\n\nexternal input_scan_line : in_channel -> int = \"caml_ml_input_scan_line\"\n\nlet input_line chan =\n  let rec build_result buf pos = function\n    [] -> buf\n  | hd :: tl ->\n      let len = bytes_length hd in\n      bytes_blit hd 0 buf (pos - len) len;\n      build_result buf (pos - len) tl in\n  let rec scan accu len =\n    let n = input_scan_line chan in\n    if n = 0 then begin                   (* n = 0: we are at EOF *)\n      match accu with\n        [] -> raise End_of_file\n      | _  -> build_result (bytes_create len) len accu\n    end else if n > 0 then begin          (* n > 0: newline found in buffer *)\n      let res = bytes_create (n - 1) in\n      ignore (unsafe_input chan res 0 (n - 1));\n      ignore (input_char chan);           (* skip the newline *)\n      match accu with\n        [] -> res\n      |  _ -> let len = len + n - 1 in\n              build_result (bytes_create len) len (res :: accu)\n    end else begin                        (* n < 0: newline not found *)\n      let beg = bytes_create (-n) in\n      ignore(unsafe_input chan beg 0 (-n));\n      scan (beg :: accu) (len - n)\n    end\n  in bytes_unsafe_to_string (scan [] 0)\n\nexternal input_byte : in_channel -> int = \"caml_ml_input_char\"\nexternal input_binary_int : in_channel -> int = \"caml_ml_input_int\"\nexternal input_value : in_channel -> 'a = \"caml_input_value\"\nexternal seek_in : in_channel -> int -> unit = \"caml_ml_seek_in\"\nexternal pos_in : in_channel -> int = \"caml_ml_pos_in\"\nexternal in_channel_length : in_channel -> int = \"caml_ml_channel_size\"\nexternal close_in : in_channel -> unit = \"caml_ml_close_channel\"\nlet close_in_noerr ic = (try close_in ic with _ -> ());;\nexternal set_binary_mode_in : in_channel -> bool -> unit\n                            = \"caml_ml_set_binary_mode\"\n\n(* Output functions on standard output *)\n\nlet print_char c = output_char stdout c\nlet print_string s = output_string stdout s\nlet print_bytes s = output_bytes stdout s\nlet print_int i = output_string stdout (string_of_int i)\nlet print_float f = output_string stdout (string_of_float f)\nlet print_endline s =\n  output_string stdout s; output_char stdout '\\n'; flush stdout\nlet print_newline () = output_char stdout '\\n'; flush stdout\n\n(* Output functions on standard error *)\n\nlet prerr_char c = output_char stderr c\nlet prerr_string s = output_string stderr s\nlet prerr_bytes s = output_bytes stderr s\nlet prerr_int i = output_string stderr (string_of_int i)\nlet prerr_float f = output_string stderr (string_of_float f)\nlet prerr_endline s =\n  output_string stderr s; output_char stderr '\\n'; flush stderr\nlet prerr_newline () = output_char stderr '\\n'; flush stderr\n\n(* Input functions on standard input *)\n\nlet read_line () = flush stdout; input_line stdin\nlet read_int () = int_of_string(read_line())\nlet read_float () = float_of_string(read_line())\n\n(* Operations on large files *)\n\nmodule LargeFile =\n  struct\n    external seek_out : out_channel -> int64 -> unit = \"caml_ml_seek_out_64\"\n    external pos_out : out_channel -> int64 = \"caml_ml_pos_out_64\"\n    external out_channel_length : out_channel -> int64\n                                = \"caml_ml_channel_size_64\"\n    external seek_in : in_channel -> int64 -> unit = \"caml_ml_seek_in_64\"\n    external pos_in : in_channel -> int64 = \"caml_ml_pos_in_64\"\n    external in_channel_length : in_channel -> int64 = \"caml_ml_channel_size_64\"\n  end\n\n(* Formats *)\n\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6\n   = ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.format6\n   = Format of ('a, 'b, 'c, 'd, 'e, 'f) CamlinternalFormatBasics.fmt\n               * string\n\ntype ('a, 'b, 'c, 'd) format4 = ('a, 'b, 'c, 'c, 'c, 'd) format6\n\ntype ('a, 'b, 'c) format = ('a, 'b, 'c, 'c) format4\n\nlet string_of_format (Format (fmt, str)) = str\n\nexternal format_of_string :\n ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n ('a, 'b, 'c, 'd, 'e, 'f) format6 = \"%identity\"\n\nlet (^^) (Format (fmt1, str1)) (Format (fmt2, str2)) =\n  Format (CamlinternalFormatBasics.concat_fmt fmt1 fmt2,\n          str1 ^ \"%,\" ^ str2)\n\n(* Miscellaneous *)\n\nexternal sys_exit : int -> 'a = \"caml_sys_exit\"\n\nlet exit_function = ref flush_all\n\nlet at_exit f =\n  let g = !exit_function in\n  exit_function := (fun () -> f(); g())\n\nlet do_at_exit () = (!exit_function) ()\n\nlet exit retcode =\n  do_at_exit ();\n  sys_exit retcode\n\nlet _ = register_named_value \"Pervasives.do_at_exit\" do_at_exit\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                           OCaml                                     *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Array operations *)\n\nexternal length : 'a array -> int = \"%array_length\"\nexternal get: 'a array -> int -> 'a = \"%array_safe_get\"\nexternal set: 'a array -> int -> 'a -> unit = \"%array_safe_set\"\nexternal unsafe_get: 'a array -> int -> 'a = \"%array_unsafe_get\"\nexternal unsafe_set: 'a array -> int -> 'a -> unit = \"%array_unsafe_set\"\nexternal make: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal create: int -> 'a -> 'a array = \"caml_make_vect\"\nexternal unsafe_sub : 'a array -> int -> int -> 'a array = \"caml_array_sub\"\nexternal append_prim : 'a array -> 'a array -> 'a array = \"caml_array_append\"\nexternal concat : 'a array list -> 'a array = \"caml_array_concat\"\nexternal unsafe_blit :\n  'a array -> int -> 'a array -> int -> int -> unit = \"caml_array_blit\"\nexternal make_float: int -> float array = \"caml_make_float_vect\"\n\nlet init l f =\n  if l = 0 then [||] else\n  if l < 0 then invalid_arg \"Array.init\"\n  (* See #6575. We could also check for maximum array size, but this depends\n     on whether we create a float array or a regular one... *)\n  else\n   let res = create l (f 0) in\n   for i = 1 to pred l do\n     unsafe_set res i (f i)\n   done;\n   res\n\nlet make_matrix sx sy init =\n  let res = create sx [||] in\n  for x = 0 to pred sx do\n    unsafe_set res x (create sy init)\n  done;\n  res\n\nlet create_matrix = make_matrix\n\nlet copy a =\n  let l = length a in if l = 0 then [||] else unsafe_sub a 0 l\n\nlet append a1 a2 =\n  let l1 = length a1 in\n  if l1 = 0 then copy a2\n  else if length a2 = 0 then unsafe_sub a1 0 l1\n  else append_prim a1 a2\n\nlet sub a ofs len =\n  if len < 0 || ofs > length a - len\n  then invalid_arg \"Array.sub\"\n  else unsafe_sub a ofs len\n\nlet fill a ofs len v =\n  if ofs < 0 || len < 0 || ofs > length a - len\n  then invalid_arg \"Array.fill\"\n  else for i = ofs to ofs + len - 1 do unsafe_set a i v done\n\nlet blit a1 ofs1 a2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length a1 - len\n             || ofs2 < 0 || ofs2 > length a2 - len\n  then invalid_arg \"Array.blit\"\n  else unsafe_blit a1 ofs1 a2 ofs2 len\n\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\nlet map f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f(unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f(unsafe_get a i))\n    done;\n    r\n  end\n\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet mapi f a =\n  let l = length a in\n  if l = 0 then [||] else begin\n    let r = create l (f 0 (unsafe_get a 0)) in\n    for i = 1 to l - 1 do\n      unsafe_set r i (f i (unsafe_get a i))\n    done;\n    r\n  end\n\nlet to_list a =\n  let rec tolist i res =\n    if i < 0 then res else tolist (i - 1) (unsafe_get a i :: res) in\n  tolist (length a - 1) []\n\n(* Cannot use List.length here because the List module depends on Array. *)\nlet rec list_length accu = function\n  | [] -> accu\n  | h::t -> list_length (succ accu) t\n;;\n\nlet of_list = function\n    [] -> [||]\n  | hd::tl as l ->\n      let a = create (list_length 0 l) hd in\n      let rec fill i = function\n          [] -> a\n        | hd::tl -> unsafe_set a i hd; fill (i+1) tl in\n      fill 1 tl\n\nlet fold_left f x a =\n  let r = ref x in\n  for i = 0 to length a - 1 do\n    r := f !r (unsafe_get a i)\n  done;\n  !r\n\nlet fold_right f a x =\n  let r = ref x in\n  for i = length a - 1 downto 0 do\n    r := f (unsafe_get a i) !r\n  done;\n  !r\n\nexception Bottom of int;;\nlet sort cmp a =\n  let maxson l i =\n    let i31 = i+i+i+1 in\n    let x = ref i31 in\n    if i31+2 < l then begin\n      if cmp (get a i31) (get a (i31+1)) < 0 then x := i31+1;\n      if cmp (get a !x) (get a (i31+2)) < 0 then x := i31+2;\n      !x\n    end else\n      if i31+1 < l && cmp (get a i31) (get a (i31+1)) < 0\n      then i31+1\n      else if i31 < l then i31 else raise (Bottom i)\n  in\n  let rec trickledown l i e =\n    let j = maxson l i in\n    if cmp (get a j) e > 0 then begin\n      set a i (get a j);\n      trickledown l j e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let trickle l i e = try trickledown l i e with Bottom i -> set a i e in\n  let rec bubbledown l i =\n    let j = maxson l i in\n    set a i (get a j);\n    bubbledown l j\n  in\n  let bubble l i = try bubbledown l i with Bottom i -> i in\n  let rec trickleup i e =\n    let father = (i - 1) / 3 in\n    assert (i <> father);\n    if cmp (get a father) e < 0 then begin\n      set a i (get a father);\n      if father > 0 then trickleup father e else set a 0 e;\n    end else begin\n      set a i e;\n    end;\n  in\n  let l = length a in\n  for i = (l + 1) / 3 - 1 downto 0 do trickle l i (get a i); done;\n  for i = l - 1 downto 2 do\n    let e = (get a i) in\n    set a i (get a 0);\n    trickleup (bubble i 0) e;\n  done;\n  if l > 1 then (let e = (get a 1) in set a 1 (get a 0); set a 0 e);\n;;\n\nlet cutoff = 5;;\nlet stable_sort cmp a =\n  let merge src1ofs src1len src2 src2ofs src2len dst dstofs =\n    let src1r = src1ofs + src1len and src2r = src2ofs + src2len in\n    let rec loop i1 s1 i2 s2 d =\n      if cmp s1 s2 <= 0 then begin\n        set dst d s1;\n        let i1 = i1 + 1 in\n        if i1 < src1r then\n          loop i1 (get a i1) i2 s2 (d + 1)\n        else\n          blit src2 i2 dst (d + 1) (src2r - i2)\n      end else begin\n        set dst d s2;\n        let i2 = i2 + 1 in\n        if i2 < src2r then\n          loop i1 s1 i2 (get src2 i2) (d + 1)\n        else\n          blit a i1 dst (d + 1) (src1r - i1)\n      end\n    in loop src1ofs (get a src1ofs) src2ofs (get src2 src2ofs) dstofs;\n  in\n  let isortto srcofs dst dstofs len =\n    for i = 0 to len - 1 do\n      let e = (get a (srcofs + i)) in\n      let j = ref (dstofs + i - 1) in\n      while (!j >= dstofs && cmp (get dst !j) e > 0) do\n        set dst (!j + 1) (get dst !j);\n        decr j;\n      done;\n      set dst (!j + 1) e;\n    done;\n  in\n  let rec sortto srcofs dst dstofs len =\n    if len <= cutoff then isortto srcofs dst dstofs len else begin\n      let l1 = len / 2 in\n      let l2 = len - l1 in\n      sortto (srcofs + l1) dst (dstofs + l1) l2;\n      sortto srcofs a (srcofs + l2) l1;\n      merge (srcofs + l2) l1 dst (dstofs + l1) l2 dst dstofs;\n    end;\n  in\n  let l = length a in\n  if l <= cutoff then isortto 0 a 0 l else begin\n    let l1 = l / 2 in\n    let l2 = l - l1 in\n    let t = make l2 (get a 0) in\n    sortto l1 t 0 l2;\n    sortto 0 a l2 l1;\n    merge l2 l1 t 0 l2 a 0;\n  end;\n;;\n\nlet fast_sort = stable_sort;;\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* List operations *)\n\nlet rec length_aux len = function\n    [] -> len\n  | a::l -> length_aux (len + 1) l\n\nlet length l = length_aux 0 l\n\nlet hd = function\n    [] -> failwith \"hd\"\n  | a::l -> a\n\nlet tl = function\n    [] -> failwith \"tl\"\n  | a::l -> l\n\nlet nth l n =\n  if n < 0 then invalid_arg \"List.nth\" else\n  let rec nth_aux l n =\n    match l with\n    | [] -> failwith \"nth\"\n    | a::l -> if n = 0 then a else nth_aux l (n-1)\n  in nth_aux l n\n\nlet append = (@)\n\nlet rec rev_append l1 l2 =\n  match l1 with\n    [] -> l2\n  | a :: l -> rev_append l (a :: l2)\n\nlet rev l = rev_append l []\n\nlet rec flatten = function\n    [] -> []\n  | l::r -> l @ flatten r\n\nlet concat = flatten\n\nlet rec map f = function\n    [] -> []\n  | a::l -> let r = f a in r :: map f l\n\nlet rec mapi i f = function\n    [] -> []\n  | a::l -> let r = f i a in r :: mapi (i + 1) f l\n\nlet mapi f l = mapi 0 f l\n\nlet rev_map f l =\n  let rec rmap_f accu = function\n    | [] -> accu\n    | a::l -> rmap_f (f a :: accu) l\n  in\n  rmap_f [] l\n;;\n\nlet rec iter f = function\n    [] -> ()\n  | a::l -> f a; iter f l\n\nlet rec iteri i f = function\n    [] -> ()\n  | a::l -> f i a; iteri (i + 1) f l\n\nlet iteri f l = iteri 0 f l\n\nlet rec fold_left f accu l =\n  match l with\n    [] -> accu\n  | a::l -> fold_left f (f accu a) l\n\nlet rec fold_right f l accu =\n  match l with\n    [] -> accu\n  | a::l -> f a (fold_right f l accu)\n\nlet rec map2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> let r = f a1 a2 in r :: map2 f l1 l2\n  | (_, _) -> invalid_arg \"List.map2\"\n\nlet rev_map2 f l1 l2 =\n  let rec rmap2_f accu l1 l2 =\n    match (l1, l2) with\n    | ([], []) -> accu\n    | (a1::l1, a2::l2) -> rmap2_f (f a1 a2 :: accu) l1 l2\n    | (_, _) -> invalid_arg \"List.rev_map2\"\n  in\n  rmap2_f [] l1 l2\n;;\n\nlet rec iter2 f l1 l2 =\n  match (l1, l2) with\n    ([], []) -> ()\n  | (a1::l1, a2::l2) -> f a1 a2; iter2 f l1 l2\n  | (_, _) -> invalid_arg \"List.iter2\"\n\nlet rec fold_left2 f accu l1 l2 =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> fold_left2 f (f accu a1 a2) l1 l2\n  | (_, _) -> invalid_arg \"List.fold_left2\"\n\nlet rec fold_right2 f l1 l2 accu =\n  match (l1, l2) with\n    ([], []) -> accu\n  | (a1::l1, a2::l2) -> f a1 a2 (fold_right2 f l1 l2 accu)\n  | (_, _) -> invalid_arg \"List.fold_right2\"\n\nlet rec for_all p = function\n    [] -> true\n  | a::l -> p a && for_all p l\n\nlet rec exists p = function\n    [] -> false\n  | a::l -> p a || exists p l\n\nlet rec for_all2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> true\n  | (a1::l1, a2::l2) -> p a1 a2 && for_all2 p l1 l2\n  | (_, _) -> invalid_arg \"List.for_all2\"\n\nlet rec exists2 p l1 l2 =\n  match (l1, l2) with\n    ([], []) -> false\n  | (a1::l1, a2::l2) -> p a1 a2 || exists2 p l1 l2\n  | (_, _) -> invalid_arg \"List.exists2\"\n\nlet rec mem x = function\n    [] -> false\n  | a::l -> compare a x = 0 || mem x l\n\nlet rec memq x = function\n    [] -> false\n  | a::l -> a == x || memq x l\n\nlet rec assoc x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if compare a x = 0 then b else assoc x l\n\nlet rec assq x = function\n    [] -> raise Not_found\n  | (a,b)::l -> if a == x then b else assq x l\n\nlet rec mem_assoc x = function\n  | [] -> false\n  | (a, b) :: l -> compare a x = 0 || mem_assoc x l\n\nlet rec mem_assq x = function\n  | [] -> false\n  | (a, b) :: l -> a == x || mem_assq x l\n\nlet rec remove_assoc x = function\n  | [] -> []\n  | (a, b as pair) :: l ->\n      if compare a x = 0 then l else pair :: remove_assoc x l\n\nlet rec remove_assq x = function\n  | [] -> []\n  | (a, b as pair) :: l -> if a == x then l else pair :: remove_assq x l\n\nlet rec find p = function\n  | [] -> raise Not_found\n  | x :: l -> if p x then x else find p l\n\nlet find_all p =\n  let rec find accu = function\n  | [] -> rev accu\n  | x :: l -> if p x then find (x :: accu) l else find accu l in\n  find []\n\nlet filter = find_all\n\nlet partition p l =\n  let rec part yes no = function\n  | [] -> (rev yes, rev no)\n  | x :: l -> if p x then part (x :: yes) no l else part yes (x :: no) l in\n  part [] [] l\n\nlet rec split = function\n    [] -> ([], [])\n  | (x,y)::l ->\n      let (rx, ry) = split l in (x::rx, y::ry)\n\nlet rec combine l1 l2 =\n  match (l1, l2) with\n    ([], []) -> []\n  | (a1::l1, a2::l2) -> (a1, a2) :: combine l1 l2\n  | (_, _) -> invalid_arg \"List.combine\"\n\n(** sorting *)\n\nlet rec merge cmp l1 l2 =\n  match l1, l2 with\n  | [], l2 -> l2\n  | l1, [] -> l1\n  | h1 :: t1, h2 :: t2 ->\n      if cmp h1 h2 <= 0\n      then h1 :: merge cmp t1 l2\n      else h2 :: merge cmp l1 t2\n;;\n\nlet rec chop k l =\n  if k = 0 then l else begin\n    match l with\n    | x::t -> chop (k-1) t\n    | _ -> assert false\n  end\n;;\n\nlet stable_sort cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 <= 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        if cmp h1 h2 > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 <= 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 <= 0 then begin\n         if cmp x2 x3 <= 0 then [x1; x2; x3]\n         else if cmp x1 x3 <= 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 <= 0 then [x2; x1; x3]\n         else if cmp x2 x3 <= 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       if cmp x1 x2 > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       if cmp x1 x2 > 0 then begin\n         if cmp x2 x3 > 0 then [x1; x2; x3]\n         else if cmp x1 x3 > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         if cmp x1 x3 > 0 then [x2; x1; x3]\n         else if cmp x2 x3 > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n;;\n\nlet sort = stable_sort;;\nlet fast_sort = stable_sort;;\n\n(* Note: on a list of length between about 100000 (depending on the minor\n   heap size and the type of the list) and Sys.max_array_size, it is\n   actually faster to use the following, but it might also use more memory\n   because the argument list cannot be deallocated incrementally.\n\n   Also, there seems to be a bug in this code or in the\n   implementation of obj_truncate.\n\nexternal obj_truncate : 'a array -> int -> unit = \"caml_obj_truncate\"\n\nlet array_to_list_in_place a =\n  let l = Array.length a in\n  let rec loop accu n p =\n    if p <= 0 then accu else begin\n      if p = n then begin\n        obj_truncate a p;\n        loop (a.(p-1) :: accu) (n-1000) (p-1)\n      end else begin\n        loop (a.(p-1) :: accu) n (p-1)\n      end\n    end\n  in\n  loop [] (l-1000) l\n;;\n\nlet stable_sort cmp l =\n  let a = Array.of_list l in\n  Array.stable_sort cmp a;\n  array_to_list_in_place a\n;;\n*)\n\n\n(** sorting + removing duplicates *)\n\nlet sort_uniq cmp l =\n  let rec rev_merge l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge t1 t2 (h1::accu)\n        else if c < 0\n        then rev_merge t1 l2 (h1::accu)\n        else rev_merge l1 t2 (h2::accu)\n  in\n  let rec rev_merge_rev l1 l2 accu =\n    match l1, l2 with\n    | [], l2 -> rev_append l2 accu\n    | l1, [] -> rev_append l1 accu\n    | h1::t1, h2::t2 ->\n        let c = cmp h1 h2 in\n        if c = 0 then rev_merge_rev t1 t2 (h1::accu)\n        else if c > 0\n        then rev_merge_rev t1 l2 (h1::accu)\n        else rev_merge_rev l1 t2 (h2::accu)\n  in\n  let rec sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c < 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c < 0 then [x2; x3] else [x3; x2]\n       end else if c < 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c < 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c < 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = rev_sort n1 l in\n       let s2 = rev_sort n2 l2 in\n       rev_merge_rev s1 s2 []\n  and rev_sort n l =\n    match n, l with\n    | 2, x1 :: x2 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then [x1]\n       else if c > 0 then [x1; x2] else [x2; x1]\n    | 3, x1 :: x2 :: x3 :: _ ->\n       let c = cmp x1 x2 in\n       if c = 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x2]\n         else if c > 0 then [x2; x3] else [x3; x2]\n       end else if c > 0 then begin\n         let c = cmp x2 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x2; x3]\n         else let c = cmp x1 x3 in\n         if c = 0 then [x1; x2]\n         else if c > 0 then [x1; x3; x2]\n         else [x3; x1; x2]\n       end else begin\n         let c = cmp x1 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x1; x3]\n         else let c = cmp x2 x3 in\n         if c = 0 then [x2; x1]\n         else if c > 0 then [x2; x3; x1]\n         else [x3; x2; x1]\n       end\n    | n, l ->\n       let n1 = n asr 1 in\n       let n2 = n - n1 in\n       let l2 = chop n1 l in\n       let s1 = sort n1 l in\n       let s2 = sort n2 l2 in\n       rev_merge s1 s2 []\n  in\n  let len = length l in\n  if len < 2 then l else sort len l\n;;\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Byte sequence operations *)\n\nexternal length : bytes -> int = \"%string_length\"\nexternal string_length : string -> int = \"%string_length\"\nexternal get : bytes -> int -> char = \"%string_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%string_safe_set\"\nexternal create : int -> bytes = \"caml_create_string\"\nexternal unsafe_get : bytes -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%string_unsafe_set\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_string\" \"noalloc\"\nexternal unsafe_to_string : bytes -> string = \"%identity\"\nexternal unsafe_of_string : string -> bytes = \"%identity\"\n\nexternal unsafe_blit : bytes -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" \"noalloc\"\nexternal unsafe_blit_string : string -> int -> bytes -> int -> int -> unit\n                     = \"caml_blit_string\" \"noalloc\"\n\nlet make n c =\n  let s = create n in\n  unsafe_fill s 0 n c;\n  s\n\nlet init n f =\n  let s = create n in\n  for i = 0 to n - 1 do\n    unsafe_set s i (f i)\n  done;\n  s\n\nlet empty = create 0;;\n\nlet copy s =\n  let len = length s in\n  let r = create len in\n  unsafe_blit s 0 r 0 len;\n  r\n\nlet to_string b = unsafe_to_string (copy b)\nlet of_string s = copy (unsafe_of_string s)\n\nlet sub s ofs len =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.sub / Bytes.sub\"\n  else begin\n    let r = create len in\n    unsafe_blit s ofs r 0 len;\n    r\n  end\n\nlet sub_string b ofs len = unsafe_to_string (sub b ofs len)\n\nlet extend s left right =\n  let len = length s + left + right in\n  let r = create len in\n  let (srcoff, dstoff) = if left < 0 then -left, 0 else 0, left in\n  let cpylen = min (length s - srcoff) (len - dstoff) in\n  if cpylen > 0 then unsafe_blit s srcoff r dstoff cpylen;\n  r\n\nlet fill s ofs len c =\n  if ofs < 0 || len < 0 || ofs > length s - len\n  then invalid_arg \"String.fill / Bytes.fill\"\n  else unsafe_fill s ofs len c\n\nlet blit s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"Bytes.blit\"\n  else unsafe_blit s1 ofs1 s2 ofs2 len\n\nlet blit_string s1 ofs1 s2 ofs2 len =\n  if len < 0 || ofs1 < 0 || ofs1 > string_length s1 - len\n             || ofs2 < 0 || ofs2 > length s2 - len\n  then invalid_arg \"String.blit / Bytes.blit_string\"\n  else unsafe_blit_string s1 ofs1 s2 ofs2 len\n\nlet iter f a =\n  for i = 0 to length a - 1 do f(unsafe_get a i) done\n\nlet iteri f a =\n  for i = 0 to length a - 1 do f i (unsafe_get a i) done\n\nlet concat sep l =\n  match l with\n    [] -> empty\n  | hd :: tl ->\n      let num = ref 0 and len = ref 0 in\n      List.iter (fun s -> incr num; len := !len + length s) l;\n      let r = create (!len + length sep * (!num - 1)) in\n      unsafe_blit hd 0 r 0 (length hd);\n      let pos = ref(length hd) in\n      List.iter\n        (fun s ->\n          unsafe_blit sep 0 r !pos (length sep);\n          pos := !pos + length sep;\n          unsafe_blit s 0 r !pos (length s);\n          pos := !pos + length s)\n        tl;\n      r\n\nlet cat s1 s2 =\n  let l1 = length s1 in\n  let l2 = length s2 in\n  let r = create (l1 + l2) in\n  unsafe_blit s1 0 r 0 l1;\n  unsafe_blit s2 0 r l1 l2;\n  r\n;;\n\nexternal is_printable: char -> bool = \"caml_is_printable\"\nexternal char_code: char -> int = \"%identity\"\nexternal char_chr: int -> char = \"%identity\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  let len = length s in\n  let i = ref 0 in\n  while !i < len && is_space (unsafe_get s !i) do\n    incr i\n  done;\n  let j = ref (len - 1) in\n  while !j >= !i && is_space (unsafe_get s !j) do\n    decr j\n  done;\n  if !j >= !i then\n    sub s !i (!j - !i + 1)\n  else\n    empty\n\nlet escaped s =\n  let n = ref 0 in\n  for i = 0 to length s - 1 do\n    n := !n +\n      (match unsafe_get s i with\n       | '\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> 2\n       | c -> if is_printable c then 1 else 4)\n  done;\n  if !n = length s then copy s else begin\n    let s' = create !n in\n    n := 0;\n    for i = 0 to length s - 1 do\n      begin match unsafe_get s i with\n      | ('\"' | '\\\\') as c ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n c\n      | '\\n' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'n'\n      | '\\t' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 't'\n      | '\\r' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'r'\n      | '\\b' ->\n          unsafe_set s' !n '\\\\'; incr n; unsafe_set s' !n 'b'\n      | c ->\n          if is_printable c then\n            unsafe_set s' !n c\n          else begin\n            let a = char_code c in\n            unsafe_set s' !n '\\\\';\n            incr n;\n            unsafe_set s' !n (char_chr (48 + a / 100));\n            incr n;\n            unsafe_set s' !n (char_chr (48 + (a / 10) mod 10));\n            incr n;\n            unsafe_set s' !n (char_chr (48 + a mod 10))\n          end\n      end;\n      incr n\n    done;\n    s'\n  end\n\nlet map f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f (unsafe_get s i)) done;\n    r\n  end\n\nlet mapi f s =\n  let l = length s in\n  if l = 0 then s else begin\n    let r = create l in\n    for i = 0 to l - 1 do unsafe_set r i (f i (unsafe_get s i)) done;\n    r\n  end\n\nlet uppercase s = map Char.uppercase s\nlet lowercase s = map Char.lowercase s\n\nlet apply1 f s =\n  if length s = 0 then s else begin\n    let r = copy s in\n    unsafe_set r 0 (f(unsafe_get s 0));\n    r\n  end\n\nlet capitalize s = apply1 Char.uppercase s\nlet uncapitalize s = apply1 Char.lowercase s\n\nlet rec index_rec s lim i c =\n  if i >= lim then raise Not_found else\n  if unsafe_get s i = c then i else index_rec s lim (i + 1) c;;\n\nlet index s c = index_rec s (length s) 0 c;;\n\nlet index_from s i c =\n  let l = length s in\n  if i < 0 || i > l then invalid_arg \"String.index_from / Bytes.index_from\" else\n  index_rec s l i c;;\n\nlet rec rindex_rec s i c =\n  if i < 0 then raise Not_found else\n  if unsafe_get s i = c then i else rindex_rec s (i - 1) c;;\n\nlet rindex s c = rindex_rec s (length s - 1) c;;\n\nlet rindex_from s i c =\n  if i < -1 || i >= length s then\n    invalid_arg \"String.rindex_from / Bytes.rindex_from\"\n  else\n    rindex_rec s i c\n;;\n\nlet contains_from s i c =\n  let l = length s in\n  if i < 0 || i > l then\n    invalid_arg \"String.contains_from / Bytes.contains_from\"\n  else\n    try ignore (index_rec s l i c); true with Not_found -> false\n;;\n\nlet contains s c = contains_from s 0 c;;\n\nlet rcontains_from s i c =\n  if i < 0 || i >= length s then\n    invalid_arg \"String.rcontains_from / Bytes.rcontains_from\"\n  else\n    try ignore (rindex_rec s i c); true with Not_found -> false\n;;\n\ntype t = bytes\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\n",
  "(* Padding position. *)\ntype padty =\n  | Left   (* Text is left justified ('-' option).               *)\n  | Right  (* Text is right justified (no '-' option).           *)\n  | Zeros  (* Text is right justified by zeros (see '0' option). *)\n\n(***)\n\n(* Integer conversion. *)\ntype int_conv =\n  | Int_d | Int_pd | Int_sd        (*  %d | %+d | % d  *)\n  | Int_i | Int_pi | Int_si        (*  %i | %+i | % i  *)\n  | Int_x | Int_Cx                 (*  %x | %#x        *)\n  | Int_X | Int_CX                 (*  %X | %#X        *)\n  | Int_o | Int_Co                 (*  %o | %#o        *)\n  | Int_u                          (*  %u              *)\n\n(* Float conversion. *)\ntype float_conv =\n  | Float_f | Float_pf | Float_sf  (*  %f | %+f | % f  *)\n  | Float_e | Float_pe | Float_se  (*  %e | %+e | % e  *)\n  | Float_E | Float_pE | Float_sE  (*  %E | %+E | % E  *)\n  | Float_g | Float_pg | Float_sg  (*  %g | %+g | % g  *)\n  | Float_G | Float_pG | Float_sG  (*  %G | %+G | % G  *)\n  | Float_F                        (*  %F              *)\n\n(***)\n\n(* Char sets (see %[...]) are bitmaps implemented as 32-char strings. *)\ntype char_set = string\n\n(***)\n\n(* Counter used in Scanf. *)\ntype counter =\n  | Line_counter     (*  %l      *)\n  | Char_counter     (*  %n      *)\n  | Token_counter    (*  %N, %L  *)\n\n(***)\n\n(* Padding of strings and numbers. *)\ntype ('a, 'b) padding =\n  (* No padding (ex: \"%d\") *)\n  | No_padding  : ('a, 'a) padding\n  (* Literal padding (ex: \"%8d\") *)\n  | Lit_padding : padty * int -> ('a, 'a) padding\n  (* Padding as extra argument (ex: \"%*d\") *)\n  | Arg_padding : padty -> (int -> 'a, 'a) padding\n\n(* Some formats, such as %_d,\n   only accept an optional number as padding option (no extra argument) *)\ntype pad_option = int option\n\n(* Precision of floats and '0'-padding of integers. *)\ntype ('a, 'b) precision =\n  (* No precision (ex: \"%f\") *)\n  | No_precision : ('a, 'a) precision\n  (* Literal precision (ex: \"%.3f\") *)\n  | Lit_precision : int -> ('a, 'a) precision\n  (* Precision as extra argument (ex: \"%.*f\") *)\n  | Arg_precision : (int -> 'a, 'a) precision\n\n(* Some formats, such as %_f,\n   only accept an optional number as precision option (no extra argument) *)\ntype prec_option = int option\n\n(* see the Custom format combinator *)\ntype ('a, 'b, 'c) custom_arity =\n  | Custom_zero : ('a, string, 'a) custom_arity\n  | Custom_succ : ('a, 'b, 'c) custom_arity ->\n    ('a, 'x -> 'b, 'x -> 'c) custom_arity\n\n(***)\n\n(*        Relational format types\n\nIn the first format+gadts implementation, the type for %(..%) in the\nfmt GADT was as follows:\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option * ('d1, 'q1, 'd2, 'q2) reader_nb_unifier *\n    ('x, 'b, 'c, 'd1, 'q1, 'u) fmtty *\n    ('u, 'b, 'c, 'q1, 'e1, 'f) fmt ->\n      (('x, 'b, 'c, 'd2, 'q2, 'u) format6 -> 'x, 'b, 'c, 'd1, 'e1, 'f) fmt\n\nNotice that the 'u parameter in 'f position in the format argument\n(('x, .., 'u) format6 -> ..) is equal to the 'u parameter in 'a\nposition in the format tail (('u, .., 'f) fmt). This means that the\ntype of the expected format parameter depends of where the %(...%)\nare in the format string:\n\n  # Printf.printf \"%(%)\";;\n  - : (unit, out_channel, unit, '_a, '_a, unit)\n      CamlinternalFormatBasics.format6 -> unit\n  = <fun>\n  # Printf.printf \"%(%)%d\";;\n  - : (int -> unit, out_channel, unit, '_a, '_a, int -> unit)\n      CamlinternalFormatBasics.format6 -> int -> unit\n  = <fun>\n\nOn the contrary, the legacy typer gives a clever type that does not\ndepend on the position of %(..%) in the format string. For example,\n%(%) will have the polymorphic type ('a, 'b, 'c, 'd, 'd, 'a): it can\nbe concatenated to any format type, and only enforces the constraint\nthat its 'a and 'f parameters are equal (no format arguments) and 'd\nand 'e are equal (no reader argument).\n\nThe weakening of this parameter type in the GADT version broke user\ncode (in fact it essentially made %(...%) unusable except at the last\nposition of a format). In particular, the following would not work\nanymore:\n\n  fun sep ->\n    Format.printf \"foo%(%)bar%(%)baz\" sep sep\n\nAs the type-checker would require two *incompatible* types for the %(%)\nin different positions.\n\nThe solution to regain a general type for %(..%) is to generalize this\ntechnique, not only on the 'd, 'e parameters, but on all six\nparameters of a format: we introduce a \"relational\" type\n  ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n   'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\nwhose values are proofs that ('a1, .., 'f1) and ('a2, .., 'f2) morally\ncorrespond to the same format type: 'a1 is obtained from 'f1,'b1,'c1\nin the exact same way that 'a2 is obtained from 'f2,'b2,'c2, etc.\n\nFor example, the relation between two format types beginning with a Char\nparameter is as follows:\n\n| Char_ty :                                                 (* %c  *)\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\nIn the general case, the term structure of fmtty_rel is (almost¹)\nisomorphic to the fmtty of the previous implementation: every\nconstructor is re-read with a binary, relational type, instead of the\nprevious unary typing. fmtty can then be re-defined as the diagonal of\nfmtty_rel:\n\n  type ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n       ('a, 'b, 'c, 'd, 'e, 'f,\n        'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\n\nOnce we have this fmtty_rel type in place, we can give the more\ngeneral type to %(...%):\n\n| Format_subst :                                           (* %(...%) *)\n    pad_option *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n    ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\nWe accept any format (('g, 'h, 'i, 'j, 'k, 'l) format6) (this is\ncompletely unrelated to the type of the current format), but also\nrequire a proof that this format is in relation to another format that\nis concatenable to the format tail. When executing a %(...%) format\n(in camlinternalFormat.ml:make_printf or scanf.ml:make_scanf), we\ntranstype the format along this relation using the 'recast' function\nto transpose between related format types.\n\n  val recast :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1) fmt\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmt\n\nNOTE ¹: the typing of Format_subst_ty requires not one format type, but\ntwo, one to establish the link between the format argument and the\nfirst six parameters, and the other for the link between the format\nargumant and the last six parameters.\n\n| Format_subst_ty :                                         (* %(...%) *)\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n    ('g, 'h, 'i, 'j, 'k, 'l,\n     'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n    ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n    (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n     ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\nWhen we generate a format AST, we generate exactly the same witness\nfor both relations, and the witness-conversion functions in\ncamlinternalFormat do rely on this invariant. For example, the\nfunction that proves that the relation is transitive\n\n  val trans :\n     ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  -> ('a2, 'b2, 'c2, 'd2, 'e2, 'f2,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n  -> ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n      'a3, 'b3, 'c3, 'd3, 'e3, 'f3) fmtty_rel\n\ndoes assume that the two input have exactly the same term structure\n(and is only every used for argument witnesses of the\nFormat_subst_ty constructor).\n*)\n\n(* Type of a block used by the Format pretty-printer. *)\ntype block_type =\n  | Pp_hbox   (* Horizontal block no line breaking *)\n  | Pp_vbox   (* Vertical block each break leads to a new line *)\n  | Pp_hvbox  (* Horizontal-vertical block: same as vbox, except if this block\n                 is small enough to fit on a single line *)\n  | Pp_hovbox (* Horizontal or Vertical block: breaks lead to new line\n                 only when necessary to print the content of the block *)\n  | Pp_box    (* Horizontal or Indent block: breaks lead to new line\n                 only when necessary to print the content of the block, or\n                 when it leads to a new indentation of the current line *)\n  | Pp_fits   (* Internal usage: when a block fits on a single line *)\n\n(* Formatting element used by the Format pretty-printter. *)\ntype formatting_lit =\n  | Close_box                                           (* @]   *)\n  | Close_tag                                           (* @}   *)\n  | Break of string * int * int          (* @, | @  | @; | @;<> *)\n  | FFlush                                              (* @?   *)\n  | Force_newline                                       (* @\\n  *)\n  | Flush_newline                                       (* @.   *)\n  | Magic_size of string * int                          (* @<n> *)\n  | Escaped_at                                          (* @@   *)\n  | Escaped_percent                                     (* @%%  *)\n  | Scan_indic of char                                  (* @X   *)\n\n(* Formatting element used by the Format pretty-printter. *)\ntype ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen =\n  | Open_tag : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @{   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n  | Open_box : ('a, 'b, 'c, 'd, 'e, 'f) format6 ->      (* @[   *)\n    ('a, 'b, 'c, 'd, 'e, 'f) formatting_gen\n\n(***)\n\n(* List of format type elements. *)\n(* In particular used to represent %(...%) and %{...%} contents. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmtty =\n     ('a, 'b, 'c, 'd, 'e, 'f,\n      'a, 'b, 'c, 'd, 'e, 'f) fmtty_rel\nand ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n     'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel =\n  | Char_ty :                                                 (* %c  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (char -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       char -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | String_ty :                                               (* %s  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (string -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       string -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int_ty :                                                  (* %d  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int32_ty :                                                (* %ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int32 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int32 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Nativeint_ty :                                            (* %nd *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (nativeint -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       nativeint -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Int64_ty :                                                (* %Ld *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (int64 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       int64 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Float_ty :                                                (* %f  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (float -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       float -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Bool_ty :                                                 (* %B  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (bool -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       bool -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  | Format_arg_ty :                                           (* %{...%} *)\n      ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Format_subst_ty :                                         (* %(...%) *)\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g1, 'b1, 'c1, 'j1, 'd1, 'a1) fmtty_rel *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b2, 'c2, 'j2, 'd2, 'a2) fmtty_rel *\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g1, 'b1, 'c1, 'j1, 'e1, 'f1,\n       ('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b2, 'c2, 'j2, 'e2, 'f2) fmtty_rel\n\n  (* Printf and Format specific constructors. *)\n  | Alpha_ty :                                                (* %a  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'x -> 'c1) -> 'x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'x -> 'c2) -> 'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Theta_ty :                                                (* %t  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      (('b1 -> 'c1) -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       ('b2 -> 'c2) -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n  | Any_ty :                                                  (* Used for custom formats *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel\n\n  (* Scanf specific constructor. *)\n  | Reader_ty :                                               (* %r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('x -> 'a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'x -> 'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n  | Ignored_reader_ty :                                       (* %_r  *)\n      ('a1, 'b1, 'c1, 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, 'd2, 'e2, 'f2) fmtty_rel ->\n      ('a1, 'b1, 'c1, ('b1 -> 'x) -> 'd1, 'e1, 'f1,\n       'a2, 'b2, 'c2, ('b2 -> 'x) -> 'd2, 'e2, 'f2) fmtty_rel\n\n  | End_of_fmtty :\n      ('f1, 'b1, 'c1, 'd1, 'd1, 'f1,\n       'f2, 'b2, 'c2, 'd2, 'd2, 'f2) fmtty_rel\n\n(***)\n\n(* List of format elements. *)\nand ('a, 'b, 'c, 'd, 'e, 'f) fmt =\n  | Char :                                                   (* %c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_char :                                              (* %C *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | String :                                                 (* %s *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Caml_string :                                            (* %S *)\n      ('x, string -> 'a) padding * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int :                                                    (* %[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int32 :                                                  (* %l[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int32 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Nativeint :                                              (* %n[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, nativeint -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Int64 :                                                  (* %L[dixXuo] *)\n      int_conv * ('x, 'y) padding * ('y, int64 -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Float :                                                  (* %[feEgGF] *)\n      float_conv * ('x, 'y) padding * ('y, float -> 'a) precision *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x, 'b, 'c, 'd, 'e, 'f) fmt\n  | Bool :                                                   (* %[bB] *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (bool -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Flush :                                                  (* %! *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | String_literal :                                         (* abc *)\n      string * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Char_literal :                                           (* x *)\n      char * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  | Format_arg :                                             (* %{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Format_subst :                                           (* %(...%) *)\n      pad_option *\n      ('g, 'h, 'i, 'j, 'k, 'l,\n       'g2, 'b, 'c, 'j2, 'd, 'a) fmtty_rel *\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (('g, 'h, 'i, 'j, 'k, 'l) format6 -> 'g2, 'b, 'c, 'j2, 'e, 'f) fmt\n\n  (* Printf and Format specific constructor. *)\n  | Alpha :                                                  (* %a *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'x -> 'c) -> 'x -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Theta :                                                  (* %t *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (('b -> 'c) -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Format specific constructor: *)\n  | Formatting_lit :                                         (* @_ *)\n      formatting_lit * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Formatting_gen :                                             (* @_ *)\n      ('a1, 'b, 'c, 'd1, 'e1, 'f1) formatting_gen *\n      ('f1, 'b, 'c, 'e1, 'e2, 'f2) fmt -> ('a1, 'b, 'c, 'd1, 'e2, 'f2) fmt\n\n  (* Scanf specific constructors: *)\n  | Reader :                                                 (* %r *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        ('x -> 'a, 'b, 'c, ('b -> 'x) -> 'd, 'e, 'f) fmt\n  | Scan_char_set :                                          (* %[...] *)\n      pad_option * char_set * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (string -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_get_counter :                                       (* %[nlNL] *)\n      counter * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n        (int -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Scan_next_char :                                         (* %0c *)\n      ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      (char -> 'a, 'b, 'c, 'd, 'e, 'f) fmt\n  | Ignored_param :                                          (* %_ *)\n      ('a, 'b, 'c, 'd, 'y, 'x) ignored * ('x, 'b, 'c, 'y, 'e, 'f) fmt ->\n        ('a, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* Custom printing format (PR#6452, GPR#140)\n\n     We include a type Custom of \"custom converters\", where an\n     arbitrary function can be used to convert one or more\n     arguments. There is no syntax for custom converters, it is only\n     inteded for custom processors that wish to rely on the\n     stdlib-defined format GADTs.\n\n     For instance a pre-processor could choose to interpret strings\n     prefixed with [\"!\"] as format strings where [%{{ ... }}] is\n     a special form to pass a to_string function, so that one could\n     write:\n\n     {[\n       type t = { x : int; y : int }\n\n       let string_of_t t = Printf.sprintf \"{ x = %d; y = %d }\" t.x t.y\n\n       Printf.printf !\"t = %{{string_of_t}}\" { x = 42; y = 42 }\n     ]}\n  *)\n  | Custom :\n      ('a, 'x, 'y) custom_arity * (unit -> 'x) * ('a, 'b, 'c, 'd, 'e, 'f) fmt ->\n      ('y, 'b, 'c, 'd, 'e, 'f) fmt\n\n  (* end of a format specification *)\n  | End_of_format :\n        ('f, 'b, 'c, 'e, 'e, 'f) fmt\n\n(***)\n\n(* Type for ignored parameters (see \"%_\"). *)\nand ('a, 'b, 'c, 'd, 'e, 'f) ignored =\n  | Ignored_char :                                           (* %_c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_char :                                      (* %_C *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_string :                                         (* %_s *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_caml_string :                                    (* %_S *)\n      pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int :                                            (* %_d *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int32 :                                          (* %_ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_nativeint :                                      (* %_nd *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_int64 :                                          (* %_Ld *)\n      int_conv * pad_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_float :                                          (* %_f *)\n      pad_option * prec_option -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_bool :                                           (* %_B *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_arg :                                     (* %_{...%} *)\n      pad_option * ('g, 'h, 'i, 'j, 'k, 'l) fmtty ->\n        ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_format_subst :                                   (* %_(...%) *)\n      pad_option * ('a, 'b, 'c, 'd, 'e, 'f) fmtty ->\n        ('a, 'b, 'c, 'd, 'e, 'f) ignored\n  | Ignored_reader :                                         (* %_r *)\n      ('a, 'b, 'c, ('b -> 'x) -> 'd, 'd, 'a) ignored\n  | Ignored_scan_char_set :                                  (* %_[...] *)\n      pad_option * char_set -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_get_counter :                               (* %_[nlNL] *)\n      counter -> ('a, 'b, 'c, 'd, 'd, 'a) ignored\n  | Ignored_scan_next_char :                                 (* %_0c *)\n      ('a, 'b, 'c, 'd, 'd, 'a) ignored\n\nand ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  Format of ('a, 'b, 'c, 'd, 'e, 'f) fmt * string\n\nlet rec erase_rel : type a b c d e f g h i j k l .\n  (a, b, c, d, e, f,\n   g, h, i, j, k, l) fmtty_rel -> (a, b, c, d, e, f) fmtty\n= function\n  | Char_ty rest ->\n    Char_ty (erase_rel rest)\n  | String_ty rest ->\n    String_ty (erase_rel rest)\n  | Int_ty rest ->\n    Int_ty (erase_rel rest)\n  | Int32_ty rest ->\n    Int32_ty (erase_rel rest)\n  | Int64_ty rest ->\n    Int64_ty (erase_rel rest)\n  | Nativeint_ty rest ->\n    Nativeint_ty (erase_rel rest)\n  | Float_ty rest ->\n    Float_ty (erase_rel rest)\n  | Bool_ty rest ->\n    Bool_ty (erase_rel rest)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, erase_rel rest)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty1, erase_rel rest)\n  | Alpha_ty rest ->\n    Alpha_ty (erase_rel rest)\n  | Theta_ty rest ->\n    Theta_ty (erase_rel rest)\n  | Any_ty rest ->\n    Any_ty (erase_rel rest)\n  | Reader_ty rest ->\n    Reader_ty (erase_rel rest)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (erase_rel rest)\n  | End_of_fmtty -> End_of_fmtty\n\n(******************************************************************************)\n                         (* Format type concatenation *)\n\n(* Concatenate two format types. *)\n(* Used by:\n   * reader_nb_unifier_of_fmtty to count readers in an fmtty,\n   * Scanf.take_fmtty_format_readers to extract readers inside %(...%),\n   * CamlinternalFormat.fmtty_of_ignored_format to extract format type. *)\n\n(*\nlet rec concat_fmtty : type a b c d e f g h .\n    (a, b, c, d, e, f) fmtty ->\n    (f, b, c, e, g, h) fmtty ->\n    (a, b, c, d, g, h) fmtty =\n*)\nlet rec concat_fmtty :\n  type a1 b1 c1 d1 e1 f1\n       a2 b2 c2 d2 e2 f2\n       g1 j1 g2 j2\n  .\n    (g1, b1, c1, j1, d1, a1,\n     g2, b2, c2, j2, d2, a2) fmtty_rel ->\n    (a1, b1, c1, d1, e1, f1,\n     a2, b2, c2, d2, e2, f2) fmtty_rel ->\n    (g1, b1, c1, j1, e1, f1,\n     g2, b2, c2, j2, e2, f2) fmtty_rel =\nfun fmtty1 fmtty2 -> match fmtty1 with\n  | Char_ty rest ->\n    Char_ty (concat_fmtty rest fmtty2)\n  | String_ty rest ->\n    String_ty (concat_fmtty rest fmtty2)\n  | Int_ty rest ->\n    Int_ty (concat_fmtty rest fmtty2)\n  | Int32_ty rest ->\n    Int32_ty (concat_fmtty rest fmtty2)\n  | Nativeint_ty rest ->\n    Nativeint_ty (concat_fmtty rest fmtty2)\n  | Int64_ty rest ->\n    Int64_ty (concat_fmtty rest fmtty2)\n  | Float_ty rest ->\n    Float_ty (concat_fmtty rest fmtty2)\n  | Bool_ty rest ->\n    Bool_ty (concat_fmtty rest fmtty2)\n  | Alpha_ty rest ->\n    Alpha_ty (concat_fmtty rest fmtty2)\n  | Theta_ty rest ->\n    Theta_ty (concat_fmtty rest fmtty2)\n  | Any_ty rest ->\n    Any_ty (concat_fmtty rest fmtty2)\n  | Reader_ty rest ->\n    Reader_ty (concat_fmtty rest fmtty2)\n  | Ignored_reader_ty rest ->\n    Ignored_reader_ty (concat_fmtty rest fmtty2)\n  | Format_arg_ty (ty, rest) ->\n    Format_arg_ty (ty, concat_fmtty rest fmtty2)\n  | Format_subst_ty (ty1, ty2, rest) ->\n    Format_subst_ty (ty1, ty2, concat_fmtty rest fmtty2)\n  | End_of_fmtty -> fmtty2\n\n(******************************************************************************)\n                           (* Format concatenation *)\n\n(* Concatenate two formats. *)\nlet rec concat_fmt : type a b c d e f g h .\n    (a, b, c, d, e, f) fmt ->\n    (f, b, c, e, g, h) fmt ->\n    (a, b, c, d, g, h) fmt =\nfun fmt1 fmt2 -> match fmt1 with\n  | String (pad, rest) ->\n    String (pad, concat_fmt rest fmt2)\n  | Caml_string (pad, rest) ->\n    Caml_string (pad, concat_fmt rest fmt2)\n\n  | Int (iconv, pad, prec, rest) ->\n    Int (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int32 (iconv, pad, prec, rest) ->\n    Int32 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Nativeint (iconv, pad, prec, rest) ->\n    Nativeint (iconv, pad, prec, concat_fmt rest fmt2)\n  | Int64 (iconv, pad, prec, rest) ->\n    Int64 (iconv, pad, prec, concat_fmt rest fmt2)\n  | Float (fconv, pad, prec, rest) ->\n    Float (fconv, pad, prec, concat_fmt rest fmt2)\n\n  | Char (rest) ->\n    Char (concat_fmt rest fmt2)\n  | Caml_char rest ->\n    Caml_char (concat_fmt rest fmt2)\n  | Bool rest ->\n    Bool (concat_fmt rest fmt2)\n  | Alpha rest ->\n    Alpha (concat_fmt rest fmt2)\n  | Theta rest ->\n    Theta (concat_fmt rest fmt2)\n  | Custom (arity, f, rest) ->\n    Custom (arity, f, concat_fmt rest fmt2)\n  | Reader rest ->\n    Reader (concat_fmt rest fmt2)\n  | Flush rest ->\n    Flush (concat_fmt rest fmt2)\n\n  | String_literal (str, rest) ->\n    String_literal (str, concat_fmt rest fmt2)\n  | Char_literal (chr, rest) ->\n    Char_literal   (chr, concat_fmt rest fmt2)\n\n  | Format_arg (pad, fmtty, rest) ->\n    Format_arg   (pad, fmtty, concat_fmt rest fmt2)\n  | Format_subst (pad, fmtty, rest) ->\n    Format_subst (pad, fmtty, concat_fmt rest fmt2)\n\n  | Scan_char_set (width_opt, char_set, rest) ->\n    Scan_char_set (width_opt, char_set, concat_fmt rest fmt2)\n  | Scan_get_counter (counter, rest) ->\n    Scan_get_counter (counter, concat_fmt rest fmt2)\n  | Scan_next_char (rest) ->\n    Scan_next_char (concat_fmt rest fmt2)\n  | Ignored_param (ign, rest) ->\n    Ignored_param (ign, concat_fmt rest fmt2)\n\n  | Formatting_lit (fmting_lit, rest) ->\n    Formatting_lit (fmting_lit, concat_fmt rest fmt2)\n  | Formatting_gen (fmting_gen, rest) ->\n    Formatting_gen (fmting_gen, concat_fmt rest fmt2)\n\n  | End_of_format ->\n    fmt2\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*          Damien Doligez, projet Gallium, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 2014 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* String operations, based on byte sequence operations *)\n\nexternal length : string -> int = \"%string_length\"\nexternal get : string -> int -> char = \"%string_safe_get\"\nexternal set : bytes -> int -> char -> unit = \"%string_safe_set\"\nexternal create : int -> bytes = \"caml_create_string\"\nexternal unsafe_get : string -> int -> char = \"%string_unsafe_get\"\nexternal unsafe_set : bytes -> int -> char -> unit = \"%string_unsafe_set\"\nexternal unsafe_blit : string -> int ->  bytes -> int -> int -> unit\n                     = \"caml_blit_string\" \"noalloc\"\nexternal unsafe_fill : bytes -> int -> int -> char -> unit\n                     = \"caml_fill_string\" \"noalloc\"\n\nmodule B = Bytes\n\nlet bts = B.unsafe_to_string\nlet bos = B.unsafe_of_string\n\nlet make n c =\n  B.make n c |> bts\nlet init n f =\n  B.init n f |> bts\nlet copy s =\n  B.copy (bos s) |> bts\nlet sub s ofs len =\n  B.sub (bos s) ofs len |> bts\nlet fill =\n  B.fill\nlet blit =\n  B.blit_string\n\nlet concat sep l =\n  match l with\n  | [] -> \"\"\n  | hd :: tl ->\n      let num = ref 0 and len = ref 0 in\n      List.iter (fun s -> incr num; len := !len + length s) l;\n      let r = B.create (!len + length sep * (!num - 1)) in\n      unsafe_blit hd 0 r 0 (length hd);\n      let pos = ref(length hd) in\n      List.iter\n        (fun s ->\n          unsafe_blit sep 0 r !pos (length sep);\n          pos := !pos + length sep;\n          unsafe_blit s 0 r !pos (length s);\n          pos := !pos + length s)\n        tl;\n      Bytes.unsafe_to_string r\n\nlet iter f s =\n  B.iter f (bos s)\nlet iteri f s =\n  B.iteri f (bos s)\nlet map f s =\n  B.map f (bos s) |> bts\nlet mapi f s =\n  B.mapi f (bos s) |> bts\n\n(* Beware: we cannot use B.trim or B.escape because they always make a\n   copy, but String.mli spells out some cases where we are not allowed\n   to make a copy. *)\n\nexternal is_printable: char -> bool = \"caml_is_printable\"\n\nlet is_space = function\n  | ' ' | '\\012' | '\\n' | '\\r' | '\\t' -> true\n  | _ -> false\n\nlet trim s =\n  if s = \"\" then s\n  else if is_space (unsafe_get s 0) || is_space (unsafe_get s (length s - 1))\n    then bts (B.trim (bos s))\n  else s\n\nlet escaped s =\n  let rec needs_escape i =\n    if i >= length s then false else\n      match unsafe_get s i with\n      | '\"' | '\\\\' | '\\n' | '\\t' | '\\r' | '\\b' -> true\n      | c when is_printable c -> needs_escape (i+1)\n      | _ -> true\n  in\n  if needs_escape 0 then\n    bts (B.escaped (bos s))\n  else\n    s\n\nlet index s c =\n  B.index (bos s) c\nlet rindex s c =\n  B.rindex (bos s) c\nlet index_from s i c=\n  B.index_from (bos s) i c\nlet rindex_from s i c =\n  B.rindex_from (bos s) i c\nlet contains s c =\n  B.contains (bos s) c\nlet contains_from s i c =\n  B.contains_from (bos s) i c\nlet rcontains_from s i c =\n  B.rcontains_from (bos s) i c\nlet uppercase s =\n  B.uppercase (bos s) |> bts\nlet lowercase s =\n  B.lowercase (bos s) |> bts\nlet capitalize s =\n  B.capitalize (bos s) |> bts\nlet uncapitalize s =\n  B.uncapitalize (bos s) |> bts\n\ntype t = string\n\nlet compare (x: t) (y: t) = Pervasives.compare x y\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* WARNING: sys.ml is generated from sys.mlp.  DO NOT EDIT sys.ml or\n   your changes will be lost.\n*)\n\n(* System interface *)\n\nexternal get_config: unit -> string * int * bool = \"caml_sys_get_config\"\nexternal get_argv: unit -> string * string array = \"caml_sys_get_argv\"\nexternal big_endian : unit -> bool = \"%big_endian\"\nexternal word_size : unit -> int = \"%word_size\"\nexternal unix : unit -> bool = \"%ostype_unix\"\nexternal win32 : unit -> bool = \"%ostype_win32\"\nexternal cygwin : unit -> bool = \"%ostype_cygwin\"\n\nlet (executable_name, argv) = get_argv()\nlet (os_type, _, _) = get_config()\nlet big_endian = big_endian ()\nlet word_size = word_size ()\nlet unix = unix ()\nlet win32 = win32 ()\nlet cygwin = cygwin ()\nlet max_array_length = (1 lsl (word_size - 10)) - 1;;\nlet max_string_length = word_size / 8 * max_array_length - 1;;\n\nexternal file_exists: string -> bool = \"caml_sys_file_exists\"\nexternal is_directory : string -> bool = \"caml_sys_is_directory\"\nexternal remove: string -> unit = \"caml_sys_remove\"\nexternal rename : string -> string -> unit = \"caml_sys_rename\"\nexternal getenv: string -> string = \"caml_sys_getenv\"\nexternal command: string -> int = \"caml_sys_system_command\"\nexternal time: unit -> float = \"caml_sys_time\"\nexternal chdir: string -> unit = \"caml_sys_chdir\"\nexternal getcwd: unit -> string = \"caml_sys_getcwd\"\nexternal readdir : string -> string array = \"caml_sys_read_directory\"\n\nlet interactive = ref false\n\ntype signal_behavior =\n    Signal_default\n  | Signal_ignore\n  | Signal_handle of (int -> unit)\n\nexternal signal : int -> signal_behavior -> signal_behavior\n                = \"caml_install_signal_handler\"\n\nlet set_signal sig_num sig_beh = ignore(signal sig_num sig_beh)\n\nlet sigabrt = -1\nlet sigalrm = -2\nlet sigfpe = -3\nlet sighup = -4\nlet sigill = -5\nlet sigint = -6\nlet sigkill = -7\nlet sigpipe = -8\nlet sigquit = -9\nlet sigsegv = -10\nlet sigterm = -11\nlet sigusr1 = -12\nlet sigusr2 = -13\nlet sigchld = -14\nlet sigcont = -15\nlet sigstop = -16\nlet sigtstp = -17\nlet sigttin = -18\nlet sigttou = -19\nlet sigvtalrm = -20\nlet sigprof = -21\n\nexception Break\n\nlet catch_break on =\n  if on then\n    set_signal sigint (Signal_handle(fun _ -> raise Break))\n  else\n    set_signal sigint Signal_default\n\n\n(* The version string is found in file ../VERSION *)\n\nlet ocaml_version = \"4.02.3\";;\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Damien Doligez, projet Para, INRIA Rocquencourt          *)\n(*                                                                     *)\n(*  Copyright 1997 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Internals of forcing lazy values. *)\n\nexception Undefined;;\n\nlet raise_undefined = Obj.repr (fun () -> raise Undefined);;\n\n(* Assume [blk] is a block with tag lazy *)\nlet force_lazy_block (blk : 'arg lazy_t) =\n  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in\n  Obj.set_field (Obj.repr blk) 0 raise_undefined;\n  try\n    let result = closure () in\n    (* do set_field BEFORE set_tag *)\n    Obj.set_field (Obj.repr blk) 0 (Obj.repr result);\n    Obj.set_tag (Obj.repr blk) Obj.forward_tag;\n    result\n  with e ->\n    Obj.set_field (Obj.repr blk) 0 (Obj.repr (fun () -> raise e));\n    raise e\n;;\n\n(* Assume [blk] is a block with tag lazy *)\nlet force_val_lazy_block (blk : 'arg lazy_t) =\n  let closure = (Obj.obj (Obj.field (Obj.repr blk) 0) : unit -> 'arg) in\n  Obj.set_field (Obj.repr blk) 0 raise_undefined;\n  let result = closure () in\n  (* do set_field BEFORE set_tag *)\n  Obj.set_field (Obj.repr blk) 0 (Obj.repr result);\n  Obj.set_tag (Obj.repr blk) (Obj.forward_tag);\n  result\n;;\n\n(* [force] is not used, since [Lazy.force] is declared as a primitive\n   whose code inlines the tag tests of its argument.  This function is\n   here for the sake of completeness, and for debugging purpose. *)\n\nlet force (lzv : 'arg lazy_t) =\n  let x = Obj.repr lzv in\n  let t = Obj.tag x in\n  if t = Obj.forward_tag then (Obj.obj (Obj.field x 0) : 'arg) else\n  if t <> Obj.lazy_tag then (Obj.obj x : 'arg)\n  else force_lazy_block lzv\n;;\n\nlet force_val (lzv : 'arg lazy_t) =\n  let x = Obj.repr lzv in\n  let t = Obj.tag x in\n  if t = Obj.forward_tag then (Obj.obj (Obj.field x 0) : 'arg) else\n  if t <> Obj.lazy_tag then (Obj.obj x : 'arg)\n  else force_val_lazy_block lzv\n;;\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*   Pierre Weis and Xavier Leroy, projet Cristal, INRIA Rocquencourt  *)\n(*                                                                     *)\n(*  Copyright 1999 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Extensible buffers *)\n\ntype t =\n {mutable buffer : bytes;\n  mutable position : int;\n  mutable length : int;\n  initial_buffer : bytes}\n\nlet create n =\n let n = if n < 1 then 1 else n in\n let n = if n > Sys.max_string_length then Sys.max_string_length else n in\n let s = Bytes.create n in\n {buffer = s; position = 0; length = n; initial_buffer = s}\n\nlet contents b = Bytes.sub_string b.buffer 0 b.position\nlet to_bytes b = Bytes.sub b.buffer 0 b.position\n\nlet sub b ofs len =\n  if ofs < 0 || len < 0 || ofs > b.position - len\n  then invalid_arg \"Buffer.sub\"\n  else Bytes.sub_string b.buffer ofs len\n;;\n\nlet blit src srcoff dst dstoff len =\n  if len < 0 || srcoff < 0 || srcoff > src.position - len\n             || dstoff < 0 || dstoff > (Bytes.length dst) - len\n  then invalid_arg \"Buffer.blit\"\n  else\n    Bytes.blit src.buffer srcoff dst dstoff len\n;;\n\nlet nth b ofs =\n  if ofs < 0 || ofs >= b.position then\n   invalid_arg \"Buffer.nth\"\n  else Bytes.unsafe_get b.buffer ofs\n;;\n\nlet length b = b.position\n\nlet clear b = b.position <- 0\n\nlet reset b =\n  b.position <- 0; b.buffer <- b.initial_buffer;\n  b.length <- Bytes.length b.buffer\n\nlet resize b more =\n  let len = b.length in\n  let new_len = ref len in\n  while b.position + more > !new_len do new_len := 2 * !new_len done;\n  if !new_len > Sys.max_string_length then begin\n    if b.position + more <= Sys.max_string_length\n    then new_len := Sys.max_string_length\n    else failwith \"Buffer.add: cannot grow buffer\"\n  end;\n  let new_buffer = Bytes.create !new_len in\n  Bytes.blit b.buffer 0 new_buffer 0 b.position;\n  b.buffer <- new_buffer;\n  b.length <- !new_len\n\nlet add_char b c =\n  let pos = b.position in\n  if pos >= b.length then resize b 1;\n  Bytes.unsafe_set b.buffer pos c;\n  b.position <- pos + 1\n\nlet add_substring b s offset len =\n  if offset < 0 || len < 0 || offset + len > String.length s\n  then invalid_arg \"Buffer.add_substring/add_subbytes\";\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s offset b.buffer b.position len;\n  b.position <- new_position\n\nlet add_subbytes b s offset len =\n  add_substring b (Bytes.unsafe_to_string s) offset len\n\nlet add_string b s =\n  let len = String.length s in\n  let new_position = b.position + len in\n  if new_position > b.length then resize b len;\n  Bytes.blit_string s 0 b.buffer b.position len;\n  b.position <- new_position\n\nlet add_bytes b s = add_string b (Bytes.unsafe_to_string s)\n\nlet add_buffer b bs =\n  add_subbytes b bs.buffer 0 bs.position\n\nlet add_channel b ic len =\n  if len < 0 || len > Sys.max_string_length then   (* PR#5004 *)\n    invalid_arg \"Buffer.add_channel\";\n  if b.position + len > b.length then resize b len;\n  really_input ic b.buffer b.position len;\n  b.position <- b.position + len\n\nlet output_buffer oc b =\n  output oc b.buffer 0 b.position\n\nlet closing = function\n  | '(' -> ')'\n  | '{' -> '}'\n  | _ -> assert false;;\n\n(* opening and closing: open and close characters, typically ( and )\n   k: balance of opening and closing chars\n   s: the string where we are searching\n   start: the index where we start the search. *)\nlet advance_to_closing opening closing k s start =\n  let rec advance k i lim =\n    if i >= lim then raise Not_found else\n    if s.[i] = opening then advance (k + 1) (i + 1) lim else\n    if s.[i] = closing then\n      if k = 0 then i else advance (k - 1) (i + 1) lim\n    else advance k (i + 1) lim in\n  advance k start (String.length s);;\n\nlet advance_to_non_alpha s start =\n  let rec advance i lim =\n    if i >= lim then lim else\n    match s.[i] with\n    | 'a' .. 'z' | 'A' .. 'Z' | '0' .. '9' | '_' -> advance (i + 1) lim\n    | _ -> i in\n  advance start (String.length s);;\n\n(* We are just at the beginning of an ident in s, starting at start. *)\nlet find_ident s start lim =\n  if start >= lim then raise Not_found else\n  match s.[start] with\n  (* Parenthesized ident ? *)\n  | '(' | '{' as c ->\n     let new_start = start + 1 in\n     let stop = advance_to_closing c (closing c) 0 s new_start in\n     String.sub s new_start (stop - start - 1), stop + 1\n  (* Regular ident *)\n  | _ ->\n     let stop = advance_to_non_alpha s (start + 1) in\n     String.sub s start (stop - start), stop;;\n\n(* Substitute $ident, $(ident), or ${ident} in s,\n    according to the function mapping f. *)\nlet add_substitute b f s =\n  let lim = String.length s in\n  let rec subst previous i =\n    if i < lim then begin\n      match s.[i] with\n      | '$' as current when previous = '\\\\' ->\n         add_char b current;\n         subst ' ' (i + 1)\n      | '$' ->\n         let j = i + 1 in\n         let ident, next_i = find_ident s j lim in\n         add_string b (f ident);\n         subst ' ' next_i\n      | current when previous == '\\\\' ->\n         add_char b '\\\\';\n         add_char b current;\n         subst ' ' (i + 1)\n      | '\\\\' as current ->\n         subst current (i + 1)\n      | current ->\n         add_char b current;\n         subst current (i + 1)\n    end else\n    if previous = '\\\\' then add_char b previous in\n  subst ' ' 0;;\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\nopen Printf;;\n\nlet printers = ref []\n\nlet locfmt = format_of_string \"File \\\"%s\\\", line %d, characters %d-%d: %s\";;\n\nlet field x i =\n  let f = Obj.field x i in\n  if not (Obj.is_block f) then\n    sprintf \"%d\" (Obj.magic f : int)           (* can also be a char *)\n  else if Obj.tag f = Obj.string_tag then\n    sprintf \"%S\" (Obj.magic f : string)\n  else if Obj.tag f = Obj.double_tag then\n    string_of_float (Obj.magic f : float)\n  else\n    \"_\"\n;;\nlet rec other_fields x i =\n  if i >= Obj.size x then \"\"\n  else sprintf \", %s%s\" (field x i) (other_fields x (i+1))\n;;\nlet fields x =\n  match Obj.size x with\n  | 0 -> \"\"\n  | 1 -> \"\"\n  | 2 -> sprintf \"(%s)\" (field x 1)\n  | n -> sprintf \"(%s%s)\" (field x 1) (other_fields x 2)\n;;\n\nlet to_string x =\n  let rec conv = function\n    | hd :: tl ->\n        (match try hd x with _ -> None with\n        | Some s -> s\n        | None -> conv tl)\n    | [] ->\n        match x with\n        | Out_of_memory -> \"Out of memory\"\n        | Stack_overflow -> \"Stack overflow\"\n        | Match_failure(file, line, char) ->\n            sprintf locfmt file line char (char+5) \"Pattern matching failed\"\n        | Assert_failure(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Assertion failed\"\n        | Undefined_recursive_module(file, line, char) ->\n            sprintf locfmt file line char (char+6) \"Undefined recursive module\"\n        | _ ->\n            let x = Obj.repr x in\n            if Obj.tag x <> 0 then\n              (Obj.magic (Obj.field x 0) : string)\n            else\n              let constructor =\n                (Obj.magic (Obj.field (Obj.field x 0) 0) : string) in\n              constructor ^ (fields x) in\n  conv !printers\n\nlet print fct arg =\n  try\n    fct arg\n  with x ->\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    flush stderr;\n    raise x\n\nlet catch fct arg =\n  try\n    fct arg\n  with x ->\n    flush stdout;\n    eprintf \"Uncaught exception: %s\\n\" (to_string x);\n    exit 2\n\ntype raw_backtrace_slot\ntype raw_backtrace = raw_backtrace_slot array\n\nexternal get_raw_backtrace:\n  unit -> raw_backtrace = \"caml_get_exception_raw_backtrace\"\n\ntype backtrace_slot =\n  | Known_location of bool   (* is_raise *)\n                    * string (* filename *)\n                    * int    (* line number *)\n                    * int    (* start char *)\n                    * int    (* end char *)\n  | Unknown_location of bool (*is_raise*)\n\n(* to avoid warning *)\nlet _ = [Known_location (false, \"\", 0, 0, 0); Unknown_location false]\n\nexternal convert_raw_backtrace_slot:\n  raw_backtrace_slot -> backtrace_slot = \"caml_convert_raw_backtrace_slot\"\n\nlet convert_raw_backtrace rbckt =\n  try Some (Array.map convert_raw_backtrace_slot rbckt)\n  with Failure _ -> None\n\nlet format_backtrace_slot pos slot =\n  let info is_raise =\n    if is_raise then\n      if pos = 0 then \"Raised at\" else \"Re-raised at\"\n    else\n      if pos = 0 then \"Raised by primitive operation at\" else \"Called from\"\n  in\n  match slot with\n  | Unknown_location true -> (* compiler-inserted re-raise, skipped *) None\n  | Unknown_location false ->\n      Some (sprintf \"%s unknown location\" (info false))\n  | Known_location(is_raise, filename, lineno, startchar, endchar) ->\n      Some (sprintf \"%s file \\\"%s\\\", line %d, characters %d-%d\"\n              (info is_raise) filename lineno startchar endchar)\n\nlet print_exception_backtrace outchan backtrace =\n  match backtrace with\n  | None ->\n      fprintf outchan\n        \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> fprintf outchan \"%s\\n\" str\n      done\n\nlet print_raw_backtrace outchan raw_backtrace =\n  print_exception_backtrace outchan (convert_raw_backtrace raw_backtrace)\n\n(* confusingly named: prints the global current backtrace *)\nlet print_backtrace outchan =\n  print_raw_backtrace outchan (get_raw_backtrace ())\n\nlet backtrace_to_string backtrace =\n  match backtrace with\n  | None ->\n     \"(Program not linked with -g, cannot print stack backtrace)\\n\"\n  | Some a ->\n      let b = Buffer.create 1024 in\n      for i = 0 to Array.length a - 1 do\n        match format_backtrace_slot i a.(i) with\n          | None -> ()\n          | Some str -> bprintf b \"%s\\n\" str\n      done;\n      Buffer.contents b\n\nlet raw_backtrace_to_string raw_backtrace =\n  backtrace_to_string (convert_raw_backtrace raw_backtrace)\n\nlet backtrace_slot_is_raise = function\n  | Known_location(is_raise, _, _, _, _) -> is_raise\n  | Unknown_location(is_raise) -> is_raise\n\ntype location = {\n  filename : string;\n  line_number : int;\n  start_char : int;\n  end_char : int;\n}\n\nlet backtrace_slot_location = function\n  | Unknown_location _ -> None\n  | Known_location(_is_raise, filename, line_number,\n                   start_char, end_char) ->\n    Some {\n      filename;\n      line_number;\n      start_char;\n      end_char;\n    }\n\nlet backtrace_slots raw_backtrace =\n  (* The documentation of this function guarantees that Some is\n     returned only if a part of the trace is usable. This gives us\n     a bit more work than just convert_raw_backtrace, but it makes the\n     API more user-friendly -- otherwise most users would have to\n     reimplement the \"Program not linked with -g, sorry\" logic\n     themselves. *)\n  match convert_raw_backtrace raw_backtrace with\n    | None -> None\n    | Some backtrace ->\n      let usable_slot = function\n        | Unknown_location _ -> false\n        | Known_location _ -> true in\n      let rec exists_usable = function\n        | (-1) -> false\n        | i -> usable_slot backtrace.(i) || exists_usable (i - 1) in\n      if exists_usable (Array.length backtrace - 1)\n      then Some backtrace\n      else None\n\nmodule Slot = struct\n  type t = backtrace_slot\n  let format = format_backtrace_slot\n  let is_raise = backtrace_slot_is_raise\n  let location = backtrace_slot_location\nend\n\nlet raw_backtrace_length bckt = Array.length bckt\nlet get_raw_backtrace_slot bckt i = Array.get bckt i\n\n(* confusingly named:\n   returns the *string* corresponding to the global current backtrace *)\nlet get_backtrace () =\n  backtrace_to_string (convert_raw_backtrace (get_raw_backtrace ()))\n\nexternal record_backtrace: bool -> unit = \"caml_record_backtrace\"\nexternal backtrace_status: unit -> bool = \"caml_backtrace_status\"\n\nlet register_printer fn =\n  printers := fn :: !printers\n\nexternal get_callstack: int -> raw_backtrace = \"caml_get_current_callstack\"\n\nlet exn_slot x =\n  let x = Obj.repr x in\n  if Obj.tag x = 0 then Obj.field x 0 else x\n\nlet exn_slot_id x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 1) : int)\n\nlet exn_slot_name x =\n  let slot = exn_slot x in\n  (Obj.obj (Obj.field slot 0) : string)\n\n\nlet uncaught_exception_handler = ref None\n\nlet set_uncaught_exception_handler fn = uncaught_exception_handler := Some fn\n\nlet empty_backtrace : raw_backtrace = Obj.obj (Obj.new_block Obj.abstract_tag 0)\n\nlet try_get_raw_backtrace () =\n  try\n    get_raw_backtrace ()\n  with _ (* Out_of_memory? *) ->\n    empty_backtrace\n\nlet handle_uncaught_exception' exn debugger_in_use =\n  try\n    (* Get the backtrace now, in case one of the [at_exit] function\n       destroys it. *)\n    let raw_backtrace =\n      if debugger_in_use (* Same test as in [byterun/printexc.c] *) then\n        empty_backtrace\n      else\n        try_get_raw_backtrace ()\n    in\n    (try Pervasives.do_at_exit () with _ -> ());\n    match !uncaught_exception_handler with\n    | None ->\n        eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n        print_raw_backtrace stderr raw_backtrace;\n        flush stderr\n    | Some handler ->\n        try\n          handler exn raw_backtrace\n        with exn' ->\n          let raw_backtrace' = try_get_raw_backtrace () in\n          eprintf \"Fatal error: exception %s\\n\" (to_string exn);\n          print_raw_backtrace stderr raw_backtrace;\n          eprintf \"Fatal error in uncaught exception handler: exception %s\\n\"\n            (to_string exn');\n          print_raw_backtrace stderr raw_backtrace';\n          flush stderr\n  with\n    | Out_of_memory ->\n        prerr_endline\n          \"Fatal error: out of memory in uncaught exception handler\"\n\n(* This function is called by [caml_fatal_uncaught_exception] in\n   [byterun/printexc.c] which expects no exception is raised. *)\nlet handle_uncaught_exception exn debugger_in_use =\n  try\n    handle_uncaught_exception' exn debugger_in_use\n  with _ ->\n    (* There is not much we can do at this point *)\n    ()\n\nexternal register_named_value : string -> 'a -> unit\n  = \"caml_register_named_value\"\n\nlet () =\n  register_named_value \"Printexc.handle_uncaught_exception\"\n    handle_uncaught_exception\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Message digest (MD5) *)\n\ntype t = string\n\nlet compare = String.compare\n\nexternal unsafe_string: string -> int -> int -> t = \"caml_md5_string\"\nexternal channel: in_channel -> int -> t = \"caml_md5_chan\"\n\nlet string str =\n  unsafe_string str 0 (String.length str)\n\nlet bytes b = string (Bytes.unsafe_to_string b)\n\nlet substring str ofs len =\n  if ofs < 0 || len < 0 || ofs > String.length str - len\n  then invalid_arg \"Digest.substring\"\n  else unsafe_string str ofs len\n\nlet subbytes b ofs len = substring (Bytes.unsafe_to_string b) ofs len\n\nlet file filename =\n  let ic = open_in_bin filename in\n  match channel ic (-1) with\n    | d -> close_in ic; d\n    | exception e -> close_in ic; raise e\n\nlet output chan digest =\n  output_string chan digest\n\nlet input chan = really_input_string chan 16\n\nlet char_hex n =\n  Char.unsafe_chr (n + if n < 10 then Char.code '0' else (Char.code 'a' - 10))\n\nlet to_hex d =\n  let result = Bytes.create 32 in\n  for i = 0 to 15 do\n    let x = Char.code d.[i] in\n    Bytes.unsafe_set result (i*2) (char_hex (x lsr 4));\n    Bytes.unsafe_set result (i*2+1) (char_hex (x land 0x0f));\n  done;\n  Bytes.unsafe_to_string result\n\nlet from_hex s =\n  if String.length s <> 32 then raise (Invalid_argument \"Digest.from_hex\");\n  let digit c =\n    match c with\n    | '0'..'9' -> Char.code c - Char.code '0'\n    | 'A'..'F' -> Char.code c - Char.code 'A' + 10\n    | 'a'..'f' -> Char.code c - Char.code 'a' + 10\n    | _ -> raise (Invalid_argument \"Digest.from_hex\")\n  in\n  let byte i = digit s.[i] lsl 4 + digit s.[i+1] in\n  let result = Bytes.create 16 in\n  for i = 0 to 15 do\n    Bytes.set result i (Char.chr (byte (2 * i)));\n  done;\n  Bytes.unsafe_to_string result\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*              Damien Doligez, projet Para, INRIA Rocquencourt        *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Pseudo-random number generator\n   This is a lagged-Fibonacci F(55, 24, +) with a modified addition\n   function to enhance the mixing of bits.\n   If we use normal addition, the low-order bit fails tests 1 and 7\n   of the Diehard test suite, and bits 1 and 2 also fail test 7.\n   If we use multiplication as suggested by Marsaglia, it doesn't fare\n   much better.\n   By mixing the bits of one of the numbers before addition (XOR the\n   5 high-order bits into the low-order bits), we get a generator that\n   passes all the Diehard tests.\n*)\n\nexternal random_seed: unit -> int array = \"caml_sys_random_seed\";;\n\nmodule State = struct\n\n  type t = { st : int array; mutable idx : int };;\n\n  let new_state () = { st = Array.make 55 0; idx = 0 };;\n  let assign st1 st2 =\n    Array.blit st2.st 0 st1.st 0 55;\n    st1.idx <- st2.idx;\n  ;;\n\n  let full_init s seed =\n    let combine accu x = Digest.string (accu ^ string_of_int x) in\n    let extract d =\n      Char.code d.[0] + (Char.code d.[1] lsl 8) + (Char.code d.[2] lsl 16)\n      + (Char.code d.[3] lsl 24)\n    in\n    let seed = if Array.length seed = 0 then [| 0 |] else seed in\n    let l = Array.length seed in\n    for i = 0 to 54 do\n      s.st.(i) <- i;\n    done;\n    let accu = ref \"x\" in\n    for i = 0 to 54 + max 55 l do\n      let j = i mod 55 in\n      let k = i mod l in\n      accu := combine !accu seed.(k);\n      s.st.(j) <- (s.st.(j) lxor extract !accu) land 0x3FFFFFFF;  (* PR#5575 *)\n    done;\n    s.idx <- 0;\n  ;;\n\n  let make seed =\n    let result = new_state () in\n    full_init result seed;\n    result\n  ;;\n\n  let make_self_init () = make (random_seed ());;\n\n  let copy s =\n    let result = new_state () in\n    assign result s;\n    result\n  ;;\n\n  (* Returns 30 random bits as an integer 0 <= x < 1073741824 *)\n  let bits s =\n    s.idx <- (s.idx + 1) mod 55;\n    let curval = s.st.(s.idx) in\n    let newval = s.st.((s.idx + 24) mod 55)\n                 + (curval lxor ((curval lsr 25) land 0x1F)) in\n    let newval30 = newval land 0x3FFFFFFF in  (* PR#5575 *)\n    s.st.(s.idx) <- newval30;\n    newval30\n  ;;\n\n  let rec intaux s n =\n    let r = bits s in\n    let v = r mod n in\n    if r - v > 0x3FFFFFFF - n + 1 then intaux s n else v\n  ;;\n  let int s bound =\n    if bound > 0x3FFFFFFF || bound <= 0\n    then invalid_arg \"Random.int\"\n    else intaux s bound\n  ;;\n\n  let rec int32aux s n =\n    let b1 = Int32.of_int (bits s) in\n    let b2 = Int32.shift_left (Int32.of_int (bits s land 1)) 30 in\n    let r = Int32.logor b1 b2 in\n    let v = Int32.rem r n in\n    if Int32.sub r v > Int32.add (Int32.sub Int32.max_int n) 1l\n    then int32aux s n\n    else v\n  ;;\n  let int32 s bound =\n    if bound <= 0l\n    then invalid_arg \"Random.int32\"\n    else int32aux s bound\n  ;;\n\n  let rec int64aux s n =\n    let b1 = Int64.of_int (bits s) in\n    let b2 = Int64.shift_left (Int64.of_int (bits s)) 30 in\n    let b3 = Int64.shift_left (Int64.of_int (bits s land 7)) 60 in\n    let r = Int64.logor b1 (Int64.logor b2 b3) in\n    let v = Int64.rem r n in\n    if Int64.sub r v > Int64.add (Int64.sub Int64.max_int n) 1L\n    then int64aux s n\n    else v\n  ;;\n  let int64 s bound =\n    if bound <= 0L\n    then invalid_arg \"Random.int64\"\n    else int64aux s bound\n  ;;\n\n  let nativeint =\n    if Nativeint.size = 32\n    then fun s bound -> Nativeint.of_int32 (int32 s (Nativeint.to_int32 bound))\n    else fun s bound -> Int64.to_nativeint (int64 s (Int64.of_nativeint bound))\n  ;;\n\n  (* Returns a float 0 <= x <= 1 with at most 60 bits of precision. *)\n  let rawfloat s =\n    let scale = 1073741824.0  (* 2^30 *)\n    and r1 = Pervasives.float (bits s)\n    and r2 = Pervasives.float (bits s)\n    in (r1 /. scale +. r2) /. scale\n  ;;\n\n  let float s bound = rawfloat s *. bound;;\n\n  let bool s = (bits s land 1 = 0);;\n\nend;;\n\n(* This is the state you get with [init 27182818] and then applying\n   the \"land 0x3FFFFFFF\" filter to them.  See #5575, #5793, #5977. *)\nlet default = {\n  State.st = [|\n      0x3ae2522b; 0x1d8d4634; 0x15b4fad0; 0x18b14ace; 0x12f8a3c4; 0x3b086c47;\n      0x16d467d6; 0x101d91c7; 0x321df177; 0x0176c193; 0x1ff72bf1; 0x1e889109;\n      0x0b464b18; 0x2b86b97c; 0x0891da48; 0x03137463; 0x085ac5a1; 0x15d61f2f;\n      0x3bced359; 0x29c1c132; 0x3a86766e; 0x366d8c86; 0x1f5b6222; 0x3ce1b59f;\n      0x2ebf78e1; 0x27cd1b86; 0x258f3dc3; 0x389a8194; 0x02e4c44c; 0x18c43f7d;\n      0x0f6e534f; 0x1e7df359; 0x055d0b7e; 0x10e84e7e; 0x126198e4; 0x0e7722cb;\n      0x1cbede28; 0x3391b964; 0x3d40e92a; 0x0c59933d; 0x0b8cd0b7; 0x24efff1c;\n      0x2803fdaa; 0x08ebc72e; 0x0f522e32; 0x05398edc; 0x2144a04c; 0x0aef3cbd;\n      0x01ad4719; 0x35b93cd6; 0x2a559d4f; 0x1e6fd768; 0x26e27f36; 0x186f18c3;\n      0x2fbf967a;\n    |];\n  State.idx = 0;\n};;\n\nlet bits () = State.bits default;;\nlet int bound = State.int default bound;;\nlet int32 bound = State.int32 default bound;;\nlet nativeint bound = State.nativeint default bound;;\nlet int64 bound = State.int64 default bound;;\nlet float scale = State.float default scale;;\nlet bool () = State.bool default;;\n\nlet full_init seed = State.full_init default seed;;\nlet init seed = State.full_init default [| seed |];;\nlet self_init () = full_init (random_seed());;\n\n(* Manipulating the current state. *)\n\nlet get_state () = State.copy default;;\nlet set_state s = State.assign default s;;\n\n(********************\n\n(* Test functions.  Not included in the library.\n   The [chisquare] function should be called with n > 10r.\n   It returns a triple (low, actual, high).\n   If low <= actual <= high, the [g] function passed the test,\n   otherwise it failed.\n\n  Some results:\n\ninit 27182818; chisquare int 100000 1000;;\ninit 27182818; chisquare int 100000 100;;\ninit 27182818; chisquare int 100000 5000;;\ninit 27182818; chisquare int 1000000 1000;;\ninit 27182818; chisquare int 100000 1024;;\ninit 299792643; chisquare int 100000 1024;;\ninit 14142136; chisquare int 100000 1024;;\ninit 27182818; init_diff 1024; chisquare diff 100000 1024;;\ninit 27182818; init_diff 100; chisquare diff 100000 100;;\ninit 27182818; init_diff2 1024; chisquare diff2 100000 1024;;\ninit 27182818; init_diff2 100; chisquare diff2 100000 100;;\ninit 14142136; init_diff2 100; chisquare diff2 100000 100;;\ninit 299792643; init_diff2 100; chisquare diff2 100000 100;;\n- : float * float * float = (936.754446796632465, 997.5, 1063.24555320336754)\n# - : float * float * float = (80., 89.7400000000052387, 120.)\n# - : float * float * float = (4858.57864376269, 5045.5, 5141.42135623731)\n# - : float * float * float =\n(936.754446796632465, 944.805999999982305, 1063.24555320336754)\n# - : float * float * float = (960., 1019.19744000000355, 1088.)\n# - : float * float * float = (960., 1059.31776000000536, 1088.)\n# - : float * float * float = (960., 1039.98463999999512, 1088.)\n# - : float * float * float = (960., 1054.38207999999577, 1088.)\n# - : float * float * float = (80., 90.096000000005, 120.)\n# - : float * float * float = (960., 1076.78720000000612, 1088.)\n# - : float * float * float = (80., 85.1760000000067521, 120.)\n# - : float * float * float = (80., 85.2160000000003492, 120.)\n# - : float * float * float = (80., 80.6220000000030268, 120.)\n\n*)\n\n(* Return the sum of the squares of v[i0,i1[ *)\nlet rec sumsq v i0 i1 =\n  if i0 >= i1 then 0.0\n  else if i1 = i0 + 1 then Pervasives.float v.(i0) *. Pervasives.float v.(i0)\n  else sumsq v i0 ((i0+i1)/2) +. sumsq v ((i0+i1)/2) i1\n;;\n\nlet chisquare g n r =\n  if n <= 10 * r then invalid_arg \"chisquare\";\n  let f = Array.make r 0 in\n  for i = 1 to n do\n    let t = g r in\n    f.(t) <- f.(t) + 1\n  done;\n  let t = sumsq f 0 r\n  and r = Pervasives.float r\n  and n = Pervasives.float n in\n  let sr = 2.0 *. sqrt r in\n  (r -. sr,   (r *. t /. n) -. n,   r +. sr)\n;;\n\n(* This is to test for linear dependencies between successive random numbers.\n*)\nlet st = ref 0;;\nlet init_diff r = st := int r;;\nlet diff r =\n  let x1 = !st\n  and x2 = int r\n  in\n  st := x2;\n  if x1 >= x2 then\n    x1 - x2\n  else\n    r + x1 - x2\n;;\n\nlet st1 = ref 0\nand st2 = ref 0\n;;\n\n(* This is to test for quadratic dependencies between successive random\n   numbers.\n*)\nlet init_diff2 r = st1 := int r; st2 := int r;;\nlet diff2 r =\n  let x1 = !st1\n  and x2 = !st2\n  and x3 = int r\n  in\n  st1 := x2;\n  st2 := x3;\n  (x3 - x2 - x2 + x1 + 2*r) mod r\n;;\n\n********************)\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Hash tables *)\n\nexternal seeded_hash_param :\n  int -> int -> int -> 'a -> int = \"caml_hash\" \"noalloc\"\nexternal old_hash_param :\n  int -> int -> 'a -> int = \"caml_hash_univ_param\" \"noalloc\"\n\nlet hash x = seeded_hash_param 10 100 0 x\nlet hash_param n1 n2 x = seeded_hash_param n1 n2 0 x\nlet seeded_hash seed x = seeded_hash_param 10 100 seed x\n\n(* We do dynamic hashing, and resize the table and rehash the elements\n   when buckets become too long. *)\n\ntype ('a, 'b) t =\n  { mutable size: int;                        (* number of entries *)\n    mutable data: ('a, 'b) bucketlist array;  (* the buckets *)\n    mutable seed: int;                        (* for randomization *)\n    initial_size: int;                        (* initial array size *)\n  }\n\nand ('a, 'b) bucketlist =\n    Empty\n  | Cons of 'a * 'b * ('a, 'b) bucketlist\n\n(* To pick random seeds if requested *)\n\nlet randomized_default =\n  let params =\n    try Sys.getenv \"OCAMLRUNPARAM\" with Not_found ->\n    try Sys.getenv \"CAMLRUNPARAM\" with Not_found -> \"\" in\n  String.contains params 'R'\n\nlet randomized = ref randomized_default\n\nlet randomize () = randomized := true\n\nlet prng = lazy (Random.State.make_self_init())\n\n(* Creating a fresh, empty table *)\n\nlet rec power_2_above x n =\n  if x >= n then x\n  else if x * 2 > Sys.max_array_length then x\n  else power_2_above (x * 2) n\n\nlet create ?(random = !randomized) initial_size =\n  let s = power_2_above 16 initial_size in\n  let seed = if random then Random.State.bits (Lazy.force prng) else 0 in\n  { initial_size = s; size = 0; seed = seed; data = Array.make s Empty }\n\nlet clear h =\n  h.size <- 0;\n  let len = Array.length h.data in\n  for i = 0 to len - 1 do\n    h.data.(i) <- Empty\n  done\n\nlet reset h =\n  let len = Array.length h.data in\n  if Obj.size (Obj.repr h) < 4 (* compatibility with old hash tables *)\n    || len = h.initial_size then\n    clear h\n  else begin\n    h.size <- 0;\n    h.data <- Array.make h.initial_size Empty\n  end\n\nlet copy h = { h with data = Array.copy h.data }\n\nlet length h = h.size\n\nlet resize indexfun h =\n  let odata = h.data in\n  let osize = Array.length odata in\n  let nsize = osize * 2 in\n  if nsize < Sys.max_array_length then begin\n    let ndata = Array.make nsize Empty in\n    h.data <- ndata;          (* so that indexfun sees the new bucket count *)\n    let rec insert_bucket = function\n        Empty -> ()\n      | Cons(key, data, rest) ->\n          insert_bucket rest; (* preserve original order of elements *)\n          let nidx = indexfun h key in\n          ndata.(nidx) <- Cons(key, data, ndata.(nidx)) in\n    for i = 0 to osize - 1 do\n      insert_bucket odata.(i)\n    done\n  end\n\nlet key_index h key =\n  (* compatibility with old hash tables *)\n  if Obj.size (Obj.repr h) >= 3\n  then (seeded_hash_param 10 100 h.seed key) land (Array.length h.data - 1)\n  else (old_hash_param 10 100 key) mod (Array.length h.data)\n\nlet add h key info =\n  let i = key_index h key in\n  let bucket = Cons(key, info, h.data.(i)) in\n  h.data.(i) <- bucket;\n  h.size <- h.size + 1;\n  if h.size > Array.length h.data lsl 1 then resize key_index h\n\nlet remove h key =\n  let rec remove_bucket = function\n    | Empty ->\n        Empty\n    | Cons(k, i, next) ->\n        if compare k key = 0\n        then begin h.size <- h.size - 1; next end\n        else Cons(k, i, remove_bucket next) in\n  let i = key_index h key in\n  h.data.(i) <- remove_bucket h.data.(i)\n\nlet rec find_rec key = function\n  | Empty ->\n      raise Not_found\n  | Cons(k, d, rest) ->\n      if compare key k = 0 then d else find_rec key rest\n\nlet find h key =\n  match h.data.(key_index h key) with\n  | Empty -> raise Not_found\n  | Cons(k1, d1, rest1) ->\n      if compare key k1 = 0 then d1 else\n      match rest1 with\n      | Empty -> raise Not_found\n      | Cons(k2, d2, rest2) ->\n          if compare key k2 = 0 then d2 else\n          match rest2 with\n          | Empty -> raise Not_found\n          | Cons(k3, d3, rest3) ->\n              if compare key k3 = 0 then d3 else find_rec key rest3\n\nlet find_all h key =\n  let rec find_in_bucket = function\n  | Empty ->\n      []\n  | Cons(k, d, rest) ->\n      if compare k key = 0\n      then d :: find_in_bucket rest\n      else find_in_bucket rest in\n  find_in_bucket h.data.(key_index h key)\n\nlet replace h key info =\n  let rec replace_bucket = function\n    | Empty ->\n        raise Not_found\n    | Cons(k, i, next) ->\n        if compare k key = 0\n        then Cons(key, info, next)\n        else Cons(k, i, replace_bucket next) in\n  let i = key_index h key in\n  let l = h.data.(i) in\n  try\n    h.data.(i) <- replace_bucket l\n  with Not_found ->\n    h.data.(i) <- Cons(key, info, l);\n    h.size <- h.size + 1;\n    if h.size > Array.length h.data lsl 1 then resize key_index h\n\nlet mem h key =\n  let rec mem_in_bucket = function\n  | Empty ->\n      false\n  | Cons(k, d, rest) ->\n      compare k key = 0 || mem_in_bucket rest in\n  mem_in_bucket h.data.(key_index h key)\n\nlet iter f h =\n  let rec do_bucket = function\n    | Empty ->\n        ()\n    | Cons(k, d, rest) ->\n        f k d; do_bucket rest in\n  let d = h.data in\n  for i = 0 to Array.length d - 1 do\n    do_bucket d.(i)\n  done\n\nlet fold f h init =\n  let rec do_bucket b accu =\n    match b with\n      Empty ->\n        accu\n    | Cons(k, d, rest) ->\n        do_bucket rest (f k d accu) in\n  let d = h.data in\n  let accu = ref init in\n  for i = 0 to Array.length d - 1 do\n    accu := do_bucket d.(i) !accu\n  done;\n  !accu\n\ntype statistics = {\n  num_bindings: int;\n  num_buckets: int;\n  max_bucket_length: int;\n  bucket_histogram: int array\n}\n\nlet rec bucket_length accu = function\n  | Empty -> accu\n  | Cons(_, _, rest) -> bucket_length (accu + 1) rest\n\nlet stats h =\n  let mbl =\n    Array.fold_left (fun m b -> max m (bucket_length 0 b)) 0 h.data in\n  let histo = Array.make (mbl + 1) 0 in\n  Array.iter\n    (fun b ->\n      let l = bucket_length 0 b in\n      histo.(l) <- histo.(l) + 1)\n    h.data;\n  { num_bindings = h.size;\n    num_buckets = Array.length h.data;\n    max_bucket_length = mbl;\n    bucket_histogram = histo }\n\n(* Functorial interface *)\n\nmodule type HashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: t -> int\n  end\n\nmodule type SeededHashedType =\n  sig\n    type t\n    val equal: t -> t -> bool\n    val hash: int -> t -> int\n  end\n\nmodule type S =\n  sig\n    type key\n    type 'a t\n    val create: int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy: 'a t -> 'a t\n    val add: 'a t -> key -> 'a -> unit\n    val remove: 'a t -> key -> unit\n    val find: 'a t -> key -> 'a\n    val find_all: 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter: (key -> 'a -> unit) -> 'a t -> unit\n    val fold: (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length: 'a t -> int\n    val stats: 'a t -> statistics\n  end\n\nmodule type SeededS =\n  sig\n    type key\n    type 'a t\n    val create : ?random:bool -> int -> 'a t\n    val clear : 'a t -> unit\n    val reset : 'a t -> unit\n    val copy : 'a t -> 'a t\n    val add : 'a t -> key -> 'a -> unit\n    val remove : 'a t -> key -> unit\n    val find : 'a t -> key -> 'a\n    val find_all : 'a t -> key -> 'a list\n    val replace : 'a t -> key -> 'a -> unit\n    val mem : 'a t -> key -> bool\n    val iter : (key -> 'a -> unit) -> 'a t -> unit\n    val fold : (key -> 'a -> 'b -> 'b) -> 'a t -> 'b -> 'b\n    val length : 'a t -> int\n    val stats: 'a t -> statistics\n  end\n\nmodule MakeSeeded(H: SeededHashedType): (SeededS with type key = H.t) =\n  struct\n    type key = H.t\n    type 'a hashtbl = (key, 'a) t\n    type 'a t = 'a hashtbl\n    let create = create\n    let clear = clear\n    let reset = reset\n    let copy = copy\n\n    let key_index h key =\n      (H.hash h.seed key) land (Array.length h.data - 1)\n\n    let add h key info =\n      let i = key_index h key in\n      let bucket = Cons(key, info, h.data.(i)) in\n      h.data.(i) <- bucket;\n      h.size <- h.size + 1;\n      if h.size > Array.length h.data lsl 1 then resize key_index h\n\n    let remove h key =\n      let rec remove_bucket = function\n        | Empty ->\n            Empty\n        | Cons(k, i, next) ->\n            if H.equal k key\n            then begin h.size <- h.size - 1; next end\n            else Cons(k, i, remove_bucket next) in\n      let i = key_index h key in\n      h.data.(i) <- remove_bucket h.data.(i)\n\n    let rec find_rec key = function\n      | Empty ->\n          raise Not_found\n      | Cons(k, d, rest) ->\n          if H.equal key k then d else find_rec key rest\n\n    let find h key =\n      match h.data.(key_index h key) with\n      | Empty -> raise Not_found\n      | Cons(k1, d1, rest1) ->\n          if H.equal key k1 then d1 else\n          match rest1 with\n          | Empty -> raise Not_found\n          | Cons(k2, d2, rest2) ->\n              if H.equal key k2 then d2 else\n              match rest2 with\n              | Empty -> raise Not_found\n              | Cons(k3, d3, rest3) ->\n                  if H.equal key k3 then d3 else find_rec key rest3\n\n    let find_all h key =\n      let rec find_in_bucket = function\n      | Empty ->\n          []\n      | Cons(k, d, rest) ->\n          if H.equal k key\n          then d :: find_in_bucket rest\n          else find_in_bucket rest in\n      find_in_bucket h.data.(key_index h key)\n\n    let replace h key info =\n      let rec replace_bucket = function\n        | Empty ->\n            raise Not_found\n        | Cons(k, i, next) ->\n            if H.equal k key\n            then Cons(key, info, next)\n            else Cons(k, i, replace_bucket next) in\n      let i = key_index h key in\n      let l = h.data.(i) in\n      try\n        h.data.(i) <- replace_bucket l\n      with Not_found ->\n        h.data.(i) <- Cons(key, info, l);\n        h.size <- h.size + 1;\n        if h.size > Array.length h.data lsl 1 then resize key_index h\n\n    let mem h key =\n      let rec mem_in_bucket = function\n      | Empty ->\n          false\n      | Cons(k, d, rest) ->\n          H.equal k key || mem_in_bucket rest in\n      mem_in_bucket h.data.(key_index h key)\n\n    let iter = iter\n    let fold = fold\n    let length = length\n    let stats = stats\n  end\n\nmodule Make(H: HashedType): (S with type key = H.t) =\n  struct\n    include MakeSeeded(struct\n        type t = H.t\n        let equal = H.equal\n        let hash (seed: int) x = H.hash x\n      end)\n    let create sz = create ~random:false sz\n  end\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Pierre Weis, projet Cristal, INRIA Rocquencourt          *)\n(*                                                                     *)\n(*  Copyright 2002 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\nopen CamlinternalFormatBasics\nopen CamlinternalFormat\n\n(* alias to avoid warning for ambiguity between\n   Pervasives.format6\n   and CamlinternalFormatBasics.format6\n\n   (the former is in fact an alias for the latter,\n    but the ambiguity warning doesn't care)\n*)\ntype ('a, 'b, 'c, 'd, 'e, 'f) format6 =\n  ('a, 'b, 'c, 'd, 'e, 'f) Pervasives.format6\n\n(* The run-time library for scanners. *)\n\n(* Scanning buffers. *)\nmodule type SCANNING = sig\n\n  type in_channel;;\n\n  type scanbuf = in_channel;;\n\n  type file_name = string;;\n\n  val stdin : in_channel;;\n  (* The scanning buffer reading from [Pervasives.stdin].\n      [stdib] is equivalent to [Scanning.from_channel Pervasives.stdin]. *)\n\n  val stdib : in_channel;;\n  (* An alias for [Scanf.stdin], the scanning buffer reading from\n     [Pervasives.stdin]. *)\n\n  val next_char : scanbuf -> char;;\n  (* [Scanning.next_char ib] advance the scanning buffer for\n      one character.\n      If no more character can be read, sets a end of file condition and\n      returns '\\000'. *)\n\n  val invalidate_current_char : scanbuf -> unit;;\n  (* [Scanning.invalidate_current_char ib] mark the current_char as already\n      scanned. *)\n\n  val peek_char : scanbuf -> char;;\n  (* [Scanning.peek_char ib] returns the current char available in\n      the buffer or reads one if necessary (when the current character is\n      already scanned).\n      If no character can be read, sets an end of file condition and\n      returns '\\000'. *)\n\n  val checked_peek_char : scanbuf -> char;;\n  (* Same as above but always returns a valid char or fails:\n      instead of returning a null char when the reading method of the\n      input buffer has reached an end of file, the function raises exception\n      [End_of_file]. *)\n\n  val store_char : int -> scanbuf -> char -> int;;\n  (* [Scanning.store_char lim ib c] adds [c] to the token buffer\n      of the scanning buffer. It also advances the scanning buffer for one\n      character and returns [lim - 1], indicating the new limit\n      for the length of the current token. *)\n\n  val skip_char : int -> scanbuf -> int;;\n  (* [Scanning.skip_char lim ib] ignores the current character. *)\n\n  val ignore_char : int -> scanbuf -> int;;\n  (* [Scanning.ignore_char ib lim] ignores the current character and\n     decrements the limit. *)\n\n  val token : scanbuf -> string;;\n  (* [Scanning.token ib] returns the string stored into the token\n      buffer of the scanning buffer: it returns the token matched by the\n      format. *)\n\n  val reset_token : scanbuf -> unit;;\n  (* [Scanning.reset_token ib] resets the token buffer of\n      the given scanning buffer. *)\n\n  val char_count : scanbuf -> int;;\n  (* [Scanning.char_count ib] returns the number of characters\n      read so far from the given buffer. *)\n\n  val line_count : scanbuf -> int;;\n  (* [Scanning.line_count ib] returns the number of new line\n      characters read so far from the given buffer. *)\n\n  val token_count : scanbuf -> int;;\n  (* [Scanning.token_count ib] returns the number of tokens read\n      so far from [ib]. *)\n\n  val eof : scanbuf -> bool;;\n  (* [Scanning.eof ib] returns the end of input condition\n      of the given buffer. *)\n\n  val end_of_input : scanbuf -> bool;;\n  (* [Scanning.end_of_input ib] tests the end of input condition\n      of the given buffer (if no char has ever been read, an attempt to\n      read one is performed). *)\n\n  val beginning_of_input : scanbuf -> bool;;\n  (* [Scanning.beginning_of_input ib] tests the beginning of input\n      condition of the given buffer. *)\n\n  val name_of_input : scanbuf -> string;;\n  (* [Scanning.name_of_input ib] returns the name of the character\n      source for input buffer [ib]. *)\n\n  val open_in : file_name -> in_channel;;\n  val open_in_bin : file_name -> in_channel;;\n  val from_file : file_name -> in_channel;;\n  val from_file_bin : file_name -> in_channel;;\n  val from_string : string -> in_channel;;\n  val from_function : (unit -> char) -> in_channel;;\n  val from_channel : Pervasives.in_channel -> in_channel;;\n\n  val close_in : in_channel -> unit;;\n\nend\n;;\n\nmodule Scanning : SCANNING = struct\n\n  (* The run-time library for scanf. *)\n  type in_channel_name =\n    | From_file of string * Pervasives.in_channel\n    | From_string\n    | From_function\n    | From_channel of Pervasives.in_channel\n  ;;\n\n  type in_channel = {\n    mutable eof : bool;\n    mutable current_char : char;\n    mutable current_char_is_valid : bool;\n    mutable char_count : int;\n    mutable line_count : int;\n    mutable token_count : int;\n    mutable get_next_char : unit -> char;\n    tokbuf : Buffer.t;\n    input_name : in_channel_name;\n  }\n  ;;\n\n  type scanbuf = in_channel;;\n\n  type file_name = string;;\n\n  let null_char = '\\000';;\n\n  (* Reads a new character from input buffer.  Next_char never fails,\n     even in case of end of input: it then simply sets the end of file\n     condition. *)\n  let next_char ib =\n    try\n      let c = ib.get_next_char () in\n      ib.current_char <- c;\n      ib.current_char_is_valid <- true;\n      ib.char_count <- succ ib.char_count;\n      if c = '\\n' then ib.line_count <- succ ib.line_count;\n      c with\n    | End_of_file ->\n      let c = null_char in\n      ib.current_char <- c;\n      ib.current_char_is_valid <- false;\n      ib.eof <- true;\n      c\n  ;;\n\n  let peek_char ib =\n    if ib.current_char_is_valid then ib.current_char else next_char ib;;\n\n  (* Returns a valid current char for the input buffer. In particular\n     no irrelevant null character (as set by [next_char] in case of end\n     of input) is returned, since [End_of_file] is raised when\n     [next_char] sets the end of file condition while trying to read a\n     new character. *)\n  let checked_peek_char ib =\n    let c = peek_char ib in\n    if ib.eof then raise End_of_file;\n    c\n  ;;\n\n  let end_of_input ib =\n    ignore (peek_char ib);\n    ib.eof\n  ;;\n\n  let eof ib = ib.eof;;\n\n  let beginning_of_input ib = ib.char_count = 0;;\n  let name_of_input ib =\n    match ib.input_name with\n    | From_file (fname, _ic) -> fname\n    | From_string -> \"unnamed character string\"\n    | From_function -> \"unnamed function\"\n    | From_channel _ic -> \"unnamed pervasives input channel\"\n  ;;\n\n  let char_count ib =\n    if ib.current_char_is_valid then ib.char_count - 1 else ib.char_count\n  ;;\n  let line_count ib = ib.line_count;;\n  let reset_token ib = Buffer.reset ib.tokbuf;;\n  let invalidate_current_char ib = ib.current_char_is_valid <- false;;\n\n  let token ib =\n    let tokbuf = ib.tokbuf in\n    let tok = Buffer.contents tokbuf in\n    Buffer.clear tokbuf;\n    ib.token_count <- succ ib.token_count;\n    tok\n  ;;\n\n  let token_count ib = ib.token_count;;\n\n  let skip_char width ib =\n    invalidate_current_char ib;\n    width\n  ;;\n\n  let ignore_char width ib = skip_char (width - 1) ib;;\n\n  let store_char width ib c =\n    Buffer.add_char ib.tokbuf c;\n    ignore_char width ib\n  ;;\n\n  let default_token_buffer_size = 1024;;\n\n  let create iname next = {\n    eof = false;\n    current_char = null_char;\n    current_char_is_valid = false;\n    char_count = 0;\n    line_count = 0;\n    token_count = 0;\n    get_next_char = next;\n    tokbuf = Buffer.create default_token_buffer_size;\n    input_name = iname;\n  }\n  ;;\n\n  let from_string s =\n    let i = ref 0 in\n    let len = String.length s in\n    let next () =\n      if !i >= len then raise End_of_file else\n      let c = s.[!i] in\n      incr i;\n      c in\n    create From_string next\n  ;;\n\n  let from_function = create From_function;;\n\n  (* Scanning from an input channel. *)\n\n  (* Position of the problem:\n\n     We cannot prevent the scanning mechanism to use one lookahead character,\n     if needed by the semantics of the format string specifications (e.g. a\n     trailing 'skip space' specification in the format string); in this case,\n     the mandatory lookahead character is indeed read from the input and not\n     used to return the token read. It is thus mandatory to be able to store\n     an unused lookahead character somewhere to get it as the first character\n     of the next scan.\n\n     To circumvent this problem, all the scanning functions get a low level\n     input buffer argument where they store the lookahead character when\n     needed; additionally, the input buffer is the only source of character of\n     a scanner. The [scanbuf] input buffers are defined in module {!Scanning}.\n\n     Now we understand that it is extremely important that related successive\n     calls to scanners indeed read from the same input buffer. In effect, if a\n     scanner [scan1] is reading from [ib1] and stores an unused lookahead\n     character [c1] into its input buffer [ib1], then another scanner [scan2]\n     not reading from the same buffer [ib1] will miss the character [c],\n     seemingly vanished in the air from the point of view of [scan2].\n\n     This mechanism works perfectly to read from strings, from files, and from\n     functions, since in those cases, allocating two buffers reading from the\n     same source is unnatural.\n\n     Still, there is a difficulty in the case of scanning from an input\n     channel. In effect, when scanning from an input channel [ic], this channel\n     may not have been allocated from within this library. Hence, it may be\n     shared (two functions of the user's program may successively read from\n     [ic]). This is highly error prone since, one of the function may seek the\n     input channel, while the other function has still an unused lookahead\n     character in its input buffer. In conclusion, you should never mix direct\n     low level reading and high level scanning from the same input channel.\n\n     This phenomenon of reading mess is even worse when one defines more than\n     one scanning buffer reading from the same input channel\n     [ic]. Unfortunately, we have no simple way to get rid of this problem\n     (unless the basic input channel API is modified to offer a 'consider this\n     char as unread' procedure to keep back the unused lookahead character as\n     available in the input channel for further reading).\n\n     To prevent some of the confusion the scanning buffer allocation function\n     is a memo function that never allocates two different scanning buffers for\n     the same input channel. This way, the user can naively perform successive\n     call to [fscanf] below, without allocating a new scanning buffer at each\n     invocation and hence preserving the expected semantics.\n\n     As mentioned above, a more ambitious fix could be to change the input\n     channel API to allow arbitrary mixing of direct and formatted reading from\n     input channels. *)\n\n  (* Perform bufferized input to improve efficiency. *)\n  let file_buffer_size = ref 1024;;\n\n  (* The scanner closes the input channel at end of input. *)\n  let scan_close_at_end ic = close_in ic; raise End_of_file;;\n\n  (* The scanner does not close the input channel at end of input:\n     it just raises [End_of_file]. *)\n  let scan_raise_at_end _ic = raise End_of_file;;\n\n  let from_ic scan_close_ic iname ic =\n    let len = !file_buffer_size in\n    let buf = Bytes.create len in\n    let i = ref 0 in\n    let lim = ref 0 in\n    let eof = ref false in\n    let next () =\n      if !i < !lim then begin let c = Bytes.get buf !i in incr i; c end else\n      if !eof then raise End_of_file else begin\n        lim := input ic buf 0 len;\n        if !lim = 0 then begin eof := true; scan_close_ic ic end else begin\n          i := 1;\n          Bytes.get buf 0\n        end\n      end in\n    create iname next\n  ;;\n\n  let from_ic_close_at_end = from_ic scan_close_at_end;;\n\n  (* The scanning buffer reading from [Pervasives.stdin].\n     One could try to define [stdib] as a scanning buffer reading a character\n     at a time (no bufferization at all), but unfortunately the top-level\n     interaction would be wrong. This is due to some kind of\n     'race condition' when reading from [Pervasives.stdin],\n     since the interactive compiler and [scanf] will simultaneously read the\n     material they need from [Pervasives.stdin]; then, confusion will result\n     from what should be read by the top-level and what should be read\n     by [scanf].\n     This is even more complicated by the one character lookahead that [scanf]\n     is sometimes obliged to maintain: the lookahead character will be\n     available for the next ([scanf]) entry, seemingly coming from nowhere.\n     Also no [End_of_file] is raised when reading from stdin: if not enough\n     characters have been read, we simply ask to read more. *)\n  let stdin =\n    from_ic scan_raise_at_end\n      (From_file (\"-\", Pervasives.stdin)) Pervasives.stdin\n  ;;\n\n  let stdib = stdin;;\n\n  let open_in fname =\n    match fname with\n    | \"-\" -> stdin\n    | fname ->\n      let ic = open_in fname in\n      from_ic_close_at_end (From_file (fname, ic)) ic\n  ;;\n\n  let open_in_bin fname =\n    match fname with\n    | \"-\" -> stdin\n    | fname ->\n      let ic = open_in_bin fname in\n      from_ic_close_at_end (From_file (fname, ic)) ic\n  ;;\n\n  let from_file = open_in;;\n  let from_file_bin = open_in_bin;;\n\n  let memo_from_ic =\n    let memo = ref [] in\n    (fun scan_close_ic ic ->\n     try List.assq ic !memo with\n     | Not_found ->\n       let ib = from_ic scan_close_ic (From_channel ic) ic in\n       memo := (ic, ib) :: !memo;\n       ib)\n  ;;\n\n  let from_channel = memo_from_ic scan_raise_at_end;;\n\n  let close_in ib =\n    match ib.input_name with\n    | From_file (_fname, ic) -> Pervasives.close_in ic\n    | From_string | From_function -> ()\n    | From_channel ic -> Pervasives.close_in ic\n  ;;\n\nend\n;;\n\n(* Formatted input functions. *)\n\ntype ('a, 'b, 'c, 'd) scanner =\n     ('a, Scanning.in_channel, 'b, 'c, 'a -> 'd, 'd) format6 -> 'c\n\n(* Reporting errors. *)\nexception Scan_failure of string;;\n\nlet bad_input s = raise (Scan_failure s);;\n\nlet bad_input_escape c =\n  bad_input (Printf.sprintf \"illegal escape character %C\" c)\n;;\n\nlet bad_token_length message =\n  bad_input\n    (Printf.sprintf\n       \"scanning of %s failed: \\\n        the specified length was too short for token\" message)\n;;\n\nlet bad_end_of_input message =\n  bad_input\n    (Printf.sprintf\n       \"scanning of %s failed: \\\n        premature end of file occurred before end of token\" message)\n\nlet bad_float () =\n  bad_input \"no dot or exponent part found in float token\"\n;;\n\nlet character_mismatch_err c ci =\n  Printf.sprintf \"looking for %C, found %C\" c ci\n;;\n\nlet character_mismatch c ci =\n  bad_input (character_mismatch_err c ci)\n\nlet rec skip_whites ib =\n  let c = Scanning.peek_char ib in\n  if not (Scanning.eof ib) then begin\n    match c with\n    | ' ' | '\\t' | '\\n' | '\\r' ->\n      Scanning.invalidate_current_char ib; skip_whites ib\n    | _ -> ()\n  end\n\n(* Checking that [c] is indeed in the input, then skips it.\n   In this case, the character [c] has been explicitly specified in the\n   format as being mandatory in the input; hence we should fail with\n   End_of_file in case of end_of_input. (Remember that Scan_failure is raised\n   only when (we can prove by evidence) that the input does not match the\n   format string given. We must thus differentiate End_of_file as an error\n   due to lack of input, and Scan_failure which is due to provably wrong\n   input. I am not sure this is worth the burden: it is complex and somehow\n   subliminal; should be clearer to fail with Scan_failure \"Not enough input\n   to complete scanning\"!)\n\n   That's why, waiting for a better solution, we use checked_peek_char here.\n   We are also careful to treat \"\\r\\n\" in the input as an end of line marker:\n   it always matches a '\\n' specification in the input format string. *)\nlet rec check_char ib c =\n  if c = ' ' then skip_whites ib else\n    let ci = Scanning.checked_peek_char ib in\n    if ci = c then Scanning.invalidate_current_char ib else\n      match ci with\n      | '\\r' when c = '\\n' ->\n        Scanning.invalidate_current_char ib; check_char ib '\\n'\n      | _ -> character_mismatch c ci\n\n(* Extracting tokens from the output token buffer. *)\n\nlet token_char ib = (Scanning.token ib).[0];;\n\nlet token_string = Scanning.token;;\n\nlet token_bool ib =\n  match Scanning.token ib with\n  | \"true\" -> true\n  | \"false\" -> false\n  | s -> bad_input (Printf.sprintf \"invalid boolean %S\" s)\n;;\n\n(* Extract an integer literal token.\n   Since the functions Pervasives.*int*_of_string do not accept a leading +,\n   we skip it if necessary. *)\nlet token_int_literal conv ib =\n  let tok =\n    match conv with\n    | 'd' | 'i' | 'u' -> Scanning.token ib\n    | 'o' -> \"0o\" ^ Scanning.token ib\n    | 'x' | 'X' -> \"0x\" ^ Scanning.token ib\n    | 'b' -> \"0b\" ^ Scanning.token ib\n    | _ -> assert false in\n  let l = String.length tok in\n  if l = 0 || tok.[0] <> '+' then tok else String.sub tok 1 (l - 1)\n;;\n\n(* All the functions that convert a string to a number raise the exception\n   Failure when the conversion is not possible.\n   This exception is then trapped in [kscanf]. *)\nlet token_int conv ib = int_of_string (token_int_literal conv ib);;\n\nlet token_float ib = float_of_string (Scanning.token ib);;\n\n(* To scan native ints, int32 and int64 integers.\n   We cannot access to conversions to/from strings for those types,\n   Nativeint.of_string, Int32.of_string, and Int64.of_string,\n   since those modules are not available to [Scanf].\n   However, we can bind and use the corresponding primitives that are\n   available in the runtime. *)\nexternal nativeint_of_string : string -> nativeint\n  = \"caml_nativeint_of_string\"\n;;\nexternal int32_of_string : string -> int32\n  = \"caml_int32_of_string\"\n;;\nexternal int64_of_string : string -> int64\n  = \"caml_int64_of_string\"\n;;\n\nlet token_nativeint conv ib = nativeint_of_string (token_int_literal conv ib);;\nlet token_int32 conv ib = int32_of_string (token_int_literal conv ib);;\nlet token_int64 conv ib = int64_of_string (token_int_literal conv ib);;\n\n(* Scanning numbers. *)\n\n(* Digits scanning functions suppose that one character has been checked and\n   is available, since they return at end of file with the currently found\n   token selected.\n\n   Put it in another way, the digits scanning functions scan for a possibly\n   empty sequence of digits, (hence, a successful scanning from one of those\n   functions does not imply that the token is a well-formed number: to get a\n   true number, it is mandatory to check that at least one valid digit is\n   available before calling one of the digit scanning functions). *)\n\n(* The decimal case is treated especially for optimization purposes. *)\nlet rec scan_decimal_digits width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | '0' .. '9' as c ->\n    let width = Scanning.store_char width ib c in\n    scan_decimal_digits width ib\n  | '_' ->\n    let width = Scanning.ignore_char width ib in\n    scan_decimal_digits width ib\n  | _ -> width\n;;\n\nlet scan_decimal_digits_plus width ib =\n  if width = 0 then bad_token_length \"decimal digits\" else\n  let c = Scanning.checked_peek_char ib in\n  match c with\n  | '0' .. '9' ->\n    let width = Scanning.store_char width ib c in\n    scan_decimal_digits width ib\n  | c ->\n    bad_input (Printf.sprintf \"character %C is not a decimal digit\" c)\n;;\n\nlet scan_digits_plus basis digitp width ib =\n  (* To scan numbers from other bases, we use a predicate argument to\n     scan_digits. *)\n  let rec scan_digits width =\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n    match c with\n    | c when digitp c ->\n      let width = Scanning.store_char width ib c in\n      scan_digits width\n    | '_' ->\n      let width = Scanning.ignore_char width ib in\n      scan_digits width\n    | _ -> width in\n\n  (* Ensure we have got enough width left,\n     and read at list one digit. *)\n  if width = 0 then bad_token_length \"digits\" else\n  let c = Scanning.checked_peek_char ib in\n\n  if digitp c then\n    let width = Scanning.store_char width ib c in\n    scan_digits width\n  else\n    bad_input (Printf.sprintf \"character %C is not a valid %s digit\" c basis)\n;;\n\nlet is_binary_digit = function\n  | '0' .. '1' -> true\n  | _ -> false\n;;\n\nlet scan_binary_int = scan_digits_plus \"binary\" is_binary_digit;;\n\nlet is_octal_digit = function\n  | '0' .. '7' -> true\n  | _ -> false\n;;\n\nlet scan_octal_int = scan_digits_plus \"octal\" is_octal_digit;;\n\nlet is_hexa_digit = function\n  | '0' .. '9' | 'a' .. 'f' | 'A' .. 'F' -> true\n  | _ -> false\n;;\n\nlet scan_hexadecimal_int = scan_digits_plus \"hexadecimal\" is_hexa_digit;;\n\n(* Scan a decimal integer. *)\nlet scan_unsigned_decimal_int = scan_decimal_digits_plus;;\n\nlet scan_sign width ib =\n  let c = Scanning.checked_peek_char ib in\n  match c with\n  | '+' -> Scanning.store_char width ib c\n  | '-' -> Scanning.store_char width ib c\n  | _ -> width\n;;\n\nlet scan_optionally_signed_decimal_int width ib =\n  let width = scan_sign width ib in\n  scan_unsigned_decimal_int width ib\n;;\n\n(* Scan an unsigned integer that could be given in any (common) basis.\n   If digits are prefixed by one of 0x, 0X, 0o, or 0b, the number is\n   assumed to be written respectively in hexadecimal, hexadecimal,\n   octal, or binary. *)\nlet scan_unsigned_int width ib =\n  match Scanning.checked_peek_char ib with\n  | '0' as c ->\n    let width = Scanning.store_char width ib c in\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n    begin match c with\n    | 'x' | 'X' -> scan_hexadecimal_int (Scanning.store_char width ib c) ib\n    | 'o' -> scan_octal_int (Scanning.store_char width ib c) ib\n    | 'b' -> scan_binary_int (Scanning.store_char width ib c) ib\n    | _ -> scan_decimal_digits width ib end\n  | _ -> scan_unsigned_decimal_int width ib\n;;\n\nlet scan_optionally_signed_int width ib =\n  let width = scan_sign width ib in\n  scan_unsigned_int width ib\n;;\n\nlet scan_int_conv conv width ib =\n  match conv with\n  | 'b' -> scan_binary_int width ib\n  | 'd' -> scan_optionally_signed_decimal_int width ib\n  | 'i' -> scan_optionally_signed_int width ib\n  | 'o' -> scan_octal_int width ib\n  | 'u' -> scan_unsigned_decimal_int width ib\n  | 'x' | 'X' -> scan_hexadecimal_int width ib\n  | _ -> assert false\n;;\n\n(* Scanning floating point numbers. *)\n(* Fractional part is optional and can be reduced to 0 digits. *)\nlet scan_frac_part width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | '0' .. '9' as c ->\n    scan_decimal_digits (Scanning.store_char width ib c) ib\n  | _ -> width\n;;\n\n(* Exp part is optional and can be reduced to 0 digits. *)\nlet scan_exp_part width ib =\n  if width = 0 then width else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width else\n  match c with\n  | 'e' | 'E' as c ->\n    scan_optionally_signed_decimal_int (Scanning.store_char width ib c) ib\n  | _ -> width\n;;\n\n(* Scan the integer part of a floating point number, (not using the\n   OCaml lexical convention since the integer part can be empty):\n   an optional sign, followed by a possibly empty sequence of decimal\n   digits (e.g. -.1). *)\nlet scan_int_part width ib =\n  let width = scan_sign width ib in\n  scan_decimal_digits width ib\n;;\n\n(*\n   For the time being we have (as found in scanf.mli):\n   The field width is composed of an optional integer literal\n   indicating the maximal width of the token to read.\n   Unfortunately, the type-checker let the user write an optional precision,\n   since this is valid for printf format strings.\n\n   Thus, the next step for Scanf is to support a full width and precision\n   indication, more or less similar to the one for printf, possibly extended\n   to the specification of a [max, min] range for the width of the token read\n   for strings. Something like the following spec for scanf.mli:\n\n   The optional [width] is an integer indicating the maximal\n   width of the token read. For instance, [%6d] reads an integer,\n   having at most 6 characters.\n\n   The optional [precision] is a dot [.] followed by an integer:\n\n   - in the floating point number conversions ([%f], [%e], [%g], [%F], [%E],\n   and [%F] conversions, the [precision] indicates the maximum number of\n   digits that may follow the decimal point. For instance, [%.4f] reads a\n   [float] with at most 4 fractional digits,\n\n   - in the string conversions ([%s], [%S], [%\\[ range \\]]), and in the\n   integer number conversions ([%i], [%d], [%u], [%x], [%o], and their\n   [int32], [int64], and [native_int] correspondent), the [precision]\n   indicates the required minimum width of the token read,\n\n   - on all other conversions, the width and precision are meaningless and\n   ignored (FIXME: lead to a runtime error ? type checking error ?).\n*)\n\nlet scan_float width precision ib =\n  let width = scan_int_part width ib in\n  if width = 0 then width, precision else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then width, precision else\n  match c with\n  | '.' ->\n    let width = Scanning.store_char width ib c in\n    let precision = min width precision in\n    let width = width - (precision - scan_frac_part precision ib) in\n    scan_exp_part width ib, precision\n  | _ ->\n    scan_exp_part width ib, precision\n;;\n\nlet scan_caml_float width precision ib =\n  let width = scan_optionally_signed_decimal_int width ib in\n  if width = 0 then bad_float () else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then bad_float () else\n  match c with\n  | '.' ->\n    let width = Scanning.store_char width ib c in\n    let precision = min width precision in\n    let width = width - (precision - scan_frac_part precision ib) in\n    scan_exp_part width ib\n  | 'e' | 'E' ->\n    scan_exp_part width ib\n  | _ -> bad_float ()\n\n(* Scan a regular string:\n   stops when encountering a space, if no scanning indication has been given;\n   otherwise, stops when encountering the characters in the scanning\n   indication [stp].\n   It also stops at end of file or when the maximum number of characters has\n   been read.*)\nlet scan_string stp width ib =\n  let rec loop width =\n    if width = 0 then width else\n    let c = Scanning.peek_char ib in\n    if Scanning.eof ib then width else\n      match stp with\n      | Some c' when c = c' -> Scanning.skip_char width ib\n      | Some _ -> loop (Scanning.store_char width ib c)\n      | None ->\n        match c with\n        | ' ' | '\\t' | '\\n' | '\\r' -> width\n        | _ -> loop (Scanning.store_char width ib c)\n  in\n  loop width\n;;\n\n(* Scan a char: peek strictly one character in the input, whatsoever. *)\nlet scan_char width ib =\n  (* The case width = 0 could not happen here, since it is tested before\n     calling scan_char, in the main scanning function.\n    if width = 0 then bad_token_length \"a character\" else *)\n  Scanning.store_char width ib (Scanning.checked_peek_char ib)\n;;\n\nlet char_for_backslash = function\n  | 'n' -> '\\010'\n  | 'r' -> '\\013'\n  | 'b' -> '\\008'\n  | 't' -> '\\009'\n  | c -> c\n;;\n\n(* The integer value corresponding to the facial value of a valid\n   decimal digit character. *)\nlet decimal_value_of_char c = int_of_char c - int_of_char '0';;\n\nlet char_for_decimal_code c0 c1 c2 =\n  let c =\n    100 * decimal_value_of_char c0 +\n     10 * decimal_value_of_char c1 +\n          decimal_value_of_char c2 in\n  if c < 0 || c > 255 then\n    bad_input\n      (Printf.sprintf\n         \"bad character decimal encoding \\\\%c%c%c\" c0 c1 c2) else\n  char_of_int c\n;;\n\n(* The integer value corresponding to the facial value of a valid\n   hexadecimal digit character. *)\nlet hexadecimal_value_of_char c =\n  let d = int_of_char c in\n  (* Could also be:\n    if d <= int_of_char '9' then d - int_of_char '0' else\n    if d <= int_of_char 'F' then 10 + d - int_of_char 'A' else\n    if d <= int_of_char 'f' then 10 + d - int_of_char 'a' else assert false\n  *)\n  if d >= int_of_char 'a' then\n    d - 87 (* 10 + int_of_char c - int_of_char 'a' *) else\n  if d >= int_of_char 'A' then\n    d - 55  (* 10 + int_of_char c - int_of_char 'A' *) else\n    d - int_of_char '0'\n;;\n\nlet char_for_hexadecimal_code c1 c2 =\n  let c =\n    16 * hexadecimal_value_of_char c1 +\n         hexadecimal_value_of_char c2 in\n  if c < 0 || c > 255 then\n    bad_input\n      (Printf.sprintf \"bad character hexadecimal encoding \\\\%c%c\" c1 c2) else\n  char_of_int c\n;;\n\n(* Called in particular when encountering '\\\\' as starter of a char.\n   Stops before the corresponding '\\''. *)\nlet check_next_char message width ib =\n  if width = 0 then bad_token_length message else\n  let c = Scanning.peek_char ib in\n  if Scanning.eof ib then bad_end_of_input message else\n  c\n;;\n\nlet check_next_char_for_char = check_next_char \"a Char\";;\nlet check_next_char_for_string = check_next_char \"a String\";;\n\nlet scan_backslash_char width ib =\n  match check_next_char_for_char width ib with\n  | '\\\\' | '\\'' | '\\\"' | 'n' | 't' | 'b' | 'r' as c ->\n    Scanning.store_char width ib (char_for_backslash c)\n  | '0' .. '9' as c ->\n    let get_digit () =\n      let c = Scanning.next_char ib in\n      match c with\n      | '0' .. '9' as c -> c\n      | c -> bad_input_escape c in\n    let c0 = c in\n    let c1 = get_digit () in\n    let c2 = get_digit () in\n    Scanning.store_char (width - 2) ib (char_for_decimal_code c0 c1 c2)\n  | 'x' ->\n    let get_digit () =\n      let c = Scanning.next_char ib in\n      match c with\n      | '0' .. '9' | 'A' .. 'F' | 'a' .. 'f' as c -> c\n      | c -> bad_input_escape c in\n    let c1 = get_digit () in\n    let c2 = get_digit () in\n    Scanning.store_char (width - 2) ib (char_for_hexadecimal_code c1 c2)\n  | c ->\n    bad_input_escape c\n;;\n\n(* Scan a character (an OCaml token). *)\nlet scan_caml_char width ib =\n\n  let rec find_start width =\n    match Scanning.checked_peek_char ib with\n    | '\\'' -> find_char (Scanning.ignore_char width ib)\n    | c -> character_mismatch '\\'' c\n\n  and find_char width =\n    match check_next_char_for_char width ib with\n    | '\\\\' ->\n      find_stop (scan_backslash_char (Scanning.ignore_char width ib) ib)\n    | c ->\n      find_stop (Scanning.store_char width ib c)\n\n  and find_stop width =\n    match check_next_char_for_char width ib with\n    | '\\'' -> Scanning.ignore_char width ib\n    | c -> character_mismatch '\\'' c in\n\n  find_start width\n;;\n\n(* Scan a delimited string (an OCaml token). *)\nlet scan_caml_string width ib =\n\n  let rec find_start width =\n    match Scanning.checked_peek_char ib with\n    | '\\\"' -> find_stop (Scanning.ignore_char width ib)\n    | c -> character_mismatch '\\\"' c\n\n  and find_stop width =\n    match check_next_char_for_string width ib with\n    | '\\\"' -> Scanning.ignore_char width ib\n    | '\\\\' -> scan_backslash (Scanning.ignore_char width ib)\n    | c -> find_stop (Scanning.store_char width ib c)\n\n  and scan_backslash width =\n    match check_next_char_for_string width ib with\n    | '\\r' -> skip_newline (Scanning.ignore_char width ib)\n    | '\\n' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop (scan_backslash_char width ib)\n\n  and skip_newline width =\n    match check_next_char_for_string width ib with\n    | '\\n' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop (Scanning.store_char width ib '\\r')\n\n  and skip_spaces width =\n    match check_next_char_for_string width ib with\n    | ' ' -> skip_spaces (Scanning.ignore_char width ib)\n    | _ -> find_stop width in\n\n  find_start width\n;;\n\n(* Scan a boolean (an OCaml token). *)\nlet scan_bool ib =\n  let c = Scanning.checked_peek_char ib in\n  let m =\n    match c with\n    | 't' -> 4\n    | 'f' -> 5\n    | c ->\n      bad_input\n        (Printf.sprintf \"the character %C cannot start a boolean\" c) in\n  scan_string None m ib\n\n(* Scan a string containing elements in char_set and terminated by scan_indic\n   if provided. *)\nlet scan_chars_in_char_set char_set scan_indic width ib =\n  let rec scan_chars i stp =\n    let c = Scanning.peek_char ib in\n    if i > 0 && not (Scanning.eof ib) && is_in_char_set char_set c &&\n      int_of_char c <> stp then\n      let _ = Scanning.store_char max_int ib c in\n      scan_chars (i - 1) stp;\n  in\n  match scan_indic with\n  | None -> scan_chars width (-1);\n  | Some c ->\n    scan_chars width (int_of_char c);\n    if not (Scanning.eof ib) then\n      let ci = Scanning.peek_char ib in\n      if c = ci then Scanning.invalidate_current_char ib\n      else character_mismatch c ci\n\n(* The global error report function for [Scanf]. *)\nlet scanf_bad_input ib = function\n  | Scan_failure s | Failure s ->\n    let i = Scanning.char_count ib in\n    bad_input (Printf.sprintf \"scanf: bad input at char number %i: %S\" i s)\n  | x -> raise x\n\n(* Get the content of a counter from an input buffer. *)\nlet get_counter ib counter = match counter with\n  | Line_counter -> Scanning.line_count ib\n  | Char_counter -> Scanning.char_count ib\n  | Token_counter -> Scanning.token_count ib\n\n(* Compute the width of a padding option (see \"%42{\" and \"%123(\"). *)\nlet width_of_pad_opt pad_opt = match pad_opt with\n  | None -> max_int\n  | Some width -> width\n\nlet stopper_of_formatting_lit fmting =\n  if fmting = Escaped_percent then '%', \"\" else\n    let str = string_of_formatting_lit fmting in\n    let stp = str.[1] in\n    let sub_str = String.sub str 2 (String.length str - 2) in\n    stp, sub_str\n\n(******************************************************************************)\n                           (* Readers managment *)\n\n(* A call to take_format_readers on a format is evaluated into functions\n   taking readers as arguments and aggregate them into an heterogeneous list *)\n(* When all readers are taken, finally pass the list of the readers to the\n   continuation k. *)\nlet rec take_format_readers : type a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n    d =\nfun k fmt -> match fmt with\n  | Reader fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_format_readers new_k fmt_rest\n  | Char rest                        -> take_format_readers k rest\n  | Caml_char rest                   -> take_format_readers k rest\n  | String (_, rest)                 -> take_format_readers k rest\n  | Caml_string (_, rest)            -> take_format_readers k rest\n  | Int (_, _, _, rest)              -> take_format_readers k rest\n  | Int32 (_, _, _, rest)            -> take_format_readers k rest\n  | Nativeint (_, _, _, rest)        -> take_format_readers k rest\n  | Int64 (_, _, _, rest)            -> take_format_readers k rest\n  | Float (_, _, _, rest)            -> take_format_readers k rest\n  | Bool rest                        -> take_format_readers k rest\n  | Alpha rest                       -> take_format_readers k rest\n  | Theta rest                       -> take_format_readers k rest\n  | Flush rest                       -> take_format_readers k rest\n  | String_literal (_, rest)         -> take_format_readers k rest\n  | Char_literal (_, rest)           -> take_format_readers k rest\n  | Custom (_, _, rest)              -> take_format_readers k rest\n\n  | Scan_char_set (_, _, rest)       -> take_format_readers k rest\n  | Scan_get_counter (_, rest)       -> take_format_readers k rest\n  | Scan_next_char rest              -> take_format_readers k rest\n\n  | Formatting_lit (_, rest)         -> take_format_readers k rest\n  | Formatting_gen (Open_tag (Format (fmt, _)), rest) -> take_format_readers k (concat_fmt fmt rest)\n  | Formatting_gen (Open_box (Format (fmt, _)), rest) -> take_format_readers k (concat_fmt fmt rest)\n\n  | Format_arg (_, _, rest)          -> take_format_readers k rest\n  | Format_subst (_, fmtty, rest)    ->\n     take_fmtty_format_readers k (erase_rel (symm fmtty)) rest\n  | Ignored_param (ign, rest)        -> take_ignored_format_readers k ign rest\n\n  | End_of_format                    -> k Nil\n\n(* Take readers associated to an fmtty coming from a Format_subst \"%(...%)\". *)\nand take_fmtty_format_readers : type x y a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, x, y) fmtty ->\n      (y, Scanning.in_channel, c, x, e, f) fmt -> d =\nfun k fmtty fmt -> match fmtty with\n  | Reader_ty fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_fmtty_format_readers new_k fmt_rest fmt\n  | Ignored_reader_ty fmt_rest ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_fmtty_format_readers new_k fmt_rest fmt\n  | Char_ty rest                -> take_fmtty_format_readers k rest fmt\n  | String_ty rest              -> take_fmtty_format_readers k rest fmt\n  | Int_ty rest                 -> take_fmtty_format_readers k rest fmt\n  | Int32_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Nativeint_ty rest           -> take_fmtty_format_readers k rest fmt\n  | Int64_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Float_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Bool_ty rest                -> take_fmtty_format_readers k rest fmt\n  | Alpha_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Theta_ty rest               -> take_fmtty_format_readers k rest fmt\n  | Any_ty rest                 -> take_fmtty_format_readers k rest fmt\n  | Format_arg_ty (_, rest)     -> take_fmtty_format_readers k rest fmt\n  | End_of_fmtty                -> take_format_readers k fmt\n  | Format_subst_ty (ty1, ty2, rest) ->\n    let ty = trans (symm ty1) ty2 in\n    take_fmtty_format_readers k (concat_fmtty ty rest) fmt\n\n(* Take readers associated to an ignored parameter. *)\nand take_ignored_format_readers : type x y a c d e f .\n    ((d, e) heter_list -> e) -> (a, Scanning.in_channel, c, d, x, y) ignored ->\n      (y, Scanning.in_channel, c, x, e, f) fmt -> d =\nfun k ign fmt -> match ign with\n  | Ignored_reader ->\n    fun reader ->\n      let new_k readers_rest = k (Cons (reader, readers_rest)) in\n      take_format_readers new_k fmt\n  | Ignored_char                    -> take_format_readers k fmt\n  | Ignored_caml_char               -> take_format_readers k fmt\n  | Ignored_string _                -> take_format_readers k fmt\n  | Ignored_caml_string _           -> take_format_readers k fmt\n  | Ignored_int (_, _)              -> take_format_readers k fmt\n  | Ignored_int32 (_, _)            -> take_format_readers k fmt\n  | Ignored_nativeint (_, _)        -> take_format_readers k fmt\n  | Ignored_int64 (_, _)            -> take_format_readers k fmt\n  | Ignored_float (_, _)            -> take_format_readers k fmt\n  | Ignored_bool                    -> take_format_readers k fmt\n  | Ignored_format_arg _            -> take_format_readers k fmt\n  | Ignored_format_subst (_, fmtty) -> take_fmtty_format_readers k fmtty fmt\n  | Ignored_scan_char_set _         -> take_format_readers k fmt\n  | Ignored_scan_get_counter _      -> take_format_readers k fmt\n  | Ignored_scan_next_char          -> take_format_readers k fmt\n\n(******************************************************************************)\n                          (* Generic scanning *)\n\n(* Make a generic scanning function. *)\n(* Scan a stream according to a format and readers obtained by\n   take_format_readers, and aggegate scanned values into an\n   heterogeneous list. *)\n(* Return the heterogeneous list of scanned values. *)\nlet rec make_scanf : type a c d e f .\n    Scanning.in_channel -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n      (d, _) heter_list -> (a, f) heter_list =\nfun ib fmt readers -> match fmt with\n  | Char rest ->\n    let _ = scan_char 0 ib in\n    let c = token_char ib in\n    Cons (c, make_scanf ib rest readers)\n  | Caml_char rest ->\n    let _ = scan_caml_char 0 ib in\n    let c = token_char ib in\n    Cons (c, make_scanf ib rest readers)\n\n  | String (pad, Formatting_lit (fmting_lit, rest)) ->\n    let stp, str = stopper_of_formatting_lit fmting_lit in\n    let scan width _ ib = scan_string (Some stp) width ib in\n    let str_rest = String_literal (str, rest) in\n    pad_prec_scanf ib str_rest readers pad No_precision scan token_string\n  | String (pad, Formatting_gen (Open_tag (Format (fmt', _)), rest)) ->\n    let scan width _ ib = scan_string (Some '{') width ib in\n    pad_prec_scanf ib (concat_fmt fmt' rest) readers pad No_precision scan token_string\n  | String (pad, Formatting_gen (Open_box (Format (fmt', _)), rest)) ->\n    let scan width _ ib = scan_string (Some '[') width ib in\n    pad_prec_scanf ib (concat_fmt fmt' rest) readers pad No_precision scan token_string\n  | String (pad, rest) ->\n    let scan width _ ib = scan_string None width ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_string\n\n  | Caml_string (pad, rest) ->\n    let scan width _ ib = scan_caml_string width ib in\n    pad_prec_scanf ib rest readers pad No_precision scan token_string\n  | Int (iconv, pad, prec, rest) ->\n    let c = char_of_iconv iconv in\n    let scan width _ ib = scan_int_conv c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int c)\n  | Int32 (iconv, pad, prec, rest) ->\n    let c = char_of_iconv iconv in\n    let scan width _ ib = scan_int_conv c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int32 c)\n  | Nativeint (iconv, pad, prec, rest) ->\n    let c = char_of_iconv iconv in\n    let scan width _ ib = scan_int_conv c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_nativeint c)\n  | Int64 (iconv, pad, prec, rest) ->\n    let c = char_of_iconv iconv in\n    let scan width _ ib = scan_int_conv c width ib in\n    pad_prec_scanf ib rest readers pad prec scan (token_int64 c)\n  | Float (Float_F, pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_caml_float token_float\n  | Float ((Float_f | Float_pf | Float_sf | Float_e | Float_pe | Float_se\n               | Float_E | Float_pE | Float_sE | Float_g | Float_pg | Float_sg\n               | Float_G | Float_pG | Float_sG), pad, prec, rest) ->\n    pad_prec_scanf ib rest readers pad prec scan_float token_float\n\n  | Bool rest ->\n    let _ = scan_bool ib in\n    let b = token_bool ib in\n    Cons (b, make_scanf ib rest readers)\n  | Alpha _ ->\n    invalid_arg \"scanf: bad conversion \\\"%a\\\"\"\n  | Theta _ ->\n    invalid_arg \"scanf: bad conversion \\\"%t\\\"\"\n  | Custom _ ->\n    invalid_arg \"scanf: bad conversion \\\"%?\\\" (custom converter)\"\n  | Reader fmt_rest ->\n    let Cons (reader, readers_rest) = readers in\n    let x = reader ib in\n    Cons (x, make_scanf ib fmt_rest readers_rest)\n  | Flush rest ->\n    if Scanning.end_of_input ib then make_scanf ib rest readers\n    else bad_input \"end of input not found\"\n\n  | String_literal (str, rest) ->\n    String.iter (check_char ib) str;\n    make_scanf ib rest readers\n  | Char_literal (chr, rest) ->\n    check_char ib chr;\n    make_scanf ib rest readers\n\n  | Format_arg (pad_opt, fmtty, rest) ->\n    let _ = scan_caml_string (width_of_pad_opt pad_opt) ib in\n    let s = token_string ib in\n    let fmt =\n      try format_of_string_fmtty s fmtty\n      with Failure msg -> bad_input msg\n    in\n    Cons (fmt, make_scanf ib rest readers)\n  | Format_subst (pad_opt, fmtty, rest) ->\n    let _ = scan_caml_string (width_of_pad_opt pad_opt) ib in\n    let s = token_string ib in\n    let fmt, fmt' =\n      try\n        let Fmt_EBB fmt = fmt_ebb_of_string s in\n        let Fmt_EBB fmt' = fmt_ebb_of_string s in\n        (* TODO: find a way to avoid reparsing twice *)\n\n        (* TODO: these type-checks below *can* fail because of type\n           ambiguity in presence of ignored-readers: \"%_r%d\" and \"%d%_r\"\n           are typed in the same way.\n\n           # Scanf.sscanf \"\\\"%_r%d\\\"3\" \"%(%d%_r%)\" ignore\n             (fun fmt n -> string_of_format fmt, n);;\n           Exception: CamlinternalFormat.Type_mismatch.\n\n           We should properly catch this exception.\n        *)\n        type_format fmt (erase_rel fmtty),\n        type_format fmt' (erase_rel (symm fmtty))\n      with Failure msg -> bad_input msg\n    in\n    Cons (Format (fmt, s),\n          make_scanf ib (concat_fmt fmt' rest) readers)\n\n  | Scan_char_set (width_opt, char_set, Formatting_lit (fmting_lit, rest)) ->\n    let stp, str = stopper_of_formatting_lit fmting_lit in\n    let width = width_of_pad_opt width_opt in\n    let _ = scan_chars_in_char_set char_set (Some stp) width ib in\n    let s = token_string ib in\n    let str_rest = String_literal (str, rest) in\n    Cons (s, make_scanf ib str_rest readers)\n  | Scan_char_set (width_opt, char_set, rest) ->\n    let width = width_of_pad_opt width_opt in\n    let _ = scan_chars_in_char_set char_set None width ib in\n    let s = token_string ib in\n    Cons (s, make_scanf ib rest readers)\n  | Scan_get_counter (counter, rest) ->\n    let count = get_counter ib counter in\n    Cons (count, make_scanf ib rest readers)\n  | Scan_next_char rest ->\n    let c = Scanning.checked_peek_char ib in\n    Cons (c, make_scanf ib rest readers)\n\n  | Formatting_lit (formatting_lit, rest) ->\n    String.iter (check_char ib) (string_of_formatting_lit formatting_lit);\n    make_scanf ib rest readers\n  | Formatting_gen (Open_tag (Format (fmt', _)), rest) ->\n    check_char ib '@'; check_char ib '{';\n    make_scanf ib (concat_fmt fmt' rest) readers\n  | Formatting_gen (Open_box (Format (fmt', _)), rest) ->\n    check_char ib '@'; check_char ib '[';\n    make_scanf ib (concat_fmt fmt' rest) readers\n\n  | Ignored_param (ign, rest) ->\n    let Param_format_EBB fmt' = param_format_of_ignored_format ign rest in\n    begin match make_scanf ib fmt' readers with\n    | Cons (_, arg_rest) -> arg_rest\n    | Nil -> assert false\n    end\n\n  | End_of_format ->\n    Nil\n\n(* Case analysis on padding and precision. *)\n(* Reject formats containing \"%*\" or \"%.*\". *)\n(* Pass padding and precision to the generic scanner `scan'. *)\nand pad_prec_scanf : type a c d e f x y z t .\n    Scanning.in_channel -> (a, Scanning.in_channel, c, d, e, f) fmt ->\n      (d, _) heter_list -> (x, y) padding -> (y, z -> a) precision ->\n      (int -> int -> Scanning.in_channel -> t) ->\n      (Scanning.in_channel -> z) ->\n      (x, f) heter_list =\nfun ib fmt readers pad prec scan token -> match pad, prec with\n  | No_padding, No_precision ->\n    let _ = scan max_int max_int ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | No_padding, Lit_precision p ->\n    let _ = scan max_int p ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding ((Right | Zeros), w), No_precision ->\n    let _ = scan w max_int ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding ((Right | Zeros), w), Lit_precision p ->\n    let _ = scan w p ib in\n    let x = token ib in\n    Cons (x, make_scanf ib fmt readers)\n  | Lit_padding (Left, _), _ ->\n    invalid_arg \"scanf: bad conversion \\\"%-\\\"\"\n  | Lit_padding ((Right | Zeros), _), Arg_precision ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n  | Arg_padding _, _ ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n  | No_padding, Arg_precision ->\n    invalid_arg \"scanf: bad conversion \\\"%*\\\"\"\n\n(******************************************************************************)\n            (* Defining [scanf] and various flavors of [scanf] *)\n\ntype 'a kscanf_result = Args of 'a | Exc of exn\n\nlet kscanf ib ef (Format (fmt, str)) =\n  let rec apply : type a b . a -> (a, b) heter_list -> b =\n    fun f args -> match args with\n    | Cons (x, r) -> apply (f x) r\n    | Nil -> f\n  in\n  let k readers f =\n    Scanning.reset_token ib;\n    match try Args (make_scanf ib fmt readers) with\n      | (Scan_failure _ | Failure _ | End_of_file) as exc -> Exc exc\n      | Invalid_argument msg ->\n        invalid_arg (msg ^ \" in format \\\"\" ^ String.escaped str ^ \"\\\"\")\n    with\n      | Args args -> apply f args\n      | Exc exc -> ef ib exc\n  in\n  take_format_readers k fmt\n\nlet kbscanf = kscanf\n\n(***)\n\nlet ksscanf s ef fmt = kbscanf (Scanning.from_string s) ef fmt\nlet kfscanf ic ef fmt = kbscanf (Scanning.from_channel ic) ef fmt\nlet bscanf ib fmt = kscanf ib scanf_bad_input fmt\nlet fscanf ic fmt = kscanf (Scanning.from_channel ic) scanf_bad_input fmt\nlet sscanf s fmt = kscanf (Scanning.from_string s) scanf_bad_input fmt\nlet scanf fmt = kscanf Scanning.stdib scanf_bad_input fmt\n\n(***)\n\nlet bscanf_format : Scanning.in_channel -> ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g =\n  fun ib format f ->\n    let _ = scan_caml_string max_int ib in\n    let str = token_string ib in\n    let fmt' =\n      try format_of_string_format str format\n      with Failure msg -> bad_input msg\n    in\n    f fmt'\n\nlet sscanf_format : string -> ('a, 'b, 'c, 'd, 'e, 'f) format6 ->\n  (('a, 'b, 'c, 'd, 'e, 'f) format6 -> 'g) -> 'g =\n  fun s format f -> bscanf_format (Scanning.from_string s) format f\n\nlet string_to_String s =\n  let l = String.length s in\n  let b = Buffer.create (l + 2) in\n  Buffer.add_char b '\\\"';\n  for i = 0 to l - 1 do\n    let c = s.[i] in\n    if c = '\\\"' then Buffer.add_char b '\\\\';\n    Buffer.add_char b c;\n  done;\n  Buffer.add_char b '\\\"';\n  Buffer.contents b\n;;\n\nlet format_from_string s fmt =\n  sscanf_format (string_to_String s) fmt (fun x -> x)\n;;\n\nlet unescaped s =\n  sscanf (\"\\\"\" ^ s ^ \"\\\"\") \"%S%!\" (fun x -> x)\n;;\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Registering OCaml values with the C runtime for later callbacks *)\n\nexternal register_named_value : string -> Obj.t -> unit\n                              = \"caml_register_named_value\"\n\nlet register name v =\n  register_named_value name (Obj.repr v)\n\nlet register_exception name (exn : exn) =\n  let exn = Obj.repr exn in\n  let slot = if Obj.tag exn = Obj.object_tag then exn else Obj.field exn 0 in\n  register_named_value name slot\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\n/* Only temporarily needed. */\nlet jsTrimTrailing = Js.Unsafe.js_expr \"function(s) {return s.split('\\\\n').map(function(ss) {return ss.trimRight()}).join('\\\\n');}\";\n\nlet atomGlobal = Js.Unsafe.js_expr \"atom\";\n\nlet atomRange = Js.Unsafe.js_expr \"require('atom').Range\";\n\nlet bufferedProcess = Js.Unsafe.js_expr \"require('atom').BufferedProcess\";\n\n/* Yes, this doesn't work across iframes. */\nlet _isString = Js.Unsafe.js_expr \"function(s) {return typeof s === 'string' || s instanceof String;}\";\n\nlet _isNumber = Js.Unsafe.js_expr \"function(n) {return typeof n === 'number';}\";\n\nlet _isUndefined = Js.Unsafe.js_expr \"function(n) {return typeof n === 'undefined';}\";\n\nlet _isNull = Js.Unsafe.js_expr \"function(n) {return n === null;}\";\n\nlet _isBool = Js.Unsafe.js_expr \"function(n) {return typeof n === 'boolean';}\";\n\nlet _arrayIsArray = Js.Unsafe.js_expr \"Array.isArray\";\n\nlet promise = Js.Unsafe.js_expr \"Promise\";\n\nlet fixedEnv = Js.Unsafe.js_expr \"require('../lib/fixedEnv')\";\n\nlet emptyArgs = [||];\n\nlet trimTrailingWhiteSpace (s: string) => Js.to_string (\n  Js.Unsafe.fun_call jsTrimTrailing [|Js.Unsafe.inject (Js.string s)|]\n);\n\nlet module JsonType = {\n  type t =\n    | JsonString of string | JsonNum of float | JsonBool of bool | JsonArray of (array t) | JsonNull | Empty;\n};\n\ntype completionEntry = {desc: string, info: string, kind: string, name: string};\n\n/**\n * Api over Js values that are known to adhere to \"Json\" style constraints (no\n * functions), untyped, but predictable.\n */\nmodule type JsonValueSig = {\n  /* We never want to reveal that t is actually just an unsafe JS value.\n   * We want everyone to go through the Apis which provide type safety. */\n  type t;\n  let fromJs: Js.t Js.js_string => JsonType.t;\n  let toJs: JsonType.t => Js.Unsafe.any;\n  let unsafeExtractString: JsonType.t => string;\n};\n\nlet module JsonValue: JsonValueSig = {\n  open JsonType;\n  type t = Js.Unsafe.any;\n  let rec fromJs fieldVal =>\n    if (Js.Unsafe.fun_call _arrayIsArray [|Js.Unsafe.inject fieldVal|]) {\n      let jsArray = Array.map fromJs (Js.to_array (Js.Unsafe.coerce fieldVal));\n      JsonArray jsArray\n    } else if (\n      Js.Unsafe.fun_call _isString [|Js.Unsafe.inject fieldVal|]\n    ) {\n      JsonString (Js.to_string fieldVal)\n    } else if (\n      Js.Unsafe.fun_call _isBool [|Js.Unsafe.inject fieldVal|]\n    ) {\n      JsonBool (Js.to_bool (Js.Unsafe.coerce fieldVal))\n    } else if (\n      Js.Unsafe.fun_call _isNumber [|Js.Unsafe.inject fieldVal|]\n    ) {\n      JsonNum (Js.float_of_number (Js.Unsafe.coerce fieldVal))\n    } else if (\n      Js.Unsafe.fun_call _isNull [|Js.Unsafe.inject fieldVal|]\n    ) {\n      JsonNull\n    } else {\n      Empty\n    };\n  let rec toJs =\n    fun | JsonString str => Js.Unsafe.inject (Js.string str)\n        | JsonNum f => Js.Unsafe.inject (Js.float f)\n        | JsonBool b => Js.Unsafe.inject (Js.bool b)\n        | JsonArray a => Js.Unsafe.inject (Js.array (Array.map toJs a))\n        | JsonNull => Js.Unsafe.inject Js.null\n        | Empty => Js.Unsafe.inject Js.undefined;\n  let unsafeExtractString o =>\n    switch o {\n    | JsonType.JsonString s => s\n    | _ => raise (Invalid_argument \"unsafeExtractString: not a string\")\n    };\n};\n\nlet module Env = {\n  let setEnvVar envVar strVal => {\n    Js.Unsafe.set (Js.Unsafe.get (Js.Unsafe.get Js.Unsafe.global \"process\") \"env\") envVar (Js.string strVal);\n    Js.Unsafe.set fixedEnv envVar (Js.string strVal)\n  };\n};\n\nlet module Config = {\n  let get configKey :JsonType.t => {\n    let config = Js.Unsafe.get atomGlobal \"config\";\n    JsonValue.fromJs (Js.Unsafe.meth_call config \"get\" [|Js.Unsafe.inject (Js.string configKey)|])\n  };\n  let set configKey (v: JsonType.t) :unit => {\n    let config = Js.Unsafe.get atomGlobal \"config\";\n    let jsVal = JsonValue.toJs v;\n    Js.Unsafe.meth_call config \"set\" [|Js.Unsafe.inject (Js.string configKey), Js.Unsafe.inject jsVal|]\n  };\n};\n\nlet module Point = {\n  type t = (int, int);\n  let toJs (row, column) => Js.Unsafe.inject (Js.array [|Js.Unsafe.inject row, Js.Unsafe.inject column|]);\n  let fromJs jsP =>\n    if (Js.Unsafe.fun_call _arrayIsArray [|Js.Unsafe.inject jsP|]) {\n      let arr = Js.to_array jsP;\n      (arr.(0), arr.(1))\n    } else {\n      let row = Js.Unsafe.get jsP \"row\";\n      let col = Js.Unsafe.get jsP \"column\";\n      (row, col)\n    };\n};\n\nlet module Range = {\n  type row = int;\n  type column = int;\n  type rowColumn = (row, column);\n  type t = (rowColumn as 'start, rowColumn as 'endd);\n  let emptyRange = ((0, 0), (0, 0));\n  let toJs (startRowColumn, endRowColumn) =>\n    Js.Unsafe.new_obj atomRange [|Point.toJs startRowColumn, Point.toJs endRowColumn|];\n  let fromJs jsRange =>\n    if (Js.Unsafe.fun_call _arrayIsArray [|Js.Unsafe.inject jsRange|]) {\n      let arr = Js.to_array jsRange;\n      let startPoint = Js.to_array arr.(0);\n      let endPoint = Js.to_array arr.(1);\n      ((startPoint.(0), startPoint.(1)), (endPoint.(0), endPoint.(1)))\n    } else {\n      let startPoint = Js.Unsafe.get jsRange \"start\";\n      let endPoint = Js.Unsafe.get jsRange \"end\";\n      (Point.fromJs startPoint, Point.fromJs endPoint)\n    };\n};\n\nlet module Buffer = {\n  type t = Js.Unsafe.any;\n  let fromJs jsBuffer :t => jsBuffer;\n  let toJs (buffer: t) :Js.Unsafe.any => buffer;\n  let characterIndexForPosition (buffer: t) rowColumn =>\n    Js.Unsafe.meth_call buffer \"characterIndexForPosition\" [|Js.Unsafe.inject (Point.toJs rowColumn)|];\n  let getText (buffer: t) :string => Js.to_string (Js.Unsafe.meth_call buffer \"getText\" emptyArgs);\n  let getTextInRange (buffer: t) (range: Range.t) :string => Js.to_string (\n    Js.Unsafe.meth_call buffer \"getTextInRange\" [|Range.toJs range|]\n  );\n};\n\nlet module Cursor = {\n  /* Actually just the underlying JS value - TODO: obscure this using\n   * signature. */\n  type t;\n  let getBufferPosition (cursor: t) => Point.fromJs (\n    Js.Unsafe.meth_call cursor \"getBufferPosition\" emptyArgs\n  );\n  let setBufferPosition position::(pos: Point.t) autoScroll::(autoScroll: bool) (cursor: t) => {\n    let optionsObj = Js.Unsafe.obj [|(\"autoscroll\", Js.Unsafe.inject (Js.bool autoScroll))|];\n    let args = [|Point.toJs pos, optionsObj|];\n    Point.fromJs (Js.Unsafe.meth_call cursor \"setBufferPosition\" args)\n  };\n  let fromJs jsCursor => jsCursor;\n};\n\nlet module Editor = {\n  type t = Js.Unsafe.any;\n  let fromJs jsEditor :t => jsEditor;\n  let toJs (editor: t) :Js.Unsafe.any => editor;\n  let lineTextForBufferRow (editor: t) bufferRow => Js.to_string (\n    Js.Unsafe.meth_call editor \"lineTextForBufferRow\" [|bufferRow|]\n  );\n  let getBuffer editor :Buffer.t => Js.Unsafe.meth_call editor \"getBuffer\" emptyArgs;\n  let getPath editor => {\n    let path = Js.Unsafe.meth_call editor \"getPath\" emptyArgs;\n    Js.Opt.test path ? Some (Js.to_string path) : None\n  };\n  let getCursors editor => {\n    let arr = Array.map Cursor.fromJs (Js.to_array (Js.Unsafe.meth_call editor \"getCursors\" emptyArgs));\n    Array.to_list arr\n  };\n};\n\n/**\n * Dirt simple promise wrapper, not implementing advanced features yet.\n */\nlet module Promise = {\n  /* This should be made abstract so it's essentially private. */\n  type underlyingJsPromise;\n  type t 'i 'o = {\n    underlyingJsPromise: underlyingJsPromise,\n    /* Try adding constraint where 'o = t 'ii 'oo for some 'ii 'oo */\n    /* Perhaps the higher ranked polymorphism feature would work here */\n    /* One promise's output is another promise's input. */\n    thn: 'nextO .('i => 'o) => t 'o 'nextO\n  };\n  let toJs p => p.underlyingJsPromise;\n  let create executor => {\n    let jsCurriedExecutor = Js.wrap_callback executor;\n    let underlyingJsPromise = Js.Unsafe.new_obj promise [|Js.Unsafe.inject jsCurriedExecutor|];\n    {\n      underlyingJsPromise,\n      thn: fun onResolve =>\n        Js.Unsafe.meth_call underlyingJsPromise \"then\" [|Js.Unsafe.inject (Js.wrap_callback onResolve)|]\n    }\n  };\n  let resolve v => create (fun jsResolveCb jsRejectCb => Js.Unsafe.fun_call jsResolveCb [|v|]);\n  /* For our current purposes, a promise (with no chaining abilities) is enough. */\n  let createFakePromise (executor: ('a => unit) => ('b => unit) => unit) =>\n    Js.Unsafe.new_obj promise [|Js.Unsafe.inject (Js.wrap_callback executor)|];\n};\n\nlet module Notification = {\n  type t;\n  let getType (n: t) => Js.to_string (Js.Unsafe.meth_call n \"getType\" emptyArgs);\n  let getMessage (n: t) => Js.to_string (Js.Unsafe.meth_call n \"getMessage\" emptyArgs);\n  let dismiss (n: t) => Js.Unsafe.meth_call n \"dismiss\" emptyArgs;\n};\n\nlet module NotificationManager = {\n  type options = {detail: string, dismissable: bool, icon: string};\n  let optionsToJs opts => Js.Unsafe.obj [|\n    (\"detail\", Js.Unsafe.inject (Js.string opts.detail)),\n    (\"dismissable\", Js.Unsafe.inject (Js.bool opts.dismissable)),\n    (\"icon\", Js.Unsafe.inject (Js.string opts.icon))\n  |];\n  let defaultOptions = {detail: \"MessageNotProvided\", dismissable: false, icon: \"flame\"};\n  let addError options::opts={...defaultOptions, icon: \"flame\"} title :unit =>\n    Js.Unsafe.meth_call\n      (Js.Unsafe.get atomGlobal \"notifications\")\n      \"addError\"\n      [|Js.Unsafe.inject (Js.string title), optionsToJs opts|];\n  let addWarning options::opts={...defaultOptions, icon: \"alert\"} title :unit =>\n    Js.Unsafe.meth_call\n      (Js.Unsafe.get atomGlobal \"notifications\")\n      \"addWarning\"\n      [|Js.Unsafe.inject (Js.string title), optionsToJs opts|];\n  let addInfo options::opts={...defaultOptions, icon: \"info\"} title :unit =>\n    Js.Unsafe.meth_call\n      (Js.Unsafe.get atomGlobal \"notifications\")\n      \"addInfo\"\n      [|Js.Unsafe.inject (Js.string title), optionsToJs opts|];\n  let addSuccess options::opts={...defaultOptions, icon: \"check\"} title :unit =>\n    Js.Unsafe.meth_call\n      (Js.Unsafe.get atomGlobal \"notifications\")\n      \"addSuccess\"\n      [|Js.Unsafe.inject (Js.string title), optionsToJs opts|];\n  let getNotifications () => Array.to_list (\n    Js.to_array (Js.Unsafe.meth_call (Js.Unsafe.get atomGlobal \"notifications\") \"getNotifications\" emptyArgs)\n  );\n};\n\nlet module Process = {\n  type options = {cwd: string, env: Js.t unit, detached: bool};\n  let defaultOptions = {cwd: \".\", env: Js.Unsafe.obj [||], detached: false};\n};\n\nlet module ChildProcess = {\n  type t;\n  let writeStdin (process: t) str :unit =>\n    Js.Unsafe.meth_call (Js.Unsafe.get process \"stdin\") \"write\" [|Js.Unsafe.inject (Js.string str)|];\n  let endStdin (process: t) => Js.Unsafe.meth_call (Js.Unsafe.get process \"stdin\") \"end\" emptyArgs;\n};\n\nmodule type BufferedProcessSig = {\n  type t;\n  let create:\n    options::Process.options? =>\n    stdout::(string => unit)? =>\n    stderr::(string => unit)? =>\n    exit::(int => unit)? =>\n    args::list string =>\n    string =>\n    t;\n};\n\nlet module BufferedProcess = {\n  open Process;\n  type t;\n  let create options::opts=? stdout::stdOut=? stderr::stdErr=? exit::exit=? cmd args::args => {\n    let fields = [|\n      (\"command\", Js.Unsafe.inject (Js.string cmd)),\n      (\"args\", Js.Unsafe.inject (Js.array (Array.map Js.string (Array.of_list args))))\n    |];\n    let fields =\n      switch opts {\n      | None => fields\n      | Some opts => {\n          let jsOptions = Js.Unsafe.obj [|\n            (\"cwd\", Js.Unsafe.inject opts.cwd),\n            (\"env\", Js.Unsafe.inject opts.env),\n            (\"detached\", Js.Unsafe.inject (Js.bool opts.detached))\n          |];\n          Array.append fields [|(\"options\", jsOptions)|]\n        }\n      };\n    let fields =\n      switch stdOut {\n      | None => fields\n      | Some so => {\n          let cb jsStr => so (Js.to_string jsStr);\n          Array.append fields [|(\"stdout\", Js.Unsafe.inject (Js.wrap_callback cb))|]\n        }\n      };\n    let fields =\n      switch stdErr {\n      | None => fields\n      | Some si => {\n          let cb jsStr => si (Js.to_string jsStr);\n          Array.append fields [|(\"stdin\", Js.Unsafe.inject (Js.wrap_callback cb))|]\n        }\n      };\n    let fields =\n      switch exit {\n      | None => fields\n      | Some e => {\n          let cb eCode => e (Js.to_float eCode);\n          Array.append fields [|(\"exit\", Js.Unsafe.inject (Js.wrap_callback cb))|]\n        }\n      };\n    Js.Unsafe.new_obj bufferedProcess [|Js.Unsafe.obj fields|]\n  };\n  let onWillThrowError buffProcess fn :unit => {\n    let wrappedCb = Js.wrap_callback (\n      fun jsErrHandle => fn (Js.Unsafe.get jsErrHandle \"error\") (Js.Unsafe.get jsErrHandle \"handle\")\n    );\n    Js.Unsafe.meth_call buffProcess \"onWillThrowError\" [|Js.Unsafe.inject wrappedCb|]\n  };\n  let process (bufferedProcess: t) => Js.Unsafe.get bufferedProcess \"process\";\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nlet require s => Js.Unsafe.fun_call (Js.Unsafe.js_expr \"require\") [|Js.Unsafe.inject (Js.string s)|];\n\nlet export s itm => Js.Unsafe.set (Js.Unsafe.js_expr \"exports\") s itm;\n\nlet dotCall x y z => Js.Unsafe.meth_call x y z;\n\n/* Including dot */\nlet isInterface maybeFilePath => {\n  let ext =\n    switch maybeFilePath {\n    | Some filePath => {\n        let lastExtensionIndex = String.rindex filePath '.';\n        String.sub filePath lastExtensionIndex (String.length filePath - lastExtensionIndex)\n      }\n    | None => \".re\"\n    };\n  String.compare \".rei\" ext === 0\n};\n\n/*\n * This is likely slightly broken. If you open a file without a file name, but\n * later save it to a different location on disk, you likely will not pick up the\n * right merlin path.\n */\nlet path editor =>\n  switch (Atom.Editor.getPath editor) {\n  | None => \"tmp.re\"\n  | Some path => path\n  };\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nlet _isTruthy = Js.Unsafe.js_expr {|\n  function(a) {return !!a;}\n|};\n\nlet isTruthy jsVal => Js.to_bool (Js.Unsafe.fun_call _isTruthy jsVal);\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\n/* This exposes the modules (e.g. autocomplete, diagnostic) that do the conversion from reason data structures\n   (with the help of types from nuclide.re) to js ones */\nlet def x d =>\n  switch x {\n  | None => d\n  | Some s => s\n  };\n\nlet module Diagnostic = {\n  open Nuclide.Diagnostic;\n  let diagnosticTypeToJs =\n    fun | Error => Js.string \"Error\"\n        | Warning => Js.string \"Warning\";\n  let diagnosticTypeFromJs =\n    fun | \"Error\" => Nuclide.Diagnostic.Error\n        | \"Warning\" => Nuclide.Diagnostic.Warning\n        | _ => raise (Invalid_argument \"invalid JS Diagnostic message type\");\n  /* A trace is a reference to another file/location related to an error. */\n  let module Trace = {\n    open Nuclide.Diagnostic.Trace;\n    let toJs (trace: t) => {\n      let {text, html, filePath, range} = trace;\n      let fields = [|\n        (\"type\", Js.Unsafe.inject (Js.string \"trace\")),\n        (\"text\", Js.Unsafe.inject (Js.string (def text \"\"))),\n        (\"filePath\", Js.Unsafe.inject (Js.string filePath))\n      |];\n      let fields =\n        switch html {\n        | None => fields\n        | Some h => Array.append fields [|(\"html\", Js.Unsafe.inject h)|]\n        };\n      let fields =\n        switch range {\n        | None => fields\n        | Some r => Array.append fields [|(\"range\", Js.Unsafe.inject (Atom.Range.toJs r))|]\n        };\n      Js.Unsafe.obj fields\n    };\n  };\n  let module Message = {\n    open Nuclide.Diagnostic.Message;\n    let toJs diagnosticMessage =>\n      switch diagnosticMessage {\n      | FileDiagnosticMessage {providerName, typee, filePath, text, html, range, trace} => {\n          let fields = [|\n            (\"scope\", Js.Unsafe.inject (Js.string \"file\")),\n            (\"providerName\", Js.Unsafe.inject (Js.string providerName)),\n            (\"type\", Js.Unsafe.inject (diagnosticTypeToJs typee)),\n            (\"filePath\", Js.Unsafe.inject (Js.string filePath)),\n            (\"text\", Js.Unsafe.inject (Js.string (def text \"\")))\n          |];\n          let fields =\n            switch html {\n            | None => fields\n            | Some h => Array.append fields [|(\"html\", Js.Unsafe.inject h)|]\n            };\n          let fields =\n            switch range {\n            | None => fields\n            | Some r => Array.append fields [|(\"range\", Js.Unsafe.inject (Atom.Range.toJs r))|]\n            };\n          let fields =\n            switch trace {\n            | None => fields\n            | Some ts => {\n                let jsTraces = Js.Unsafe.inject (Js.array (Array.map Trace.toJs ts));\n                Array.append fields [|(\"trace\", jsTraces)|]\n              }\n            };\n          Js.Unsafe.obj fields\n        }\n      | ProjectDiagnosticMessage {providerName, typee, text, html, range, trace} => {\n          let fields = [|\n            (\"scope\", Js.Unsafe.inject (Js.string \"project\")),\n            (\"providerName\", Js.Unsafe.inject (Js.string providerName)),\n            (\"type\", Js.Unsafe.inject (diagnosticTypeToJs typee)),\n            (\"text\", Js.Unsafe.inject (Js.string (def text \"\")))\n          |];\n          let fields =\n            switch html {\n            | None => fields\n            | Some h => Array.append fields [|(\"html\", Js.Unsafe.inject h)|]\n            };\n          let fields =\n            switch range {\n            | None => fields\n            | Some r => Array.append fields [|(\"range\", Js.Unsafe.inject (Atom.Range.toJs r))|]\n            };\n          let fields =\n            switch trace {\n            | None => fields\n            | Some ts => {\n                let jsTraces = Js.Unsafe.inject (Js.array (Array.map Trace.toJs ts));\n                Array.append fields [|(\"trace\", jsTraces)|]\n              }\n            };\n          Js.Unsafe.obj fields\n        }\n      };\n  };\n};\n\nlet module FileFormat = {\n  let toJs (result: Nuclide.FileFormat.result) => Js.Unsafe.obj [|\n    (\"newCursor\", Js.Unsafe.inject (Js.number_of_float (float_of_int result.newCursor))),\n    (\"formatted\", Js.Unsafe.inject (Js.string result.formatted))\n  |];\n};\n\nlet module AutocompleteProviderRequest = {\n  open Nuclide.AutocompleteProviderRequest;\n  let fromJs o => {\n    editor: Atom.Editor.fromJs (Js.Unsafe.get o \"editor\"),\n    prefix: Js.to_string (Js.Unsafe.get o \"prefix\")\n  };\n};\n\nlet module Autocomplete = {\n  open Nuclide.Autocomplete;\n  let kindToJs =\n    fun | Value => Js.string \"value\"\n        | Class => Js.string \"class\"\n        | Require => Js.string \"require\"\n        | Type => Js.string \"type\"\n        | Variable => Js.string \"variable\"\n        | Constant => Js.string \"constant\"\n        | Property => Js.string \"property\"\n        | Method => Js.string \"method\"\n        | Function => Js.string \"function\"\n        | Keyword => Js.string \"keyword\"\n        | Tag => Js.string \"tag\"\n        | Snippet => Js.string \"snippet\"\n        | Import => Js.string \"import\";\n  let entryToJs e => Js.Unsafe.obj [|\n    (\"leftLabel\", Js.Unsafe.inject (Js.string e.leftLabel)),\n    (\"text\", Js.Unsafe.inject (Js.string e.text)),\n    (\"displayText\", Js.Unsafe.inject (Js.string e.displayText)),\n    (\"type\", Js.Unsafe.inject (kindToJs e.typee)),\n    (\"description\", Js.Unsafe.inject (Js.string e.description)),\n    (\"replacementPrefix\", Js.Unsafe.inject (Js.string e.replacementPrefix))\n  |];\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nlet (\\===) a b => String.compare a b === 0;\n\nlet startsWith str searchFor => {\n  let searchForLen = String.length searchFor;\n  let strLen = String.length str;\n  searchForLen <= strLen && String.sub str 0 searchForLen \\=== searchFor\n};\n\nlet module Regex = {\n  type t;\n  let create (s: string) :t => Js.Unsafe.new_obj \"RegExp\" [|Js.Unsafe.inject (Js.string s)|];\n};\n\nlet replace (s: string) (r: Regex.t) (replaceWith: string) :string => Js.to_string (\n  Js.Unsafe.meth_call\n    (Js.string s) \"replace\" [|Js.Unsafe.inject r, Js.Unsafe.inject (Js.string replaceWith)|]\n);\n\nlet split by::(r: Regex.t) (s: string) => {\n  let s = Js.string s;\n  let jsArr = Js.Unsafe.meth_call s \"split\" [|Js.Unsafe.inject r|];\n  let lst = Array.to_list (Js.to_array jsArr);\n  List.map (fun itm => Js.to_string itm) lst\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nlet startedMerlin: ref (option Js.Unsafe.any) = {contents: None};\n\nlet fixedEnv = Js.Unsafe.js_expr \"require('../lib/fixedEnv')\";\n\n/* This and the subsequent big js blocks are copied over from Nuclide. More convenient for now. */\nlet findNearestMerlinFile' = Js.Unsafe.js_expr {|\n  function findNearestMerlinFile(beginAtFilePath) {\n    var path = require('path');\n    var fs = require('fs');\n    var fileDir = path.dirname(beginAtFilePath);\n    var currentPath = path.resolve(fileDir);\n    do {\n      var fileToFind = path.join(currentPath, '.merlin');\n      var hasFile = fs.existsSync(fileToFind);\n      if (hasFile) {\n        return path.dirname(currentPath);\n      }\n\n      if (path.dirname(currentPath) === currentPath) {\n        // Bail\n        return '.';\n      }\n      currentPath = path.dirname(currentPath);\n    } while (true);\n  }\n|};\n\nlet findNearestMerlinFile beginAtFilePath::path => {\n  let result = Js.Unsafe.fun_call findNearestMerlinFile' [|Js.Unsafe.inject (Js.string path)|];\n  Js.to_string result\n};\n\nlet createMerlinReaderFnOnce' = Js.Unsafe.js_expr {|\n  function(ocamlMerlinPath, ocamlMerlinFlags, dotMerlinDir, fixedEnv) {\n    var spawn = require('child_process').spawn;\n    // To split while stripping out any leading/trailing space, we match on all\n    // *non*-whitespace.\n    var items = ocamlMerlinFlags === '' ? [] : ocamlMerlinFlags.split(/\\s+/);\n    var merlinProcess = spawn(ocamlMerlinPath, items, {cwd: dotMerlinDir, env: fixedEnv});\n    merlinProcess.stderr.on('data', function(d) {\n      console.error('Ocamlmerlin: something wrong happened:');\n      console.error(d.toString());\n    });\n\n    merlinProcess.stdout.on('close', function(d) {\n      console.error('Ocamlmerlin: closed.');\n    });\n\n    var cmdQueue = [];\n    var hasStartedReading = false;\n\n    var readline = require('readline');\n    var reader = readline.createInterface({\n      input: merlinProcess.stdout,\n      terminal: false,\n    });\n\n    return function(cmd, resolve, reject) {\n      cmdQueue.push([resolve, reject]);\n\n      if (!hasStartedReading) {\n        hasStartedReading = true;\n        reader.on('line', function(line) {\n          var response;\n          try {\n            response = JSON.parse(line);\n          } catch (err) {\n            response = null;\n          }\n          var resolveReject = cmdQueue.shift();\n          var resolve = resolveReject[0];\n          var reject = resolveReject[1];\n\n          if (!response || !Array.isArray(response) || response.length !== 2) {\n            reject(new Error('Unexpected ocamlmerlin output format: ' + line));\n            return;\n          }\n\n          var status = response[0];\n          var content = response[1];\n\n          var errorResponses = {\n            'failure': true,\n            'error': true,\n            'exception': true,\n          };\n\n          if (errorResponses[status]) {\n            reject(new Error('Ocamlmerlin returned an error: ' + line));\n            return;\n          }\n\n          resolve(content);\n        });\n      }\n\n      merlinProcess.stdin.write(JSON.stringify(cmd));\n    };\n  }\n|};\n\nlet createMerlinReaderFnOnce pathToMerlin::pathToMerlin merlinFlags::merlinFlags dotMerlinPath::dotMerlinPath =>\n  Js.Unsafe.fun_call\n    createMerlinReaderFnOnce'\n    [|\n      Js.Unsafe.inject (Js.string pathToMerlin),\n      Js.Unsafe.inject (Js.string merlinFlags),\n      Js.Unsafe.inject (Js.string dotMerlinPath),\n      Js.Unsafe.inject fixedEnv\n    |];\n\nlet startMerlinProcess path::path =>\n  switch startedMerlin.contents {\n  | Some readerFn => ()\n  | None => {\n      let atomReasonPathToMerlin = Atom.Config.get \"AtomReason.pathToMerlin\";\n      let atomReasonMerlinFlags = Atom.Config.get \"AtomReason.merlinFlags\";\n      let atomReasonMerlinLogFile = Atom.Config.get \"AtomReason.merlinLogFile\";\n      switch atomReasonMerlinLogFile {\n      | JsonString \"\" => ()\n      | JsonString s => Atom.Env.setEnvVar \"MERLIN_LOG\" s\n      | _ => ()\n      };\n      let readerFn =\n        createMerlinReaderFnOnce\n          pathToMerlin::(Atom.JsonValue.unsafeExtractString atomReasonPathToMerlin)\n          merlinFlags::(Atom.JsonValue.unsafeExtractString atomReasonMerlinFlags)\n          dotMerlinPath::(findNearestMerlinFile beginAtFilePath::path);\n      startedMerlin.contents = Some readerFn\n    }\n  };\n\nlet readOneLine cmd::cmd resolve reject =>\n  switch startedMerlin.contents {\n  | None => raise Not_found\n  | Some readerFn =>\n      Js.Unsafe.fun_call\n        readerFn\n        [|\n          Js.Unsafe.inject cmd,\n          Js.Unsafe.inject (Js.wrap_callback resolve),\n          Js.Unsafe.inject (Js.wrap_callback reject)\n        |]\n  };\n\n/* contextify is important for avoiding different buffers calling the backing merlin at the same time. */\n/* https://github.com/the-lambda-church/merlin/blob/d98a08d318ca14d9c702bbd6eeadbb762d325ce7/doc/dev/PROTOCOL.md#contextual-commands */\nlet contextify query::query path::path => Js.Unsafe.obj [|\n  (\"query\", Js.Unsafe.inject query),\n  (\"context\", Js.Unsafe.inject (Js.array [|Js.string \"auto\", Js.string path|]))\n|];\n\nlet prepareCommand text::text path::path query::query resolve reject => {\n  startMerlinProcess path;\n  /* These two commands should be run before every main command. */\n  readOneLine\n    cmd::(\n      contextify\n        /* The protocol command tells Merlin which API version we want to use. (2 for us) */\n        query::(\n          Js.array [|\n            Js.Unsafe.inject (Js.string \"protocol\"),\n            Js.Unsafe.inject (Js.string \"version\"),\n            Js.Unsafe.inject (Js.number_of_float 2.)\n          |]\n        )\n        path::path\n    )\n    (\n      fun _ =>\n        readOneLine\n          cmd::(\n            contextify\n              /* The tell command allows us to synchronize our text with Merlin's internal buffer. */\n              query::(Js.array [|Js.string \"tell\", Js.string \"start\", Js.string \"end\", Js.string text|])\n              path::path\n          )\n          (fun _ => readOneLine cmd::(contextify query::query path::path) resolve reject)\n          reject\n    )\n    reject\n};\n\nlet positionToJsMerlinPosition (line, col) => Js.Unsafe.obj [|\n  /* lines (rows) are 1-based for merlin, not 0-based, like for Atom */\n  (\"line\", Js.Unsafe.inject (Js.number_of_float (float_of_int (line + 1)))),\n  (\"col\", Js.Unsafe.inject (Js.number_of_float (float_of_int col)))\n|];\n\n/* Actual merlin commands we'll use. */\nlet getTypeHint path::path text::text position::position resolve reject =>\n  prepareCommand\n    text::text\n    path::path\n    query::(\n      Js.array [|\n        Js.Unsafe.inject (Js.string \"type\"),\n        Js.Unsafe.inject (Js.string \"enclosing\"),\n        Js.Unsafe.inject (Js.string \"at\"),\n        Js.Unsafe.inject (positionToJsMerlinPosition position)\n      |]\n    )\n    resolve\n    reject;\n\nlet getAutoCompleteSuggestions path::path text::text position::position prefix::prefix resolve reject =>\n  prepareCommand\n    text::text\n    path::path\n    query::(\n      Js.array [|\n        Js.Unsafe.inject (Js.string \"complete\"),\n        Js.Unsafe.inject (Js.string \"prefix\"),\n        Js.Unsafe.inject (Js.string prefix),\n        Js.Unsafe.inject (Js.string \"at\"),\n        Js.Unsafe.inject (positionToJsMerlinPosition position)\n      |]\n    )\n    resolve\n    reject;\n\nlet getDiagnostics path::path text::text resolve reject =>\n  prepareCommand\n    text::text path::path query::(Js.array [|Js.Unsafe.inject (Js.string \"errors\")|]) resolve reject;\n\n/* TODO: put this logic into reason and somewhere else. */\nlet normalizeLocateCommandResult' = Js.Unsafe.js_expr {|\n  function(o, path) {\n    if (typeof o === \"string\") {\n      return o\n    }\n    if (o.file == null) {\n      return {\n        file: path,\n\n        pos: o.pos,\n      };\n    }\n    return o;\n  }\n|};\n\nlet normalizeLocateCommandResult o path =>\n  Js.Unsafe.fun_call normalizeLocateCommandResult' [|o, Js.Unsafe.inject (Js.string path)|];\n\nlet locate path::path text::text extension::extension position::position resolve reject =>\n  prepareCommand\n    text::text\n    path::path\n    query::(\n      Js.array [|\n        Js.Unsafe.inject (Js.string \"locate\"),\n        Js.Unsafe.inject (Js.string \"\"),\n        Js.Unsafe.inject (Js.string extension),\n        Js.Unsafe.inject (Js.string \"at\"),\n        Js.Unsafe.inject (positionToJsMerlinPosition position)\n      |]\n    )\n    (fun successResult => resolve (normalizeLocateCommandResult successResult path))\n    reject;\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\n/* This is a somewhat stop-gap measure to convert ocaml type strings to reason ones by shelling out to the\nutility we assume is installed. */\nlet childProcess = Js.Unsafe.js_expr \"require('child_process')\";\nlet fixedEnv = Js.Unsafe.js_expr \"require('../lib/fixedEnv')\";\n\n/* Shelling out each type to pretty-print is expensive. We'll cache each result to avoid shelling out so much.\nWe'll also batch all the (uncached) types we need to shell out into a list and make the terminal command\ntake them and print them all at once. */\nlet formatCache = Hashtbl.create 20;\n\n/* Rarely used helper that isn't in the stdlib for totally understandable reasons. */\nlet insert at::at item::item l => {\n  let result = {contents: []};\n  let l = {contents: l};\n  for i in 0 to (List.length l.contents) {\n    if (i == at) {\n      result.contents = [item, ...result.contents]\n    } else {\n      result.contents = [List.hd l.contents, ...result.contents];\n      l.contents = List.tl l.contents\n    }\n  };\n  List.rev result.contents\n};\n\n/* Shell out to the terminal, get result back. */\nlet refmttype ocamlTypes =>\n  if (ocamlTypes == []) {\n    /* Special handling. According to our subsequent logic [] maps to \"\" then back to [\"\"], which violates\n    the invariant that n input items maps to n outputs. */\n    []\n  } else {\n    let refmttypePath =\n      Atom.JsonType.(\n        switch (Atom.Config.get \"AtomReason.pathToRefmttype\") {\n        | JsonString str => str\n        | _ => raise (Invalid_argument \"refmttypePath went wrong.\")\n        }\n      );\n    /* Concatenating with special, recognized separator that can't be present in what we need to format. */\n    let cmd = refmttypePath ^ \" \\\"\" ^ String.concat \"\\\\\\\"\" ocamlTypes ^ \"\\\"\";\n    Js.Unsafe.meth_call\n      childProcess\n      \"execSync\"\n      [|\n        Js.Unsafe.inject (Js.string cmd),\n        Js.Unsafe.inject (Js.Unsafe.obj [|\n          (\"env\", Js.Unsafe.inject fixedEnv),\n          (\"encoding\", Js.Unsafe.inject (Js.string \"utf-8\"))\n        |])\n      |]\n    |> Js.to_string\n    |> StringUtils.split by::(Js.Unsafe.js_expr {|/\\n/|}) /* Output printed types are one type per line. */\n    |> List.map Scanf.unescaped /* Restore the escaped line breaks. */\n  };\n\nlet formatOne ocamlType =>\n  try (Hashtbl.find formatCache ocamlType) {\n  | Not_found => {\n      let output = List.hd (refmttype [ocamlType]);\n      Hashtbl.add formatCache ocamlType output;\n      output\n    }\n  };\n\n/* More elaborate logic on batch formatting + shelling out a single time, instead of iterating through each\ntype and call `formatOne` (which equates to n shell out command, which is expensive). */\nlet formatMany ocamlTypes => {\n  let indices = {contents: []};\n  let formattedFromCache = {contents: []};\n  let unformatted = {contents: []};\n  /* We'll split the ocamlTypes to format into two lists: the ones that are already cached and the ones that\n  need to be shelled out. The shell command itself takes a list of types to format, so the logic here gets a\n  bit complex. */\n  List.iteri\n    (\n      fun i ocamlType =>\n        try {\n          let result = Hashtbl.find formatCache ocamlType;\n          formattedFromCache.contents = [result, ...formattedFromCache.contents]\n        } {\n        | Not_found => {\n            /* Indices are for bookkepping so that we can later merge (in the correct order)\n            formattedFromCache with the shelled result from unformatted. */\n            indices.contents = [i, ...indices.contents];\n            unformatted.contents = [ocamlType, ...unformatted.contents]\n          }\n        }\n    )\n    ocamlTypes;\n  indices.contents = List.rev indices.contents;\n  formattedFromCache.contents = List.rev formattedFromCache.contents;\n  unformatted.contents = List.rev unformatted.contents;\n  let returnedResults = {contents: refmttype unformatted.contents};\n  /* Mergining cached and uncached now */\n  assert (List.length returnedResults.contents == List.length unformatted.contents);\n  List.iteri\n    (\n      fun _ index => {\n        let item = List.hd returnedResults.contents;\n        Hashtbl.add formatCache (List.nth ocamlTypes index) item;\n        formattedFromCache.contents = insert at::index item::item formattedFromCache.contents;\n        returnedResults.contents = List.tl returnedResults.contents\n      }\n    )\n    indices.contents;\n  formattedFromCache.contents\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nlet jsMerlinErrorToNuclideDiagnostic filePath jsMerlinError => {\n  let merlinStart = Js.Unsafe.get jsMerlinError \"start\";\n  let merlinEnd = Js.Unsafe.get jsMerlinError \"end\";\n  let range =\n    Js.undefined === merlinStart || Js.undefined === merlinEnd ?\n      Atom.Range.emptyRange :\n      (\n        (Js.Unsafe.get merlinStart \"line\" - 1, Js.Unsafe.get merlinStart \"col\"),\n        (Js.Unsafe.get merlinEnd \"line\" - 1, Js.Unsafe.get merlinEnd \"col\")\n      );\n  let message = Js.Unsafe.get jsMerlinError \"message\";\n  /* One of  (\"type\"|\"parser\"|\"env\"|\"warning\"|\"unkown\") */\n  let merlinType = Js.Unsafe.get jsMerlinError \"type\";\n  let diagnosticType =\n    Js.string \"warning\" === merlinType ? Nuclide.Diagnostic.Warning : Nuclide.Diagnostic.Error;\n  Nuclide.Diagnostic.Message.FileDiagnosticMessage {\n    Nuclide.Diagnostic.Message.scope: `file,\n    providerName: \"Merlin\",\n    typee: diagnosticType,\n    filePath,\n    text: Some message,\n    html: None,\n    range: Some range,\n    trace: None\n  }\n};\n\nlet jsMerlinErrorsToNuclideDiagnostics filePath errors =>\n  Array.map (jsMerlinErrorToNuclideDiagnostic filePath) (Js.to_array errors);\n\nlet stringToMerlinCompletionEntryKind s =>\n  switch s {\n  | \"type\" => Merlin.Type\n  | \"Type\" => Merlin.Type\n  | \"value\" => Merlin.Value\n  | \"Value\" => Merlin.Value\n  | \"module\" => Merlin.Module\n  | \"Module\" => Merlin.Module\n  | \"constructor\" => Merlin.Constructor\n  | \"Constructor\" => Merlin.Constructor\n  | _ => Merlin.Value\n  };\n\nlet merlinCompletionEntryKindToNuclide k =>\n  switch k {\n  | Merlin.Type => Nuclide.Autocomplete.Type\n  | Merlin.Value => Nuclide.Autocomplete.Value\n  | Merlin.Module => Nuclide.Autocomplete.Require\n  | Merlin.Constructor => Nuclide.Autocomplete.Class\n  | _ => Nuclide.Autocomplete.Value\n  };\n\nlet jsMerlinCompletionEntryToMerlinEntry o => {\n  Merlin.desc: Js.to_string (Js.Unsafe.get o \"desc\"),\n  info: Js.to_string (Js.Unsafe.get o \"info\"),\n  kind: stringToMerlinCompletionEntryKind (Js.to_string (Js.Unsafe.get o \"kind\")),\n  name: Js.to_string (Js.Unsafe.get o \"name\")\n};\n\nlet merlinCompletionEntryToNuclide replacementPrefix e => {\n  Nuclide.Autocomplete.leftLabel: e.Merlin.desc,\n  /* Even though we display the type in the center (main column) */\n  /* we replace at cursor with the item.name. */\n  text: e.name,\n  /* Item.desc is the type sig.   */\n  displayText: e.Merlin.name,\n  /* type is the \"kind\" of label to use. */\n  typee: merlinCompletionEntryKindToNuclide e.kind,\n  /* Include the full type in the description just in case it gets truncated in */\n  /* the center column, you'll be able to see it in the description bar. */\n  description: e.desc,\n  replacementPrefix\n};\n\nlet jsMerlinTypeHintEntryToNuclide arr => {\n  let length = Js.Unsafe.get arr \"length\";\n  if (length == 0) {\n    Js.undefined\n  } else {\n    /* TODO: merlin gives us further type information if we expand our selection. Use it */\n    let firstType = Js.Unsafe.get arr \"0\";\n    let reasonHint = Js.to_string (Js.Unsafe.get firstType \"type\");\n    let merlinStartPos = Js.Unsafe.get firstType \"start\";\n    let merlinEndPos = Js.Unsafe.get firstType \"end\";\n    /* lines (rows) are 1-based for merlin, not 0-based, like for Atom */\n    let startRowColumn = (Js.Unsafe.get merlinStartPos \"line\" - 1, Js.Unsafe.get merlinStartPos \"col\");\n    let endRowColumn = (Js.Unsafe.get merlinEndPos \"line\" - 1, Js.Unsafe.get merlinEndPos \"col\");\n    Js.Unsafe.obj [|\n      (\"hint\", Js.Unsafe.inject (Js.string reasonHint)),\n      (\"range\", Js.Unsafe.inject (Atom.Range.toJs (startRowColumn, endRowColumn)))\n    |]\n  }\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nlet goToLocation' = Js.Unsafe.js_expr {|\n  function(res) {\n    // TODO: rewrite this in reason.\n    var goToLocation = require('nuclide/pkg/nuclide-atom-helpers').goToLocation;\n    if (typeof res === \"string\") {\n      console.error(res);\n      return;\n    }\n    goToLocation(res.file, res.pos.line - 1, res.pos.col);\n  }\n|};\n\nlet goToLocation result => Js.Unsafe.fun_call goToLocation' [|result|];\n\nlet getMerlinLocation editor::editor range::range => {\n  let path = AtomReasonCommon.path editor;\n  let extension = AtomReasonCommon.isInterface (Some path) ? \"mli\" : \"ml\";\n  let text = Atom.Buffer.getText editor;\n  let (startPosition, _) = range;\n  SuperMerlin.locate\n    path::path\n    text::text\n    extension::extension\n    position::startPosition\n    (fun successResult => goToLocation successResult)\n    /* TODO: use this */\n    (fun _ => ())\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nopen AtomReasonCommon;\n\nopen StringUtils;\n\nopen Atom;\n\nlet fixedEnv = Js.Unsafe.js_expr \"require('../lib/fixedEnv')\";\n\n/**\n * @param (Array.t string) standard output formatting of file.\n * @param int curCursorRow Current cursor row before formatting.\n * @param int curCursorColumn Current cursor column before formatting.\n * @return Nuclide.FileFormat.result\n */\nlet characterIndexForPositionInString stdOutLines (curCursorRow, curCursorColumn) => {\n  let result = {contents: []};\n  let arrLen = Array.length stdOutLines;\n  let charCount = {contents: 0};\n  let colCount = {contents: 0};\n  let rowCount = {contents: 0};\n  let finalCharCount = {contents: 0};\n  for iArr in 0 to (arrLen - 1) {\n    let line = stdOutLines.(iArr);\n    let lineLen = String.length line;\n    /* We also trim *trailing* whitespace for each line. */\n    let lenNotEndingInWhiteSpace = {contents: 0};\n    /* No guarantee that each line is actually a single line. */\n    for chPos in 0 to (lineLen - 1) {\n      let ch = line.[chPos];\n      if (ch === '\\n' || ch === '\\r') {\n        rowCount.contents = rowCount.contents + 1;\n        colCount.contents = 0\n      } else {\n        colCount.contents = colCount.contents + 1;\n        lenNotEndingInWhiteSpace.contents = lenNotEndingInWhiteSpace.contents + 1\n      };\n      charCount.contents = charCount.contents + 1;\n      if (rowCount.contents <= curCursorRow) {\n        if (colCount.contents <= curCursorColumn) {\n          finalCharCount.contents = charCount.contents\n        }\n      }\n    };\n    result.contents = [line, ...result.contents]\n  };\n  {\n    Nuclide.FileFormat.newCursor: finalCharCount.contents,\n    Nuclide.FileFormat.formatted: String.concat \"\" (List.rev result.contents)\n  }\n};\n\nlet formatImpl editor subText isInterface onComplete onFailure => {\n  let open Atom.JsonType;\n  let stdOutLines = {contents: [||]};\n  let stdErrLines = {contents: [||]};\n  let fmtPath =\n    switch (Atom.Config.get \"AtomReason.pathToReasonfmt\") {\n    | JsonString pth => pth\n    | _ => raise (Invalid_argument \"You must setup AtomReason.pathToReasonfmt in your Atom config\")\n    };\n  let printWidth =\n    switch (Atom.Config.get \"AtomReason.printWidth\") {\n    | JsonNum n => int_of_float n\n    | Empty => 110\n    | _ => raise (Invalid_argument \"AtomReason.printWidth must be an integer\")\n    };\n  let onStdOut line => stdOutLines.contents = Array.append stdOutLines.contents [|line|];\n  let onStdErr line => stdErrLines.contents = Array.append stdErrLines.contents [|line|];\n  let cursors = Editor.getCursors editor;\n  let (origCursorRow, origCursorCol) =\n    switch cursors {\n    | [] => (0, 0)\n    | [firstCursor, ...tl] => Atom.Cursor.getBufferPosition firstCursor\n    };\n  let onExit code => {\n    let formatResult = characterIndexForPositionInString stdOutLines.contents (origCursorRow, origCursorCol);\n    let stdErr = String.concat \"\\n\" (Array.to_list stdErrLines.contents);\n    onComplete code formatResult stdErr\n  };\n  let args = [\n    \"-print-width\",\n    string_of_int printWidth,\n    \"-use-stdin\",\n    \"true\",\n    \"-parse\",\n    \"re\",\n    \"-print\",\n    \"re\",\n    \"-is-interface-pp\",\n    isInterface ? \"true\" : \"false\"\n  ];\n  let proc =\n    Atom.BufferedProcess.create\n      options::{...Atom.Process.defaultOptions, env: fixedEnv}\n      stdout::onStdOut\n      stderr::onStdErr\n      exit::onExit\n      args::args\n      fmtPath;\n  let errorTitle = \"AtomReason could not spawn \" ^ fmtPath;\n  let handleError error handle => {\n    NotificationManager.addError options::{...NotificationManager.defaultOptions, detail: error} errorTitle;\n    /* TODO: this doesn't type check, but sits across the border of js <-> reason so it passes. onFailure (the\n       promise `onFailure`) takes in a reason string, when it reality it should take in a Js.string like the other\n       locations in this file where we do `onFailure stdErr` */\n    onFailure \"Failure!\";\n    handle ()\n  };\n  BufferedProcess.onWillThrowError proc handleError;\n  /* Underlying child process. */\n  let process = BufferedProcess.process proc;\n  ChildProcess.writeStdin process subText;\n  ChildProcess.endStdin process\n};\n\n/**\n * A better way to restore the cursor position is:\n * - If only white space change occured before where the cursor was, place\n * cursor at *new* location after whitespce changes.\n * - As an enhancement, consider insertion/elimination of certain\n * characters/sequences in the same class as white space changes.\n * (extra/removed parens, or even \"= fun\").\n * - If text before cursor changed in ways beyond \"whitespace\" changes, fall\n * back to current behavior.\n */\nlet getEntireFormatting editor range notifySuccess notifyInvalid notifyInfo resolve reject => {\n  let buffer = Editor.getBuffer editor;\n  let text = Buffer.getText buffer;\n  let subText = Buffer.getTextInRange buffer range;\n  formatImpl\n    editor\n    subText\n    (isInterface (Editor.getPath editor))\n    (\n      fun code (formatResult: Nuclide.FileFormat.result) stdErr => {\n        if (not (code == 0.0)) {\n          notifyInvalid \"Syntax Error\"\n        } else if (formatResult.formatted \\=== text) {\n          notifyInfo \"Already Formatted\"\n        } else {\n          notifySuccess \"Format: Success\"\n        };\n        code == 0.0 ? resolve formatResult : reject stdErr\n      }\n    )\n    reject\n};\n\nlet getPartialFormatting editor range notifySuccess notifyInvalid notifyInfo resolve reject => {\n  let buffer = Editor.getBuffer editor;\n  let subText = Buffer.getTextInRange buffer range;\n  formatImpl\n    editor\n    subText\n    (isInterface (Editor.getPath editor))\n    (\n      fun code (formatResult: Nuclide.FileFormat.result) stdErr => {\n        if (not (code == 0.0)) {\n          notifyInvalid \"Syntax Error\"\n        } else if (formatResult.formatted \\=== subText) {\n          notifyInfo \"Already Formatted\"\n        } else {\n          notifySuccess \"Format: Success\"\n        };\n        /* One bit of Js logic remaining in this otherwise \"pure\" module. */\n        code == 0.0 ? resolve formatResult.formatted : reject stdErr\n      }\n    )\n    reject\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\nopen AtomReasonCommon;\n\ntype t;\n\n/**\n * You can test source maps with:\n * -----------------------------\n *\n *  node -e \"console.log(\n *    (new require('source-map').SourceMapConsumer(JSON.parse(require('fs').readFileSync('./app.map')))).originalPositionFor({line:5524, column:10})\n *  )\"\n */\n/**\n   A typical Merlin payload might look something like:\n\n  [\n    {\n      \"start\": { \"line\": 53, \"col\": 40 }, \"end\": { \"line\": 53, \"col\": 41 },\n      \"type\": \"type\", \"sub\": [], \"valid\": true,\n      \"message\": \"Uninterpreted extension 'SyntaxError'.\"\n    },\n    {\n      \"start\": { \"line\": 65, \"col\": 16 }, \"end\": { \"line\": 65, \"col\": 40 },\n      \"type\": \"type\", \"sub\": [], \"valid\": true,\n      \"message\": \"Error: Unbound module MerlinService\"\n    },\n    {\n      \"start\": { \"line\": 66, \"col\": 35 }, \"end\": { \"line\": 66, \"col\": 48 },\n      \"type\": \"type\", \"sub\": [], \"valid\": true,\n      \"message\": \"Error: Unbound value makeTellCommand\"\n    },\n    {\n      \"start\":{\"line\":5,\"col\":8},\"end\":{\"line\":5,\"col\":9},\n      \"type\":\"warning\",\"sub\":[], \"valid\":true,\n      \"message\":\"Warning 26: unused variable x.\\n\"\n    }\n  ]\n */\n\n/**\n * This looks strange that we are converting to ML data but then quickly\n * converting back to JS types, but it will make more sense when everything\n * else above and below is ML, we have to start the conversion somewhere.\n */\nlet getMerlinDiagnostics editor::editor resolve reject => {\n  let text = Atom.Buffer.getText (Atom.Editor.getBuffer editor);\n  let path = AtomReasonCommon.path editor;\n  SuperMerlin.getDiagnostics\n    path::path\n    text::text\n    (\n      fun successResult => resolve (\n        MerlinServiceConvert.jsMerlinErrorsToNuclideDiagnostics path successResult\n      )\n    )\n    reject\n};\n",
  "/*\n * Copyright (c) 2015-present, Facebook, Inc.\n * All rights reserved.\n *\n * vim: set ft=rust:\n * vim: set ft=reason:\n */\n/*\n * Ideally, most of AtomReason would be in pure Reason, and the parts that need to\n * to convert to/from JS would be at the edges (Index.re, and SuperMerlin.re).\n */\nopen AtomReasonCommon;\n\n/* These exports will be visible to main.js, under AtomReason */\nexport\n  \"getDiagnostics\"\n  (\n    Js.wrap_callback (\n      fun jsEditor => Atom.Promise.createFakePromise (\n        fun resolve reject =>\n          AtomReasonDiagnostics.getMerlinDiagnostics\n            /* editor::(Atom.Editor.fromJs jsEditor) */\n            editor::(Atom.Editor.fromJs jsEditor)\n            (\n              fun successResult => resolve (\n                Js.array (Array.map NuclideJs.Diagnostic.Message.toJs successResult)\n              )\n            )\n            /* TODO: this has never been used. */\n            reject\n      )\n    )\n  );\n\nexport\n  \"getEntireFormatting\"\n  (\n    Js.wrap_callback (\n      fun jsEditor jsRange jsNotifySuccess jsNotifyInvalid jsNotifyInfo => {\n        let editor = Atom.Editor.fromJs jsEditor;\n        let range = Atom.Range.fromJs jsRange;\n        let notifySuccess msg => Js.Unsafe.fun_call jsNotifySuccess [|Js.Unsafe.inject (Js.string msg)|];\n        let notifyInvalid msg => Js.Unsafe.fun_call jsNotifyInvalid [|Js.Unsafe.inject (Js.string msg)|];\n        let notifyInfo msg => Js.Unsafe.fun_call jsNotifyInfo [|Js.Unsafe.inject (Js.string msg)|];\n        Atom.Promise.createFakePromise (\n          fun resolve reject =>\n            AtomReasonFormat.getEntireFormatting\n              editor\n              range\n              notifySuccess\n              notifyInvalid\n              notifyInfo\n              (fun successResult => resolve (NuclideJs.FileFormat.toJs successResult))\n              (fun rejectedMsg => reject (Js.string rejectedMsg))\n        )\n      }\n    )\n  );\n\nexport\n  \"getPartialFormatting\"\n  (\n    Js.wrap_callback (\n      fun jsEditor jsRange jsNotifySuccess jsNotifyInvalid jsNotifyInfo => {\n        let editor = Atom.Editor.fromJs jsEditor;\n        let range = Atom.Range.fromJs jsRange;\n        let notifySuccess msg => Js.Unsafe.fun_call jsNotifySuccess [|Js.Unsafe.inject (Js.string msg)|];\n        let notifyInvalid msg => Js.Unsafe.fun_call jsNotifyInvalid [|Js.Unsafe.inject (Js.string msg)|];\n        let notifyInfo msg => Js.Unsafe.fun_call jsNotifyInfo [|Js.Unsafe.inject (Js.string msg)|];\n        Atom.Promise.createFakePromise (\n          fun resolve reject =>\n            AtomReasonFormat.getPartialFormatting\n              editor\n              range\n              notifySuccess\n              notifyInvalid\n              notifyInfo\n              (fun successResult => resolve (Js.string successResult))\n              (fun rejectedMsg => reject (Js.string rejectedMsg))\n        )\n      }\n    )\n  );\n\nexport\n  \"getNuclideJsAutocompleteSuggestions\"\n  (\n    Js.wrap_callback (\n      fun request => {\n        let request = NuclideJs.AutocompleteProviderRequest.fromJs request;\n        let editor = request.Nuclide.AutocompleteProviderRequest.editor;\n        let prefix = request.prefix;\n        let text = Atom.Buffer.getText (Atom.Editor.getBuffer editor);\n        let (line, col) as position = Atom.Cursor.getBufferPosition (List.hd (Atom.Editor.getCursors editor));\n        /**\n         * The default prefix at something like `Printf.[cursor]` is just the dot. Compute\n         * `linePrefix` so that ocamlmerlin gets more context. Compute `replacementPrefix`\n         * to make sure that the existing dot doesn't get clobbered when autocompleting.\n         */\n        let linePrefix = String.sub (Atom.Editor.lineTextForBufferRow editor line) 0 col;\n        let linePrefix =\n          String.length linePrefix === 0 ?\n            linePrefix :\n            {\n              let regex = Js.Unsafe.js_expr {|/([ |\\t\\[\\](){}<>,+*\\/-])/|};\n              let lst = StringUtils.split linePrefix by::regex;\n              let len = List.length lst;\n              len > 0 ? List.nth lst (len - 1) : linePrefix\n            };\n        if (String.length (String.trim linePrefix) === 0 || String.length (String.trim prefix) === 0) {\n          Atom.Promise.createFakePromise (fun resolve reject => resolve (Js.array [||]))\n        } else {\n          let replacementPrefix =\n            if (String.contains prefix '.' && String.index prefix '.' === 0) {\n              String.sub prefix 1 (String.length prefix - 1)\n            } else {\n              prefix\n            };\n          Atom.Promise.createFakePromise (\n            fun resolve reject =>\n              SuperMerlin.getAutoCompleteSuggestions\n                path::(path editor)\n                text::text\n                position::position\n                prefix::linePrefix\n                (\n                  fun result => {\n                    let resultRe =\n                      Js.Unsafe.get result \"entries\" |>\n                        Js.to_array |>\n                        Array.to_list |>\n                        List.map MerlinServiceConvert.jsMerlinCompletionEntryToMerlinEntry;\n                    resultRe |>\n                      List.map (MerlinServiceConvert.merlinCompletionEntryToNuclide replacementPrefix) |>\n                      List.map NuclideJs.Autocomplete.entryToJs |>\n                      Array.of_list |>\n                      Js.array |>\n                      resolve\n                  }\n                )\n                /* TODO: NOT ALWAYS STRING MIGHT BE ERROR FRMATTER */\n                reject\n          )\n        }\n      }\n    )\n  );\n\nexport\n  \"getNuclideJsTypeHint\"\n  (\n    Js.wrap_callback (\n      fun jsEditor position => {\n        /* TODO: make selection work in conjunction with expansion */\n        /* TODO: currently gets the first type hint. The rest are the types of the expanded scope. Will use\n           them one day. */\n        let position = Atom.Point.fromJs position;\n        let text = Atom.Buffer.getText (Atom.Editor.getBuffer jsEditor);\n        Atom.Promise.createFakePromise (\n          fun resolve reject =>\n            SuperMerlin.getTypeHint\n              path::(path jsEditor)\n              text::text\n              position::position\n              (fun result => resolve (MerlinServiceConvert.jsMerlinTypeHintEntryToNuclide result))\n              (fun rejectedMsg => reject (Js.string rejectedMsg))\n        )\n      }\n    )\n  );\n\nexport\n  \"getLocation\"\n  (\n    Js.wrap_callback (\n      fun jsEditor _ range => {\n        let callback = Js.wrap_callback (\n          fun () =>\n            AtomReasonLocate.getMerlinLocation\n              editor::(Atom.Editor.fromJs jsEditor) range::(Atom.Range.fromJs range)\n        );\n        Js.Unsafe.obj [|(\"range\", Js.Unsafe.inject range), (\"callback\", Js.Unsafe.inject callback)|]\n      }\n    )\n  );\n",
  "(***********************************************************************)\n(*                                                                     *)\n(*                                OCaml                                *)\n(*                                                                     *)\n(*            Xavier Leroy, projet Cristal, INRIA Rocquencourt         *)\n(*                                                                     *)\n(*  Copyright 1996 Institut National de Recherche en Informatique et   *)\n(*  en Automatique.  All rights reserved.  This file is distributed    *)\n(*  under the terms of the GNU Library General Public License, with    *)\n(*  the special exception on linking described in file ../LICENSE.     *)\n(*                                                                     *)\n(***********************************************************************)\n\n(* Ensure that [at_exit] functions are called at the end of every program *)\n\nlet _ = do_at_exit()\n"]}