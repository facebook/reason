// Generated by js_of_ocaml 2.8.2+git-cb17820
(function(joo_global_object)
   {"use strict";
     /*<<fs.js 25 0>>*/  /*<<fs.js 25 15>>*/ var file_inode=0;
     /*<<unix.js 2 0>>*/ function unix_gettimeofday()
     { /*<<unix.js 3 2>>*/ return  /*<<unix.js 3 9>>*/ new Date().getTime()
             /
             1e3 /*<<unix.js 4 0>>*/ }
     /*<<unix.js 8 0>>*/ function unix_time()
     { /*<<unix.js 9 2>>*/ return  /*<<unix.js 9 9>>*/ Math.floor
              ( /*<<unix.js 9 20>>*/ unix_gettimeofday()) /*<<unix.js 10 0>>*/ }
     /*<<fs.js 29 0>>*/ function MlDir()
     {this.content = {};
      this.inode = file_inode++;
       /*<<fs.js 31 18>>*/  /*<<fs.js 31 26>>*/ var
       now=
         /*<<fs.js 31 28>>*/ unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now /*<<fs.js 35 18>>*/ }
    MlDir.prototype
    =
    {exists:
     function(name)
      { /*<<fs.js 37 24>>*/ return this.content[name]?1:0 /*<<fs.js 37 9>>*/ },
     mk:function(name,c){this.content[name] = c /*<<fs.js 38 5>>*/ },
     get:
     function(name)
      { /*<<fs.js 39 21>>*/ return this.content[name] /*<<fs.js 39 6>>*/ },
     list:
     function()
      { /*<<fs.js 41 4>>*/  /*<<fs.js 41 10>>*/ var a=[];
        /*<<fs.js 42 4>>*/ for(var n in this.content)
         /*<<fs.js 43 6>>*/ a.push(n);
        /*<<fs.js 44 4>>*/ return a /*<<fs.js 40 7>>*/ },
     remove:function(name){delete this.content[name] /*<<fs.js 46 9>>*/ }};
     /*<<fs.js 23 0>>*/  /*<<fs.js 23 21>>*/ var caml_current_dir="/";
     /*<<mlString.js 50 0>>*/ function caml_str_repeat(n,s)
     { /*<<mlString.js 51 2>>*/ if(s.repeat)
        /*<<mlString.js 51 16>>*/ return  /*<<mlString.js 51 23>>*/ s.repeat
               (n);
       /*<<mlString.js 52 2>>*/ var
        /*<<mlString.js 52 8>>*/ r="",
        /*<<mlString.js 52 16>>*/ l=0;
       /*<<mlString.js 53 2>>*/ if(n == 0) /*<<mlString.js 53 14>>*/ return r;
       /*<<mlString.js 54 2>>*/ for(;;)
        /*<<mlString.js 54 10>>*/ { /*<<mlString.js 55 4>>*/ if(n & 1)r += s;
        n >>= 1;
         /*<<mlString.js 57 4>>*/ if(n == 0)
          /*<<mlString.js 57 16>>*/ return r;
        s += s;
        l++;
         /*<<mlString.js 60 4>>*/ if(l == 9)
          /*<<mlString.js 60 16>>*/  /*<<mlString.js 61 6>>*/ s.slice(0,1)} /*<<mlString.js 66 0>>*/ }
     /*<<stdlib.js 23 0>>*/ function raw_array_sub(a,i,l)
     { /*<<stdlib.js 24 2>>*/  /*<<stdlib.js 24 8>>*/ var b=new Array(l);
       /*<<stdlib.js 25 2>>*/ for( /*<<stdlib.js 25 12>>*/ var j=0;j < l;j++)
       b[j] = a[i + j];
       /*<<stdlib.js 26 2>>*/ return b /*<<stdlib.js 27 0>>*/ }
     /*<<mlString.js 70 0>>*/ function caml_subarray_to_string(a,i,len)
     { /*<<mlString.js 71 2>>*/  /*<<mlString.js 71 8>>*/ var
       f=
        String.fromCharCode;
       /*<<mlString.js 72 2>>*/ if(i == 0 && len <= 4096 && len == a.length)
        /*<<mlString.js 72 48>>*/ return  /*<<mlString.js 72 55>>*/ f.apply
               (null,a);
       /*<<mlString.js 71 2>>*/  /*<<mlString.js 73 8>>*/ var s="";
       /*<<mlString.js 74 2>>*/ for(;0 < len;i += 1024,len -= 1024)
       s
       +=
        /*<<mlString.js 75 9>>*/ f.apply
        (null,
          /*<<mlString.js 75 24>>*/ raw_array_sub
          (a,i, /*<<mlString.js 75 43>>*/ Math.min(len,1024)));
       /*<<mlString.js 76 2>>*/ return s /*<<mlString.js 77 0>>*/ }
     /*<<mlString.js 291 0>>*/ function caml_convert_string_to_bytes(s)
     { /*<<mlString.js 293 2>>*/ if(s.t == 2)
       s.c
       +=
        /*<<mlString.js 294 11>>*/ caml_str_repeat(s.l - s.c.length,"\0");
      else
       s.c
       =
        /*<<mlString.js 296 10>>*/ caml_subarray_to_string(s.c,0,s.c.length);
      s.t = 0 /*<<mlString.js 298 0>>*/ }
     /*<<mlString.js 162 0>>*/ function caml_is_ascii(s)
     { /*<<mlString.js 164 2>>*/ if(s.length < 24)
        /*<<mlString.js 164 21>>*/ { /*<<mlString.js 166 4>>*/ for
         ( /*<<mlString.js 166 15>>*/ var i=0;i < s.length;i++)
          /*<<mlString.js 166 39>>*/ if
          ( /*<<mlString.js 166 43>>*/ s.charCodeAt(i) > 127)
           /*<<mlString.js 166 66>>*/ return false;
         /*<<mlString.js 167 4>>*/ return true}
      else
        /*<<mlString.js 169 4>>*/ return ! /*<<mlString.js 169 12>>*/ /[^\x00-\x7f]/.test
               (s) /*<<mlString.js 170 0>>*/ }
     /*<<mlString.js 115 0>>*/ function caml_utf16_of_utf8(s)
     { /*<<mlString.js 116 2>>*/ for
       (var
          /*<<mlString.js 116 13>>*/ b="",
          /*<<mlString.js 116 21>>*/ t="",
         c,
         c1,
         c2,
         v,
          /*<<mlString.js 116 43>>*/ i=0,
          /*<<mlString.js 116 50>>*/ l=s.length;
        i
        <
        l;
        i++)
        /*<<mlString.js 116 74>>*/ {c1
        =
         /*<<mlString.js 117 9>>*/ s.charCodeAt(i);
         /*<<mlString.js 118 4>>*/ if(c1 < 128)
          /*<<mlString.js 118 19>>*/ { /*<<mlString.js 119 6>>*/ for
           ( /*<<mlString.js 119 17>>*/ var j=i + 1;
            j
            <
            l
            &&
            (c1 =  /*<<mlString.js 119 43>>*/ s.charCodeAt(j))
            <
            128;
            j++)
            /*<<mlString.js 119 72>>*/ ;
           /*<<mlString.js 120 6>>*/ if(j - i > 512)
            /*<<mlString.js 120 23>>*/ { /*<<mlString.js 120 25>>*/ t.substr
             (0,1);
            b += t;
            t = "";
            b +=  /*<<mlString.js 120 62>>*/ s.slice(i,j)}
          else
           t +=  /*<<mlString.js 121 16>>*/ s.slice(i,j);
           /*<<mlString.js 122 6>>*/ if(j == l)
            /*<<mlString.js 122 18>>*/ break;
          i = j}
        v = 1;
         /*<<mlString.js 126 4>>*/ if
         (++i
          <
          l
          &&
          ((c2 =  /*<<mlString.js 126 29>>*/ s.charCodeAt(i)) & -64)
          ==
          128)
          /*<<mlString.js 126 62>>*/ {c = c2 + (c1 << 6);
           /*<<mlString.js 128 6>>*/ if(c1 < 224)
            /*<<mlString.js 128 21>>*/ {v = c - 12416;
             /*<<mlString.js 130 8>>*/ if(v < 128)v = 1}
          else
            /*<<mlString.js 131 13>>*/ {v = 2;
             /*<<mlString.js 133 8>>*/ if
             (++i
              <
              l
              &&
              ((c2 =  /*<<mlString.js 133 33>>*/ s.charCodeAt(i)) & -64)
              ==
              128)
              /*<<mlString.js 133 66>>*/ {c = c2 + (c << 6);
               /*<<mlString.js 135 10>>*/ if(c1 < 240)
                /*<<mlString.js 135 25>>*/ {v = c - 925824;
                 /*<<mlString.js 137 12>>*/ if
                 (v < 2048 || v >= 55295 && v < 57344)
                 v = 2}
              else
                /*<<mlString.js 138 17>>*/ {v = 3;
                 /*<<mlString.js 140 14>>*/ if
                 (++i
                  <
                  l
                  &&
                  ((c2 =  /*<<mlString.js 140 39>>*/ s.charCodeAt(i)) & -64)
                  ==
                  128
                  &&
                  c1
                  <
                  245)
                  /*<<mlString.js 141 31>>*/ {v = c2 - 63447168 + (c << 6);
                   /*<<mlString.js 143 16>>*/ if(v < 65536 || v > 1114111)
                   v = 3}}}}}
         /*<<mlString.js 149 4>>*/ if(v < 4)
          /*<<mlString.js 149 15>>*/ {i -= v;t += "\ufffd"}
        else
          /*<<mlString.js 152 11>>*/ if(v > 65535)
          t
          +=
           /*<<mlString.js 153 11>>*/ String.fromCharCode
           (55232 + (v >> 10),56320 + (v & 1023));
         else
          t +=  /*<<mlString.js 155 11>>*/ String.fromCharCode(v);
         /*<<mlString.js 156 4>>*/ if(t.length > 1024)
          /*<<mlString.js 156 25>>*/ { /*<<mlString.js 156 26>>*/ t.substr
           (0,1);
          b += t;
          t = ""}}
       /*<<mlString.js 158 2>>*/ return b + t /*<<mlString.js 159 0>>*/ }
     /*<<mlString.js 174 0>>*/ function caml_to_js_string(s)
     { /*<<mlString.js 175 2>>*/ switch(s.t)
       {case 9: /*<<mlString.js 177 4>>*/ return s.c;
        default: /*<<mlString.js 179 4>>*/ caml_convert_string_to_bytes(s);case 0:
          /*<<mlString.js 181 4>>*/ if
          ( /*<<mlString.js 181 8>>*/ caml_is_ascii(s.c))
           /*<<mlString.js 181 28>>*/ {s.t = 9;
            /*<<mlString.js 183 6>>*/ return s.c}
         s.t = 8;
        case 8:
          /*<<mlString.js 187 4>>*/ return  /*<<mlString.js 187 11>>*/ caml_utf16_of_utf8
                 (s.c)
        } /*<<mlString.js 189 0>>*/ }
     /*<<mlString.js 284 0>>*/ function MlString(tag,contents,length)
     {this.t = tag;
      this.c = contents;
      this.l = length /*<<mlString.js 286 0>>*/ }
    MlString.prototype.toString
    =
    function()
     { /*<<mlString.js 287 41>>*/ return  /*<<mlString.js 287 48>>*/ caml_to_js_string
              (this) /*<<mlString.js 287 30>>*/ };
     /*<<fs.js 107 0>>*/ function caml_make_path(name)
     {name
      =
      name instanceof MlString? /*<<fs.js 108 34>>*/ name.toString():name;
       /*<<fs.js 109 2>>*/ if( /*<<fs.js 109 5>>*/ name.charCodeAt(0) != 47)
       name = caml_current_dir + name;
       /*<<fs.js 111 2>>*/ var
        /*<<fs.js 111 11>>*/ comp= /*<<fs.js 111 13>>*/ name.split("/"),
        /*<<fs.js 112 12>>*/ ncomp=[];
       /*<<fs.js 113 2>>*/ for
       ( /*<<fs.js 113 12>>*/ var i=0;i < comp.length;i++)
        /*<<fs.js 113 36>>*/ switch(comp[i])
        {case "..":
           /*<<fs.js 115 15>>*/ if(ncomp.length > 1)
            /*<<fs.js 115 34>>*/ ncomp.pop();
           /*<<fs.js 115 47>>*/ break;
         case ".": /*<<fs.js 116 14>>*/ break;
         case "":
           /*<<fs.js 117 13>>*/ if(ncomp.length == 0)
            /*<<fs.js 117 35>>*/ ncomp.push("");
           /*<<fs.js 117 51>>*/ break;
         default:
           /*<<fs.js 118 13>>*/ ncomp.push(comp[i]);
           /*<<fs.js 118 33>>*/ break}
      ncomp.orig = name;
       /*<<fs.js 122 2>>*/ return ncomp /*<<fs.js 124 0>>*/ }
     /*<<stdlib.js 125 0>>*/ function caml_raise_with_arg(tag,arg)
     { /*<<stdlib.js 125 42>>*/ throw [0,tag,arg] /*<<stdlib.js 125 63>>*/ }
     /*<<mlString.js 354 0>>*/ function caml_new_string(s)
     { /*<<mlString.js 354 31>>*/ return new MlString(0,s,s.length) /*<<mlString.js 354 66>>*/ }
     /*<<stdlib.js 129 0>>*/ function caml_raise_with_string(tag,msg)
     { /*<<stdlib.js 130 2>>*/ caml_raise_with_arg
       (tag, /*<<stdlib.js 130 28>>*/ caml_new_string(msg)) /*<<stdlib.js 131 0>>*/ }
     /*<<stdlib.js 92 0>>*/  /*<<stdlib.js 92 21>>*/ var caml_global_data=[0];
     /*<<stdlib.js 135 0>>*/ function caml_raise_sys_error(msg)
     { /*<<stdlib.js 136 2>>*/ caml_raise_with_string
       (caml_global_data.Sys_error,msg) /*<<stdlib.js 137 0>>*/ }
     /*<<fs.js 72 0>>*/  /*<<fs.js 72 18>>*/ var caml_root_dir=new MlDir();
     /*<<fs.js 73 0>>*/ caml_root_dir.mk("",new MlDir());
     /*<<fs.js 241 0>>*/ function caml_fs_register_autoload(path,f)
     { /*<<fs.js 242 2>>*/ var
        /*<<fs.js 242 11>>*/ path= /*<<fs.js 242 13>>*/ caml_make_path(path),
        /*<<fs.js 243 10>>*/ dir=caml_root_dir;
       /*<<fs.js 244 2>>*/ for
       ( /*<<fs.js 244 11>>*/ var i=0;i < path.length;i++)
        /*<<fs.js 244 32>>*/ { /*<<fs.js 245 4>>*/  /*<<fs.js 245 10>>*/ var
         d=
          path[i];
         /*<<fs.js 246 4>>*/ if(! /*<<fs.js 246 9>>*/ dir.exists(d))
          /*<<fs.js 247 6>>*/ dir.mk(d,new MlDir());
        dir =  /*<<fs.js 248 10>>*/ dir.get(d);
         /*<<fs.js 249 4>>*/ if(!(dir instanceof MlDir))
          /*<<fs.js 250 6>>*/ caml_raise_sys_error
          (path.orig + " : not a directory")}
      dir.auto = f;
       /*<<fs.js 253 2>>*/ return 0 /*<<fs.js 254 0>>*/ }
     /*<<stdlib.js 1076 0>>*/  /*<<stdlib.js 1076 20>>*/ var
     caml_oo_last_id=
      0;
     /*<<mlString.js 513 0>>*/ function caml_ml_string_length(s)
     { /*<<mlString.js 513 36>>*/ return s.l /*<<mlString.js 513 47>>*/ }
     /*<<mlString.js 192 0>>*/ function caml_string_unsafe_get(s,i)
     { /*<<mlString.js 193 2>>*/ switch(s.t & 6)
       {default:
          /*<<mlString.js 195 4>>*/ if(i >= s.c.length)
           /*<<mlString.js 195 25>>*/ return 0;case 0:
          /*<<mlString.js 197 4>>*/ return  /*<<mlString.js 197 11>>*/ s.c.charCodeAt
                 (i);
        case 4: /*<<mlString.js 199 4>>*/ return s.c[i]
        } /*<<mlString.js 201 0>>*/ }
     /*<<int64.js 60 0>>*/ function caml_int64_add(x,y)
     { /*<<int64.js 61 2>>*/ var
        /*<<int64.js 61 9>>*/ z1=x[1] + y[1],
        /*<<int64.js 62 9>>*/ z2=x[2] + y[2] + (z1 >> 24),
        /*<<int64.js 63 9>>*/ z3=x[3] + y[3] + (z2 >> 24);
       /*<<int64.js 64 2>>*/ return [255,
              z1 & 16777215,
              z2 & 16777215,
              z3 & 65535] /*<<int64.js 65 0>>*/ }
     /*<<int64.js 21 0>>*/  /*<<int64.js 21 22>>*/ var
     caml_int64_offset=
       /*<<int64.js 21 24>>*/ Math.pow(2,-24);
     /*<<int64.js 77 0>>*/ function caml_int64_mul(x,y)
     { /*<<int64.js 78 2>>*/ var
        /*<<int64.js 78 9>>*/ z1=x[1] * y[1],
        /*<<int64.js 79 9>>*/ z2=
        (z1 * caml_int64_offset | 0)
        +
        x[2]
        *
        y[1]
        +
        x[1]
        *
        y[2],
        /*<<int64.js 80 9>>*/ z3=
        (z2 * caml_int64_offset | 0)
        +
        x[3]
        *
        y[1]
        +
        x[2]
        *
        y[2]
        +
        x[1]
        *
        y[3];
       /*<<int64.js 81 2>>*/ return [255,
              z1 & 16777215,
              z2 & 16777215,
              z3 & 65535] /*<<int64.js 82 0>>*/ }
     /*<<int64.js 52 0>>*/ function caml_int64_neg(x)
     { /*<<int64.js 53 2>>*/ var
        /*<<int64.js 53 9>>*/ y1=-x[1],
        /*<<int64.js 54 9>>*/ y2=-x[2] + (y1 >> 24),
        /*<<int64.js 55 9>>*/ y3=-x[3] + (y2 >> 24);
       /*<<int64.js 56 2>>*/ return [255,
              y1 & 16777215,
              y2 & 16777215,
              y3 & 65535] /*<<int64.js 57 0>>*/ }
     /*<<int64.js 241 0>>*/ function caml_int64_of_int32(x)
     { /*<<int64.js 242 2>>*/ return [255,
              x & 16777215,
              x >> 24 & 16777215,
              x >> 31 & 65535] /*<<int64.js 243 0>>*/ }
     /*<<stdlib.js 234 0>>*/ function caml_obj_dup(x)
     { /*<<stdlib.js 235 2>>*/ var
        /*<<stdlib.js 235 8>>*/ l=x.length,
        /*<<stdlib.js 236 8>>*/ a=new Array(l);
       /*<<stdlib.js 237 2>>*/ for
       ( /*<<stdlib.js 237 12>>*/ var i=0;i < l;i++)
       a[i] = x[i];
       /*<<stdlib.js 238 2>>*/ return a /*<<stdlib.js 239 0>>*/ }
     /*<<int64.js 68 0>>*/ function caml_int64_sub(x,y)
     { /*<<int64.js 69 2>>*/ var
        /*<<int64.js 69 9>>*/ z1=x[1] - y[1],
        /*<<int64.js 70 9>>*/ z2=x[2] - y[2] + (z1 >> 24),
        /*<<int64.js 71 9>>*/ z3=x[3] - y[3] + (z2 >> 24);
       /*<<int64.js 72 2>>*/ return [255,
              z1 & 16777215,
              z2 & 16777215,
              z3 & 65535] /*<<int64.js 73 0>>*/ }
     /*<<int64.js 24 0>>*/ function caml_int64_ucompare(x,y)
     { /*<<int64.js 25 2>>*/ if(x[3] > y[3]) /*<<int64.js 25 19>>*/ return 1;
       /*<<int64.js 26 2>>*/ if(x[3] < y[3]) /*<<int64.js 26 19>>*/ return -1;
       /*<<int64.js 27 2>>*/ if(x[2] > y[2]) /*<<int64.js 27 19>>*/ return 1;
       /*<<int64.js 28 2>>*/ if(x[2] < y[2]) /*<<int64.js 28 19>>*/ return -1;
       /*<<int64.js 29 2>>*/ if(x[1] > y[1]) /*<<int64.js 29 19>>*/ return 1;
       /*<<int64.js 30 2>>*/ if(x[1] < y[1]) /*<<int64.js 30 19>>*/ return -1;
       /*<<int64.js 31 2>>*/ return 0 /*<<int64.js 32 0>>*/ }
     /*<<int64.js 174 0>>*/ function caml_int64_lsl1(x)
     {x[3] = x[3] << 1 | x[2] >> 23;
      x[2] = (x[2] << 1 | x[1] >> 23) & 16777215;
      x[1] = x[1] << 1 & 16777215 /*<<int64.js 178 0>>*/ }
     /*<<int64.js 181 0>>*/ function caml_int64_lsr1(x)
     {x[1] = (x[1] >>> 1 | x[2] << 23) & 16777215;
      x[2] = (x[2] >>> 1 | x[3] << 23) & 16777215;
      x[3] = x[3] >>> 1 /*<<int64.js 185 0>>*/ }
     /*<<int64.js 191 0>>*/ function caml_int64_udivmod(x,y)
     { /*<<int64.js 192 2>>*/ var
        /*<<int64.js 192 13>>*/ offset=0,
        /*<<int64.js 193 14>>*/ modulus=
         /*<<int64.js 193 16>>*/ caml_obj_dup(x),
        /*<<int64.js 194 14>>*/ divisor=
         /*<<int64.js 194 16>>*/ caml_obj_dup(y),
        /*<<int64.js 195 15>>*/ quotient=[255,0,0,0];
       /*<<int64.js 196 2>>*/ while
       ( /*<<int64.js 196 9>>*/ caml_int64_ucompare(modulus,divisor) > 0)
        /*<<int64.js 196 53>>*/ {offset++;
         /*<<int64.js 198 4>>*/ caml_int64_lsl1(divisor)}
       /*<<int64.js 200 2>>*/ while(offset >= 0)
        /*<<int64.js 200 22>>*/ {offset--;
         /*<<int64.js 202 4>>*/ caml_int64_lsl1(quotient);
         /*<<int64.js 203 4>>*/ if
         ( /*<<int64.js 203 8>>*/ caml_int64_ucompare(modulus,divisor) >= 0)
          /*<<int64.js 203 53>>*/ {quotient[1]++;
          modulus =  /*<<int64.js 205 16>>*/ caml_int64_sub(modulus,divisor)}
         /*<<int64.js 207 4>>*/ caml_int64_lsr1(divisor)}
       /*<<int64.js 209 2>>*/ return [0,quotient,modulus] /*<<int64.js 210 0>>*/ }
     /*<<int64.js 36 0>>*/ function caml_int64_ult(x,y)
     { /*<<int64.js 36 31>>*/ return  /*<<int64.js 36 38>>*/ caml_int64_ucompare
              (x,y)
             <
             0 /*<<int64.js 36 68>>*/ }
     /*<<stdlib.js 432 0>>*/ function caml_parse_sign_and_base(s)
     { /*<<stdlib.js 433 2>>*/ var
        /*<<stdlib.js 433 8>>*/ i=0,
        /*<<stdlib.js 433 17>>*/ len=
         /*<<stdlib.js 433 19>>*/ caml_ml_string_length(s),
        /*<<stdlib.js 433 50>>*/ base=10,
        /*<<stdlib.js 434 10>>*/ sign=
        len > 0 &&  /*<<stdlib.js 434 24>>*/ caml_string_unsafe_get(s,0) == 45
         ?(i++,-1)
         :1;
       /*<<stdlib.js 435 2>>*/ if
       (i
        +
        1
        <
        len
        &&
         /*<<stdlib.js 435 21>>*/ caml_string_unsafe_get(s,i)
        ==
        48)
        /*<<stdlib.js 436 4>>*/ switch
        ( /*<<stdlib.js 436 12>>*/ caml_string_unsafe_get(s,i + 1))
        {case 120:
         case 88:base = 16;i += 2; /*<<stdlib.js 437 42>>*/ break;
         case 111:
         case 79:base = 8;i += 2; /*<<stdlib.js 438 42>>*/ break;
         case 98:
         case 66:base = 2;i += 2; /*<<stdlib.js 439 42>>*/ break
         }
       /*<<stdlib.js 441 2>>*/ return [i,sign,base] /*<<stdlib.js 442 0>>*/ }
     /*<<stdlib.js 141 0>>*/ function caml_failwith(msg)
     { /*<<stdlib.js 142 2>>*/ caml_raise_with_string
       (caml_global_data.Failure,msg) /*<<stdlib.js 143 0>>*/ }
     /*<<stdlib.js 445 0>>*/ function caml_parse_digit(c)
     { /*<<stdlib.js 446 2>>*/ if(c >= 48 && c <= 57)
        /*<<stdlib.js 446 27>>*/ return c - 48;
       /*<<stdlib.js 447 2>>*/ if(c >= 65 && c <= 90)
        /*<<stdlib.js 447 27>>*/ return c - 55;
       /*<<stdlib.js 448 2>>*/ if(c >= 97 && c <= 122)
        /*<<stdlib.js 448 27>>*/ return c - 87;
       /*<<stdlib.js 449 2>>*/ return -1 /*<<stdlib.js 450 0>>*/ }
     /*<<int64.js 296 0>>*/ function caml_int64_of_string(s)
     { /*<<int64.js 297 2>>*/ var
        /*<<int64.js 297 8>>*/ r=
         /*<<int64.js 297 10>>*/ caml_parse_sign_and_base(s),
        /*<<int64.js 298 8>>*/ i=r[0],
        /*<<int64.js 298 21>>*/ sign=r[1],
        /*<<int64.js 298 34>>*/ base=r[2],
        /*<<int64.js 299 13>>*/ base64=
         /*<<int64.js 299 15>>*/ caml_int64_of_int32(base),
        /*<<int64.js 300 16>>*/ threshold=
         /*<<int64.js 301 4>>*/ caml_int64_udivmod
          ([255,16777215,268435455,65535],base64)
         [1],
        /*<<int64.js 302 8>>*/ c=
         /*<<int64.js 302 10>>*/ caml_string_unsafe_get(s,i),
        /*<<int64.js 303 8>>*/ d= /*<<int64.js 303 10>>*/ caml_parse_digit(c);
       /*<<int64.js 304 2>>*/ if(d < 0 || d >= base)
        /*<<int64.js 304 26>>*/ caml_failwith("int_of_string");
       /*<<int64.js 297 2>>*/  /*<<int64.js 305 10>>*/ var
       res=
         /*<<int64.js 305 12>>*/ caml_int64_of_int32(d);
       /*<<int64.js 306 2>>*/ for(;;)
        /*<<int64.js 306 11>>*/ {i++;
        c =  /*<<int64.js 308 8>>*/ caml_string_unsafe_get(s,i);
         /*<<int64.js 309 4>>*/ if(c == 95) /*<<int64.js 309 17>>*/ continue;
        d =  /*<<int64.js 310 8>>*/ caml_parse_digit(c);
         /*<<int64.js 311 4>>*/ if(d < 0 || d >= base)
          /*<<int64.js 311 28>>*/ break;
         /*<<int64.js 313 4>>*/ if
         ( /*<<int64.js 313 8>>*/ caml_int64_ult(threshold,res))
          /*<<int64.js 313 40>>*/ caml_failwith("int_of_string");
        d =  /*<<int64.js 314 8>>*/ caml_int64_of_int32(d);
        res
        =
         /*<<int64.js 315 10>>*/ caml_int64_add
         ( /*<<int64.js 315 25>>*/ caml_int64_mul(base64,res),d);
         /*<<int64.js 317 4>>*/ if
         ( /*<<int64.js 317 8>>*/ caml_int64_ult(res,d))
          /*<<int64.js 317 32>>*/ caml_failwith("int_of_string")}
       /*<<int64.js 319 2>>*/ if
       (i !=  /*<<int64.js 319 11>>*/ caml_ml_string_length(s))
        /*<<int64.js 319 37>>*/ caml_failwith("int_of_string");
       /*<<int64.js 320 2>>*/ if
       (r[2]
        ==
        10
        &&
         /*<<int64.js 320 20>>*/ caml_int64_ult([255,0,0,32768],res))
        /*<<int64.js 321 4>>*/ caml_failwith("int_of_string");
       /*<<int64.js 322 2>>*/ if(sign < 0)
       res =  /*<<int64.js 322 22>>*/ caml_int64_neg(res);
       /*<<int64.js 323 2>>*/ return res /*<<int64.js 324 0>>*/ }
     /*<<int64.js 85 0>>*/ function caml_int64_is_zero(x)
     { /*<<int64.js 86 2>>*/ return (x[3] | x[2] | x[1]) == 0 /*<<int64.js 87 0>>*/ }
     /*<<int64.js 246 0>>*/ function caml_int64_to_int32(x)
     { /*<<int64.js 247 2>>*/ return x[1] | x[2] << 24 /*<<int64.js 248 0>>*/ }
     /*<<int64.js 90 0>>*/ function caml_int64_is_negative(x)
     { /*<<int64.js 91 2>>*/ return x[3] << 16 < 0 /*<<int64.js 92 0>>*/ }
     /*<<mlString.js 325 0>>*/ function caml_bytes_of_string(s)
     { /*<<mlString.js 326 2>>*/ if((s.t & 6) != 0)
        /*<<mlString.js 326 34>>*/ caml_convert_string_to_bytes(s);
       /*<<mlString.js 327 2>>*/ return s.c /*<<mlString.js 328 0>>*/ }
     /*<<stdlib.js 184 0>>*/ function caml_invalid_argument(msg)
     { /*<<stdlib.js 185 2>>*/ caml_raise_with_string
       (caml_global_data.Invalid_argument,msg) /*<<stdlib.js 186 0>>*/ }
     /*<<stdlib.js 513 0>>*/ function caml_parse_format(fmt)
     {fmt =  /*<<stdlib.js 514 8>>*/ caml_bytes_of_string(fmt);
       /*<<stdlib.js 515 2>>*/  /*<<stdlib.js 515 10>>*/ var len=fmt.length;
       /*<<stdlib.js 516 2>>*/ if(len > 31)
        /*<<stdlib.js 516 16>>*/ caml_invalid_argument
        ("format_int: format too long");
       /*<<stdlib.js 515 2>>*/  /*<<stdlib.js 517 8>>*/ var
       f=
        {justify:"+",
         signstyle:"-",
         filler:" ",
         alternate:false,
         base:0,
         signedconv:false,
         width:0,
         uppercase:false,
         sign:1,
         prec:-1,
         conv:"f"};
       /*<<stdlib.js 521 2>>*/ for
       ( /*<<stdlib.js 521 13>>*/ var i=0;i < len;i++)
        /*<<stdlib.js 521 32>>*/ { /*<<stdlib.js 522 4>>*/  /*<<stdlib.js 522 10>>*/ var
         c=
           /*<<stdlib.js 522 12>>*/ fmt.charAt(i);
         /*<<stdlib.js 523 4>>*/ switch(c)
         {case "-":f.justify = "-"; /*<<stdlib.js 525 23>>*/ break;
          case "+":
          case " ":f.signstyle = c; /*<<stdlib.js 527 23>>*/ break;
          case "0":f.filler = "0"; /*<<stdlib.js 529 22>>*/ break;
          case "#":f.alternate = true; /*<<stdlib.js 531 26>>*/ break;
          case "1":
          case "2":
          case "3":
          case "4":
          case "5":
          case "6":
          case "7":
          case "8":
          case "9":
           f.width = 0;
            /*<<stdlib.js 535 6>>*/ while
            (c
             =
              /*<<stdlib.js 535 15>>*/ fmt.charCodeAt(i)
             -
             48,
             c
             >=
             0
             &&
             c
             <=
             9)
             /*<<stdlib.js 535 57>>*/ {f.width = f.width * 10 + c;i++}
           i--;
            /*<<stdlib.js 539 5>>*/ break;
          case ".":
           f.prec = 0;
           i++;
            /*<<stdlib.js 543 6>>*/ while
            (c
             =
              /*<<stdlib.js 543 15>>*/ fmt.charCodeAt(i)
             -
             48,
             c
             >=
             0
             &&
             c
             <=
             9)
             /*<<stdlib.js 543 57>>*/ {f.prec = f.prec * 10 + c;i++}
           i--;
          case "d":
          case "i":f.signedconv = true;
          case "u":f.base = 10; /*<<stdlib.js 550 19>>*/ break;
          case "x":f.base = 16; /*<<stdlib.js 552 19>>*/ break;
          case "X":
           f.base = 16;f.uppercase = true; /*<<stdlib.js 554 39>>*/ break;
          case "o":f.base = 8; /*<<stdlib.js 556 18>>*/ break;
          case "e":
          case "f":
          case "g":
           f.signedconv = true;f.conv = c; /*<<stdlib.js 558 39>>*/ break;
          case "E":
          case "F":
          case "G":
           f.signedconv = true;
           f.uppercase = true;
           f.conv =  /*<<stdlib.js 561 15>>*/ c.toLowerCase();
            /*<<stdlib.js 561 33>>*/ break
          }}
       /*<<stdlib.js 564 2>>*/ return f /*<<stdlib.js 565 0>>*/ }
     /*<<stdlib.js 569 0>>*/ function caml_finish_formatting(f,rawbuffer)
     { /*<<stdlib.js 570 2>>*/ if(f.uppercase)
       rawbuffer =  /*<<stdlib.js 570 31>>*/ rawbuffer.toUpperCase();
       /*<<stdlib.js 571 2>>*/  /*<<stdlib.js 571 10>>*/ var
       len=
        rawbuffer.length;
       /*<<stdlib.js 573 2>>*/ if
       (f.signedconv && (f.sign < 0 || f.signstyle != "-"))
       len++;
       /*<<stdlib.js 574 2>>*/ if(f.alternate)
        /*<<stdlib.js 574 19>>*/ { /*<<stdlib.js 575 4>>*/ if(f.base == 8)
         len += 1;
         /*<<stdlib.js 576 4>>*/ if(f.base == 16)len += 2}
       /*<<stdlib.js 571 2>>*/  /*<<stdlib.js 579 13>>*/ var buffer="";
       /*<<stdlib.js 580 2>>*/ if(f.justify == "+" && f.filler == " ")
        /*<<stdlib.js 581 4>>*/ for
        ( /*<<stdlib.js 581 15>>*/ var i=len;i < f.width;i++)
        buffer += " ";
       /*<<stdlib.js 582 2>>*/ if(f.signedconv)
        /*<<stdlib.js 582 20>>*/ if(f.sign < 0)
        buffer += "-";
       else
         /*<<stdlib.js 584 9>>*/ if(f.signstyle != "-")buffer += f.signstyle;
       /*<<stdlib.js 586 2>>*/ if(f.alternate && f.base == 8)buffer += "0";
       /*<<stdlib.js 587 2>>*/ if(f.alternate && f.base == 16)buffer += "0x";
       /*<<stdlib.js 588 2>>*/ if(f.justify == "+" && f.filler == "0")
        /*<<stdlib.js 589 4>>*/ for
        ( /*<<stdlib.js 589 15>>*/ var i=len;i < f.width;i++)
        buffer += "0";
      buffer += rawbuffer;
       /*<<stdlib.js 591 2>>*/ if(f.justify == "-")
        /*<<stdlib.js 592 4>>*/ for
        ( /*<<stdlib.js 592 15>>*/ var i=len;i < f.width;i++)
        buffer += " ";
       /*<<stdlib.js 593 2>>*/ return  /*<<stdlib.js 593 9>>*/ caml_new_string
              (buffer) /*<<stdlib.js 594 0>>*/ }
     /*<<int64.js 270 0>>*/ function caml_int64_format(fmt,x)
     { /*<<int64.js 271 2>>*/  /*<<int64.js 271 8>>*/ var
       f=
         /*<<int64.js 271 10>>*/ caml_parse_format(fmt);
       /*<<int64.js 272 2>>*/ if
       (f.signedconv &&  /*<<int64.js 272 22>>*/ caml_int64_is_negative(x))
        /*<<int64.js 272 49>>*/ {f.sign = -1;
        x =  /*<<int64.js 273 21>>*/ caml_int64_neg(x)}
       /*<<int64.js 271 2>>*/ var
        /*<<int64.js 275 13>>*/ buffer="",
        /*<<int64.js 276 12>>*/ wbase=
         /*<<int64.js 276 14>>*/ caml_int64_of_int32(f.base),
        /*<<int64.js 277 12>>*/ cvtbl="0123456789abcdef";
       /*<<int64.js 278 2>>*/ do
        /*<<int64.js 278 5>>*/ { /*<<int64.js 279 4>>*/  /*<<int64.js 279 10>>*/ var
         p=
           /*<<int64.js 279 12>>*/ caml_int64_udivmod(x,wbase);
        x = p[1];
        buffer
        =
         /*<<int64.js 281 13>>*/ cvtbl.charAt
         ( /*<<int64.js 281 26>>*/ caml_int64_to_int32(p[2]))
        +
        buffer}
      while
       (! /*<<int64.js 282 13>>*/ caml_int64_is_zero(x));
       /*<<int64.js 283 2>>*/ if(f.prec >= 0)
        /*<<int64.js 283 19>>*/ {f.filler = " ";
         /*<<int64.js 285 4>>*/  /*<<int64.js 285 10>>*/ var
         n=
          f.prec - buffer.length;
         /*<<int64.js 286 4>>*/ if(n > 0)
         buffer =  /*<<int64.js 286 24>>*/ caml_str_repeat(n,"0") + buffer}
       /*<<int64.js 288 2>>*/ return  /*<<int64.js 288 9>>*/ caml_finish_formatting
              (f,buffer) /*<<int64.js 289 0>>*/ }
     /*<<ieee_754.js 222 0>>*/ function caml_expm1_float(x)
     { /*<<ieee_754.js 223 2>>*/ var
        /*<<ieee_754.js 223 8>>*/ y= /*<<ieee_754.js 223 10>>*/ Math.exp(x),
        /*<<ieee_754.js 223 25>>*/ z=y - 1;
       /*<<ieee_754.js 224 2>>*/ return  /*<<ieee_754.js 224 10>>*/ Math.abs
               (x)
              >
              1
              ?z
              :z == 0?x:x * z /  /*<<ieee_754.js 224 38>>*/ Math.log(y) /*<<ieee_754.js 225 0>>*/ }
     /*<<fs.js 93 0>>*/ function caml_raise_no_such_file(name)
     {name
      =
      name instanceof MlString? /*<<fs.js 94 36>>*/ name.toString():name;
       /*<<fs.js 95 2>>*/ caml_raise_sys_error
       (name + ": No such file or directory") /*<<fs.js 96 0>>*/ }
     /*<<fs.js 210 0>>*/ function caml_fs_content(path)
     { /*<<fs.js 211 2>>*/  /*<<fs.js 211 10>>*/ var dir=caml_root_dir;
       /*<<fs.js 212 2>>*/ for
       ( /*<<fs.js 212 11>>*/ var i=0;i < path.length;i++)
        /*<<fs.js 212 32>>*/ { /*<<fs.js 213 4>>*/ if
         (!(dir.exists &&  /*<<fs.js 213 23>>*/ dir.exists(path[i])))
          /*<<fs.js 213 45>>*/ caml_raise_no_such_file(path.orig);
        dir =  /*<<fs.js 214 8>>*/ dir.get(path[i])}
       /*<<fs.js 216 2>>*/ return dir /*<<fs.js 217 0>>*/ }
     /*<<fs.js 285 0>>*/ function caml_sys_is_directory(name)
     { /*<<fs.js 286 2>>*/ var
        /*<<fs.js 286 11>>*/ path= /*<<fs.js 286 13>>*/ caml_make_path(name),
        /*<<fs.js 287 10>>*/ dir= /*<<fs.js 287 12>>*/ caml_fs_content(path);
       /*<<fs.js 288 2>>*/ return dir instanceof MlDir?1:0 /*<<fs.js 289 0>>*/ }
     /*<<mlString.js 251 0>>*/ function caml_string_bound_error()
     { /*<<mlString.js 252 2>>*/ caml_invalid_argument("index out of bounds") /*<<mlString.js 253 0>>*/ }
     /*<<mlString.js 257 0>>*/ function caml_string_get(s,i)
     { /*<<mlString.js 258 2>>*/ if(i >>> 0 >= s.l)
        /*<<mlString.js 258 22>>*/ caml_string_bound_error();
       /*<<mlString.js 259 2>>*/ return  /*<<mlString.js 259 9>>*/ caml_string_unsafe_get
              (s,i) /*<<mlString.js 260 0>>*/ }
     /*<<bigarray.js 581 0>>*/ function caml_ba_set_1(ba,i0,v)
     { /*<<bigarray.js 582 4>>*/ return  /*<<bigarray.js 582 11>>*/ ba.set1
              (i0,v) /*<<bigarray.js 583 0>>*/ }
     /*<<bigstring.js 26 0>>*/ function bigstring_blit_string_bigstring_stub
     (v_str,v_src_pos,v_bstr,v_dst_pos,v_len)
     { /*<<bigstring.js 27 2>>*/ for
       ( /*<<bigstring.js 27 13>>*/ var i=0;i < v_len;i++)
        /*<<bigstring.js 27 34>>*/ caml_ba_set_1
        (v_bstr,
         v_dst_pos + i,
          /*<<bigstring.js 27 69>>*/ caml_string_get(v_str,v_src_pos + i));
       /*<<bigstring.js 28 2>>*/ return 0 /*<<bigstring.js 29 0>>*/ }
     /*<<bigstring.js 33 0>>*/  /*<<bigstring.js 33 34>>*/ var
     caml_blit_string_to_bigstring=
      bigstring_blit_string_bigstring_stub;
     /*<<mlString.js 341 0>>*/ function caml_create_string(len)
     { /*<<mlString.js 342 2>>*/ if(len < 0)
        /*<<mlString.js 342 15>>*/ caml_invalid_argument("String.create");
       /*<<mlString.js 343 2>>*/ return new MlString(len?2:9,"",len) /*<<mlString.js 344 0>>*/ }
     /*<<fs.js 51 0>>*/ function MlFile(content)
     {this.data = content;
      this.inode = file_inode++;
       /*<<fs.js 53 26>>*/  /*<<fs.js 53 34>>*/ var
       now=
         /*<<fs.js 53 36>>*/ unix_time();
      this.atime = now;
      this.mtime = now;
      this.ctime = now /*<<fs.js 57 0>>*/ }
    MlFile.prototype
    =
    {truncate:
     function()
      {this.data =  /*<<fs.js 60 16>>*/ caml_create_string(0);
        /*<<fs.js 61 4>>*/ this.modified() /*<<fs.js 59 11>>*/ },
     modified:
     function()
      { /*<<fs.js 64 4>>*/  /*<<fs.js 64 12>>*/ var
        now=
          /*<<fs.js 64 14>>*/ unix_time();
       this.atime = now;
       this.mtime = now /*<<fs.js 63 11>>*/ }};
     /*<<fs.js 324 0>>*/ function unix_stat_file(f)
     { /*<<fs.js 325 2>>*/ if(f instanceof MlDir)
        /*<<fs.js 326 4>>*/ var
         /*<<fs.js 326 13>>*/ kind=1,
         /*<<fs.js 327 13>>*/ size=0;
       /*<<fs.js 329 2>>*/ if(f instanceof MlFile)
        /*<<fs.js 330 4>>*/ var
         /*<<fs.js 330 13>>*/ kind=0,
         /*<<fs.js 331 13>>*/ size=
          /*<<fs.js 331 15>>*/ caml_ml_string_length(f.data);
       /*<<fs.js 334 2>>*/ return [0,
              0,
              f.inode,
              kind,
              436,
              1,
              1,
              1,
              0,
              size,
              +f.atime,
              +f.mtime,
              +f.ctime] /*<<fs.js 348 0>>*/ }
     /*<<stdlib.js 303 0>>*/ function caml_make_vect(len,init)
     { /*<<stdlib.js 304 2>>*/ var
        /*<<stdlib.js 304 10>>*/ len=len + 1 | 0,
        /*<<stdlib.js 305 8>>*/ b=new Array(len);
      b[0] = 0;
       /*<<stdlib.js 307 2>>*/ for
       ( /*<<stdlib.js 307 13>>*/ var i=1;i < len;i++)
       b[i] = init;
       /*<<stdlib.js 308 2>>*/ return b /*<<stdlib.js 309 0>>*/ }
     /*<<jslib.js 105 0>>*/ function js_print_stderr(s)
     { /*<<jslib.js 106 2>>*/  /*<<jslib.js 106 8>>*/ var g=joo_global_object;
       /*<<jslib.js 107 2>>*/ if
       (g.process && g.process.stdout && g.process.stdout.write)
        /*<<jslib.js 107 63>>*/  /*<<jslib.js 108 4>>*/ g.process.stderr.write
        (s);
      else
        /*<<jslib.js 109 9>>*/ { /*<<jslib.js 112 2>>*/ if
         ( /*<<jslib.js 112 5>>*/ s.charCodeAt(s.length - 1) == 10)
         s =  /*<<jslib.js 113 8>>*/ s.substr(0,s.length - 1);
         /*<<jslib.js 114 2>>*/  /*<<jslib.js 114 8>>*/ var v=g.console;
        v && v.error &&  /*<<jslib.js 115 18>>*/ v.error(s)} /*<<jslib.js 117 0>>*/ }
     /*<<mlString.js 80 0>>*/ function caml_utf8_of_utf16(s)
     { /*<<mlString.js 81 2>>*/ for
       (var
          /*<<mlString.js 81 13>>*/ b="",
          /*<<mlString.js 81 21>>*/ t=b,
         c,
         d,
          /*<<mlString.js 81 34>>*/ i=0,
          /*<<mlString.js 81 41>>*/ l=s.length;
        i
        <
        l;
        i++)
        /*<<mlString.js 81 65>>*/ {c
        =
         /*<<mlString.js 82 8>>*/ s.charCodeAt(i);
         /*<<mlString.js 83 4>>*/ if(c < 128)
          /*<<mlString.js 83 18>>*/ { /*<<mlString.js 84 6>>*/ for
           ( /*<<mlString.js 84 17>>*/ var j=i + 1;
            j
            <
            l
            &&
            (c =  /*<<mlString.js 84 42>>*/ s.charCodeAt(j))
            <
            128;
            j++)
            /*<<mlString.js 84 71>>*/ ;
           /*<<mlString.js 85 6>>*/ if(j - i > 512)
            /*<<mlString.js 85 23>>*/ { /*<<mlString.js 85 25>>*/ t.substr
             (0,1);
            b += t;
            t = "";
            b +=  /*<<mlString.js 85 62>>*/ s.slice(i,j)}
          else
           t +=  /*<<mlString.js 86 16>>*/ s.slice(i,j);
           /*<<mlString.js 87 6>>*/ if(j == l)
            /*<<mlString.js 87 18>>*/ break;
          i = j}
         /*<<mlString.js 90 4>>*/ if(c < 2048)
          /*<<mlString.js 90 19>>*/ {t
          +=
           /*<<mlString.js 91 11>>*/ String.fromCharCode(192 | c >> 6);
          t +=  /*<<mlString.js 92 11>>*/ String.fromCharCode(128 | c & 63)}
        else
          /*<<mlString.js 93 11>>*/ if(c < 55296 || c >= 57343)
           /*<<mlString.js 93 42>>*/ t
          +=
           /*<<mlString.js 94 11>>*/ String.fromCharCode
           (224 | c >> 12,128 | c >> 6 & 63,128 | c & 63);
         else
           /*<<mlString.js 97 11>>*/ if
           (c
            >=
            56319
            ||
            i
            +
            1
            ==
            l
            ||
            (d =  /*<<mlString.js 98 20>>*/ s.charCodeAt(i + 1))
            <
            56320
            ||
            d
            >
            57343)
            /*<<mlString.js 98 65>>*/ t += "\xef\xbf\xbd";
          else
            /*<<mlString.js 101 11>>*/ {i++;
            c = (c << 10) + d - 56613888;
            t
            +=
             /*<<mlString.js 104 11>>*/ String.fromCharCode
             (240 | c >> 18,128 | c >> 12 & 63,128 | c >> 6 & 63,128 | c & 63)}
         /*<<mlString.js 109 4>>*/ if(t.length > 1024)
          /*<<mlString.js 109 25>>*/ { /*<<mlString.js 109 26>>*/ t.substr
           (0,1);
          b += t;
          t = ""}}
       /*<<mlString.js 111 2>>*/ return b + t /*<<mlString.js 112 0>>*/ }
     /*<<mlString.js 332 0>>*/ function caml_js_to_string(s)
     { /*<<mlString.js 333 2>>*/  /*<<mlString.js 333 10>>*/ var tag=9;
       /*<<mlString.js 334 2>>*/ if
       (! /*<<mlString.js 334 7>>*/ caml_is_ascii(s))
       tag = 8,s =  /*<<mlString.js 335 41>>*/ caml_utf8_of_utf16(s);
       /*<<mlString.js 336 2>>*/ return new MlString(tag,s,s.length) /*<<mlString.js 337 0>>*/ }
     /*<<stdlib.js 114 0>>*/ function caml_raise_constant(tag)
     { /*<<stdlib.js 114 37>>*/ throw tag /*<<stdlib.js 114 48>>*/ }
     /*<<stdlib.js 202 0>>*/ function caml_raise_not_found()
     { /*<<stdlib.js 203 2>>*/ caml_raise_constant(caml_global_data.Not_found) /*<<stdlib.js 203 51>>*/ }
     /*<<stdlib.js 1028 0>>*/ function caml_sys_getenv(name)
     { /*<<stdlib.js 1029 2>>*/ var
        /*<<stdlib.js 1029 8>>*/ g=joo_global_object,
        /*<<stdlib.js 1030 8>>*/ n= /*<<stdlib.js 1030 10>>*/ name.toString();
       /*<<stdlib.js 1032 2>>*/ if
       (g.process && g.process.env && g.process.env[n] != undefined)
        /*<<stdlib.js 1035 4>>*/ return  /*<<stdlib.js 1035 11>>*/ caml_js_to_string
               (g.process.env[n]);
       /*<<stdlib.js 1036 2>>*/ caml_raise_not_found() /*<<stdlib.js 1037 0>>*/ }
     /*<<ieee_754.js 21 0>>*/  /*<<ieee_754.js 21 12>>*/ var
     log2_ok=
      Math.log2
      &&
       /*<<ieee_754.js 21 27>>*/ Math.log2(1.12355820928894744e+307)
      ==
      1020;
     /*<<ieee_754.js 22 0>>*/ function jsoo_floor_log2(x)
     { /*<<ieee_754.js 23 4>>*/ if(log2_ok)
        /*<<ieee_754.js 23 16>>*/ return  /*<<ieee_754.js 23 23>>*/ Math.floor
               ( /*<<ieee_754.js 23 34>>*/ Math.log2(x));
       /*<<ieee_754.js 24 4>>*/  /*<<ieee_754.js 24 10>>*/ var i=0;
       /*<<ieee_754.js 25 4>>*/ if(x == 0)
        /*<<ieee_754.js 25 16>>*/ return -Infinity;
       /*<<ieee_754.js 26 4>>*/ if(x >= 1)
        /*<<ieee_754.js 26 13>>*/ while(x >= 2)
         /*<<ieee_754.js 26 27>>*/ {x /= 2;i++}
      else
        /*<<ieee_754.js 27 9>>*/ while(x < 1)
         /*<<ieee_754.js 27 24>>*/ {x *= 2;i--}
       /*<<ieee_754.js 28 4>>*/ return i /*<<ieee_754.js 29 0>>*/ }
     /*<<ieee_754.js 33 0>>*/ function caml_int64_bits_of_float(x)
     { /*<<ieee_754.js 34 2>>*/ if(! /*<<ieee_754.js 34 7>>*/ isFinite(x))
        /*<<ieee_754.js 34 20>>*/ { /*<<ieee_754.js 35 4>>*/ if
         ( /*<<ieee_754.js 35 8>>*/ isNaN(x))
          /*<<ieee_754.js 35 18>>*/ return [255,1,0,65520];
         /*<<ieee_754.js 36 4>>*/ return x > 0?[255,0,0,32752]:[255,0,0,65520]}
       /*<<ieee_754.js 38 2>>*/  /*<<ieee_754.js 38 11>>*/ var
       sign=
        x == 0 && 1 / x == -Infinity?32768:x >= 0?0:32768;
       /*<<ieee_754.js 39 2>>*/ if(sign)x = -x;
       /*<<ieee_754.js 38 2>>*/  /*<<ieee_754.js 42 10>>*/ var
       exp=
         /*<<ieee_754.js 42 12>>*/ jsoo_floor_log2(x) + 1023;
       /*<<ieee_754.js 43 2>>*/ if(exp <= 0)
        /*<<ieee_754.js 43 16>>*/ {exp = 0;
        x /=  /*<<ieee_754.js 45 9>>*/ Math.pow(2,-1026)}
      else
        /*<<ieee_754.js 46 9>>*/ {x
        /=
         /*<<ieee_754.js 47 9>>*/ Math.pow(2,exp - 1027);
         /*<<ieee_754.js 48 4>>*/ if(x < 16)
          /*<<ieee_754.js 48 16>>*/ {x *= 2;exp -= 1}
         /*<<ieee_754.js 50 4>>*/ if(exp == 0)
          /*<<ieee_754.js 50 18>>*/ x /= 2}
       /*<<ieee_754.js 38 2>>*/ var
        /*<<ieee_754.js 53 8>>*/ k= /*<<ieee_754.js 53 10>>*/ Math.pow(2,24),
        /*<<ieee_754.js 54 9>>*/ r3=x | 0;
      x = (x - r3) * k;
       /*<<ieee_754.js 38 2>>*/  /*<<ieee_754.js 56 9>>*/ var r2=x | 0;
      x = (x - r2) * k;
       /*<<ieee_754.js 38 2>>*/  /*<<ieee_754.js 58 9>>*/ var r1=x | 0;
      r3 = r3 & 15 | sign | exp << 4;
       /*<<ieee_754.js 60 2>>*/ return [255,r1,r2,r3] /*<<ieee_754.js 61 0>>*/ }
     /*<<int64.js 332 0>>*/ function caml_int64_to_bytes(x)
     { /*<<int64.js 333 2>>*/ return [x[3] >> 8,
              x[3] & 255,
              x[2] >> 16,
              x[2] >> 8 & 255,
              x[2] & 255,
              x[1] >> 16,
              x[1] >> 8 & 255,
              x[1] & 255] /*<<int64.js 335 0>>*/ }
     /*<<marshal.js 337 0>>*/  /*<<marshal.js 337 20>>*/ var
     caml_output_val=
       /*<<marshal.js 337 22>>*/ function()
        { /*<<marshal.js 338 2>>*/ function Writer()
          {this.chunk = [] /*<<marshal.js 338 40>>*/ }
         Writer.prototype
         =
         {chunk_idx:20,
          block_len:0,
          obj_counter:0,
          size_32:0,
          size_64:0,
          write:
          function(size,value)
           { /*<<marshal.js 342 6>>*/ for
             ( /*<<marshal.js 342 17>>*/ var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 255 /*<<marshal.js 341 10>>*/ },
          write_code:
          function(size,code,value)
           {this.chunk[this.chunk_idx++] = code;
             /*<<marshal.js 347 6>>*/ for
             ( /*<<marshal.js 347 17>>*/ var i=size - 8;i >= 0;i -= 8)
             this.chunk[this.chunk_idx++] = value >> i & 255 /*<<marshal.js 345 15>>*/ },
          finalize:
          function()
           {this.block_len = this.chunk_idx - 20;
            this.chunk_idx = 0;
             /*<<marshal.js 353 6>>*/ this.write(32,2224400062);
             /*<<marshal.js 354 6>>*/ this.write(32,this.block_len);
             /*<<marshal.js 355 6>>*/ this.write(32,this.obj_counter);
             /*<<marshal.js 356 6>>*/ this.write(32,this.size_32);
             /*<<marshal.js 357 6>>*/ this.write(32,this.size_64);
             /*<<marshal.js 358 6>>*/ return this.chunk /*<<marshal.js 350 13>>*/ }};
          /*<<marshal.js 361 2>>*/ return function(v)
          { /*<<marshal.js 362 4>>*/ var
             /*<<marshal.js 362 15>>*/ writer=new Writer(),
             /*<<marshal.js 363 14>>*/ stack=[];
            /*<<marshal.js 364 4>>*/ function extern_rec(v)
            { /*<<marshal.js 365 6>>*/ if
              (v instanceof Array && v[0] === (v[0] | 0))
               /*<<marshal.js 365 51>>*/ { /*<<marshal.js 366 8>>*/ if
                (v[0] == 255)
                 /*<<marshal.js 366 25>>*/ { /*<<marshal.js 368 10>>*/ writer.write
                  (8,18);
                  /*<<marshal.js 369 10>>*/ for
                  ( /*<<marshal.js 369 21>>*/ var i=0;i < 3;i++)
                   /*<<marshal.js 369 38>>*/ writer.write
                   (8, /*<<marshal.js 369 55>>*/ "_j\0".charCodeAt(i));
                  /*<<marshal.js 370 10>>*/  /*<<marshal.js 370 16>>*/ var
                  b=
                    /*<<marshal.js 370 18>>*/ caml_int64_to_bytes(v);
                  /*<<marshal.js 371 10>>*/ for
                  ( /*<<marshal.js 371 21>>*/ var i=0;i < 8;i++)
                   /*<<marshal.js 371 38>>*/ writer.write(8,b[i]);
                 writer.size_32 += 4;
                 writer.size_64 += 3;
                  /*<<marshal.js 374 10>>*/ return}
                /*<<marshal.js 376 8>>*/ if(v[0] == 251)
                 /*<<marshal.js 376 25>>*/  /*<<marshal.js 377 10>>*/ caml_failwith
                 ("output_value: abstract value (Abstract)");
                /*<<marshal.js 379 8>>*/ if(v[0] < 16 && v.length - 1 < 8)
                 /*<<marshal.js 380 10>>*/ writer.write
                 (8,128 + v[0] + (v.length - 1 << 4));
               else
                 /*<<marshal.js 382 10>>*/ writer.write_code
                 (32,8,v.length - 1 << 10 | v[0]);
               writer.size_32 += v.length;
               writer.size_64 += v.length;
                /*<<marshal.js 385 8>>*/ if(v.length > 1)
                 /*<<marshal.js 385 26>>*/ stack.push(v,1)}
             else
               /*<<marshal.js 386 13>>*/ if(v instanceof MlString)
                /*<<marshal.js 386 40>>*/ { /*<<marshal.js 387 8>>*/  /*<<marshal.js 387 16>>*/ var
                 len=
                   /*<<marshal.js 387 18>>*/ caml_ml_string_length(v);
                 /*<<marshal.js 388 8>>*/ if(len < 32)
                  /*<<marshal.js 389 10>>*/ writer.write(8,32 + len);
                else
                  /*<<marshal.js 390 13>>*/ if(len < 256)
                   /*<<marshal.js 391 10>>*/ writer.write_code(8,9,len);
                 else
                   /*<<marshal.js 393 10>>*/ writer.write_code(32,10,len);
                 /*<<marshal.js 394 8>>*/ for
                 ( /*<<marshal.js 394 19>>*/ var i=0;i < len;i++)
                  /*<<marshal.js 395 10>>*/ writer.write
                  (8, /*<<marshal.js 395 27>>*/ caml_string_unsafe_get(v,i));
                writer.size_32 += 1 + ((len + 4) / 4 | 0);
                writer.size_64 += 1 + ((len + 8) / 8 | 0)}
              else
                /*<<marshal.js 398 13>>*/ if(v != (v | 0))
                 /*<<marshal.js 399 23>>*/ { /*<<marshal.js 400 10>>*/  /*<<marshal.js 400 24>>*/ var
                  type_of_v=
                   typeof v;
                  /*<<marshal.js 409 10>>*/ caml_failwith
                  ("output_value: abstract value (" + type_of_v + ")")}
               else
                 /*<<marshal.js 414 13>>*/ if(v >= 0 && v < 64)
                  /*<<marshal.js 414 37>>*/  /*<<marshal.js 415 10>>*/ writer.write
                  (8,64 + v);
                else
                  /*<<marshal.js 416 15>>*/ if(v >= -(1 << 7) && v < 1 << 7)
                   /*<<marshal.js 418 12>>*/ writer.write_code(8,0,v);
                 else
                   /*<<marshal.js 419 15>>*/ if
                   (v >= -(1 << 15) && v < 1 << 15)
                    /*<<marshal.js 420 12>>*/ writer.write_code(16,1,v);
                  else
                    /*<<marshal.js 422 12>>*/ writer.write_code(32,2,v) /*<<marshal.js 425 4>>*/ }
            /*<<marshal.js 426 4>>*/ extern_rec(v);
            /*<<marshal.js 427 4>>*/ while(stack.length > 0)
             /*<<marshal.js 427 29>>*/ { /*<<marshal.js 428 6>>*/ var
               /*<<marshal.js 428 12>>*/ i=
                /*<<marshal.js 428 14>>*/ stack.pop(),
               /*<<marshal.js 429 12>>*/ v=
                /*<<marshal.js 429 14>>*/ stack.pop();
              /*<<marshal.js 430 6>>*/ if(i + 1 < v.length)
               /*<<marshal.js 430 28>>*/ stack.push(v,i + 1);
              /*<<marshal.js 431 6>>*/ extern_rec(v[i])}
            /*<<marshal.js 433 4>>*/ writer.finalize();
            /*<<marshal.js 434 4>>*/ return writer.chunk /*<<marshal.js 361 9>>*/ } /*<<marshal.js 337 22>>*/ }
       ();
     /*<<bigarray.js 56 0>>*/ function caml_ba_get_size(dims)
     { /*<<bigarray.js 57 4>>*/ var
        /*<<bigarray.js 57 15>>*/ n_dims=dims.length,
        /*<<bigarray.js 58 13>>*/ size=1;
       /*<<bigarray.js 59 4>>*/ for
       ( /*<<bigarray.js 59 15>>*/ var i=0;i < n_dims;i++)
        /*<<bigarray.js 59 37>>*/ { /*<<bigarray.js 60 8>>*/ if(dims[i] < 0)
          /*<<bigarray.js 61 12>>*/ caml_invalid_argument
          ("Bigarray.create: negative dimension");
        size = size * dims[i]}
       /*<<bigarray.js 64 4>>*/ return size /*<<bigarray.js 65 0>>*/ }
     /*<<bigarray.js 68 0>>*/ var caml_ba_views;
     /*<<bigarray.js 38 0>>*/ function caml_ba_init_views()
     { /*<<bigarray.js 39 4>>*/ if(!caml_ba_views)
        /*<<bigarray.js 39 24>>*/ { /*<<bigarray.js 40 8>>*/  /*<<bigarray.js 40 14>>*/ var
         g=
          joo_global_object;
        caml_ba_views
        =
        [[g.Float32Array,
          g.Float64Array,
          g.Int8Array,
          g.Uint8Array,
          g.Int16Array,
          g.Uint16Array,
          g.Int32Array,
          g.Int32Array,
          g.Int32Array,
          g.Int32Array,
          g.Float32Array,
          g.Float64Array,
          g.Uint8Array],
         [0,0,0,0,0,0,0,1,0,0,2,2,0]]} /*<<bigarray.js 52 0>>*/ }
     /*<<jslib_js_of_ocaml.js 35 0>>*/ function caml_js_from_array(a)
     { /*<<jslib_js_of_ocaml.js 35 33>>*/ return  /*<<jslib_js_of_ocaml.js 35 40>>*/ raw_array_sub
              (a,1,a.length - 1) /*<<jslib_js_of_ocaml.js 35 71>>*/ }
     /*<<stdlib.js 208 0>>*/ function caml_array_bound_error()
     { /*<<stdlib.js 209 2>>*/ caml_invalid_argument("index out of bounds") /*<<stdlib.js 210 0>>*/ }
     /*<<bigarray.js 74 0>>*/ function caml_ba_create_from
     (data,data2,data_type,kind,layout,dims)
     { /*<<bigarray.js 75 4>>*/ var
        /*<<bigarray.js 75 15>>*/ n_dims=dims.length,
        /*<<bigarray.js 76 13>>*/ size=
         /*<<bigarray.js 76 15>>*/ caml_ba_get_size(dims);
       /*<<bigarray.js 82 4>>*/ function offset_c(index)
       { /*<<bigarray.js 83 8>>*/  /*<<bigarray.js 83 16>>*/ var ofs=0;
         /*<<bigarray.js 84 8>>*/ if(n_dims != index.length)
          /*<<bigarray.js 85 12>>*/ caml_invalid_argument
          ("Bigarray.get/set: bad number of dimensions");
         /*<<bigarray.js 86 8>>*/ for
         ( /*<<bigarray.js 86 19>>*/ var i=0;i < n_dims;i++)
          /*<<bigarray.js 86 41>>*/ { /*<<bigarray.js 87 12>>*/ if
           (index[i] < 0 || index[i] >= dims[i])
            /*<<bigarray.js 88 16>>*/ caml_array_bound_error();
          ofs = ofs * dims[i] + index[i]}
         /*<<bigarray.js 91 8>>*/ return ofs /*<<bigarray.js 92 4>>*/ }
       /*<<bigarray.js 94 4>>*/ function offset_fortran(index)
       { /*<<bigarray.js 95 8>>*/  /*<<bigarray.js 95 16>>*/ var ofs=0;
         /*<<bigarray.js 96 8>>*/ if(n_dims != index.length)
          /*<<bigarray.js 97 12>>*/ caml_invalid_argument
          ("Bigarray.get/set: wrong number of indices");
         /*<<bigarray.js 98 8>>*/ for
         ( /*<<bigarray.js 98 19>>*/ var i=n_dims - 1;i >= 0;i--)
          /*<<bigarray.js 98 46>>*/ { /*<<bigarray.js 99 12>>*/ if
           (index[i] < 1 || index[i] > dims[i])
            /*<<bigarray.js 100 16>>*/ caml_array_bound_error();
          ofs = ofs * dims[i] + (index[i] - 1)}
         /*<<bigarray.js 103 8>>*/ return ofs /*<<bigarray.js 104 4>>*/ }
       /*<<bigarray.js 106 4>>*/ var
        /*<<bigarray.js 106 15>>*/ offset=layout == 0?offset_c:offset_fortran,
        /*<<bigarray.js 108 13>>*/ dim0=dims[0];
       /*<<bigarray.js 113 4>>*/ function get_std(index)
       { /*<<bigarray.js 114 8>>*/ var
          /*<<bigarray.js 114 16>>*/ ofs=
           /*<<bigarray.js 114 18>>*/ offset(index),
          /*<<bigarray.js 115 14>>*/ v=data[ofs];
         /*<<bigarray.js 116 8>>*/ return v /*<<bigarray.js 117 4>>*/ }
       /*<<bigarray.js 119 4>>*/ function get_int64(index)
       { /*<<bigarray.js 120 8>>*/ var
          /*<<bigarray.js 120 16>>*/ off=
           /*<<bigarray.js 120 18>>*/ offset(index),
          /*<<bigarray.js 121 14>>*/ l=data[off],
          /*<<bigarray.js 122 14>>*/ h=data2[off];
         /*<<bigarray.js 123 8>>*/ return [255,
                l & 16777215,
                l >>> 24 & 255 | (h & 65535) << 8,
                h >>> 16 & 65535] /*<<bigarray.js 128 4>>*/ }
       /*<<bigarray.js 130 4>>*/ function get_complex(index)
       { /*<<bigarray.js 131 8>>*/ var
          /*<<bigarray.js 131 16>>*/ off=
           /*<<bigarray.js 131 18>>*/ offset(index),
          /*<<bigarray.js 132 14>>*/ r=data[off],
          /*<<bigarray.js 133 14>>*/ i=data2[off];
         /*<<bigarray.js 134 8>>*/ return [254,r,i] /*<<bigarray.js 135 4>>*/ }
       /*<<bigarray.js 137 4>>*/  /*<<bigarray.js 137 12>>*/ var
       get=
        data_type == 1?get_int64:data_type == 2?get_complex:get_std;
       /*<<bigarray.js 139 4>>*/ function get1_c(i)
       { /*<<bigarray.js 140 8>>*/ if(i < 0 || i >= dim0)
          /*<<bigarray.js 141 12>>*/ caml_array_bound_error();
         /*<<bigarray.js 142 8>>*/ return data[i] /*<<bigarray.js 143 4>>*/ }
       /*<<bigarray.js 144 4>>*/ function get1_fortran(i)
       { /*<<bigarray.js 145 8>>*/ if(i < 1 || i > dim0)
          /*<<bigarray.js 146 12>>*/ caml_array_bound_error();
         /*<<bigarray.js 147 8>>*/ return data[i - 1] /*<<bigarray.js 148 4>>*/ }
       /*<<bigarray.js 149 4>>*/ function get1_any(i)
       { /*<<bigarray.js 150 8>>*/ return  /*<<bigarray.js 150 15>>*/ get([i]) /*<<bigarray.js 151 4>>*/ }
       /*<<bigarray.js 153 4>>*/  /*<<bigarray.js 153 13>>*/ var
       get1=
        data_type == 0?layout == 0?get1_c:get1_fortran:get1_any;
       /*<<bigarray.js 158 4>>*/ function set_std_raw(off,v)
       {data[off] = v /*<<bigarray.js 160 4>>*/ }
       /*<<bigarray.js 162 4>>*/ function set_int64_raw(off,v)
       {data[off] = v[1] | (v[2] & 255) << 24;
        data2[off] = v[2] >>> 8 & 65535 | v[3] << 16 /*<<bigarray.js 165 4>>*/ }
       /*<<bigarray.js 167 4>>*/ function set_complex_raw(off,v)
       {data[off] = v[1];data2[off] = v[2] /*<<bigarray.js 170 4>>*/ }
       /*<<bigarray.js 172 4>>*/ function set_std(index,v)
       { /*<<bigarray.js 173 8>>*/  /*<<bigarray.js 173 16>>*/ var
         ofs=
           /*<<bigarray.js 173 18>>*/ offset(index);
         /*<<bigarray.js 174 8>>*/ return  /*<<bigarray.js 174 15>>*/ set_std_raw
                (ofs,v) /*<<bigarray.js 175 4>>*/ }
       /*<<bigarray.js 176 4>>*/ function set_int64(index,v)
       { /*<<bigarray.js 177 8>>*/ return  /*<<bigarray.js 177 15>>*/ set_int64_raw
                ( /*<<bigarray.js 177 29>>*/ offset(index),v) /*<<bigarray.js 178 4>>*/ }
       /*<<bigarray.js 179 4>>*/ function set_complex(index,v)
       { /*<<bigarray.js 180 8>>*/ return  /*<<bigarray.js 180 15>>*/ set_complex_raw
                ( /*<<bigarray.js 180 31>>*/ offset(index),v) /*<<bigarray.js 181 4>>*/ }
       /*<<bigarray.js 183 4>>*/  /*<<bigarray.js 183 12>>*/ var
       set=
        data_type == 1?set_int64:data_type == 2?set_complex:set_std;
       /*<<bigarray.js 185 4>>*/ function set1_c(i,v)
       { /*<<bigarray.js 186 8>>*/ if(i < 0 || i >= dim0)
          /*<<bigarray.js 187 12>>*/ caml_array_bound_error();
        data[i] = v /*<<bigarray.js 189 4>>*/ }
       /*<<bigarray.js 190 4>>*/ function set1_fortran(i,v)
       { /*<<bigarray.js 191 8>>*/ if(i < 1 || i > dim0)
          /*<<bigarray.js 192 12>>*/ caml_array_bound_error();
        data[i - 1] = v /*<<bigarray.js 194 4>>*/ }
       /*<<bigarray.js 195 4>>*/ function set1_any(i,v)
       { /*<<bigarray.js 196 8>>*/ set([i],v) /*<<bigarray.js 197 4>>*/ }
       /*<<bigarray.js 199 4>>*/  /*<<bigarray.js 199 13>>*/ var
       set1=
        data_type == 0?layout == 0?set1_c:set1_fortran:set1_any;
       /*<<bigarray.js 204 4>>*/ function nth_dim(i)
       { /*<<bigarray.js 205 8>>*/ if(i < 0 || i >= n_dims)
          /*<<bigarray.js 206 12>>*/ caml_invalid_argument("Bigarray.dim");
         /*<<bigarray.js 207 8>>*/ return dims[i] /*<<bigarray.js 208 4>>*/ }
       /*<<bigarray.js 210 4>>*/ function fill(v)
       { /*<<bigarray.js 211 8>>*/ if(data_type == 0)
          /*<<bigarray.js 212 12>>*/ for
          ( /*<<bigarray.js 212 23>>*/ var i=0;i < data.length;i++)
           /*<<bigarray.js 213 16>>*/ set_std_raw(i,v);
         /*<<bigarray.js 214 8>>*/ if(data_type == 1)
          /*<<bigarray.js 215 12>>*/ for
          ( /*<<bigarray.js 215 23>>*/ var i=0;i < data.length;i++)
           /*<<bigarray.js 216 16>>*/ set_int64_raw(i,v);
         /*<<bigarray.js 217 8>>*/ if(data_type == 2)
          /*<<bigarray.js 218 12>>*/ for
          ( /*<<bigarray.js 218 23>>*/ var i=0;i < data.length;i++)
           /*<<bigarray.js 219 16>>*/ set_complex_raw(i,v) /*<<bigarray.js 220 4>>*/ }
       /*<<bigarray.js 221 4>>*/ function blit(from)
       { /*<<bigarray.js 222 8>>*/ if(n_dims != from.num_dims)
          /*<<bigarray.js 223 12>>*/ caml_invalid_argument
          ("Bigarray.blit: dimension mismatch");
         /*<<bigarray.js 224 8>>*/ for
         ( /*<<bigarray.js 224 19>>*/ var i=0;i < n_dims;i++)
          /*<<bigarray.js 225 12>>*/ if
          (dims[i] !=  /*<<bigarray.js 225 27>>*/ from.nth_dim(i))
           /*<<bigarray.js 226 16>>*/ caml_invalid_argument
           ("Bigarray.blit: dimension mismatch");
         /*<<bigarray.js 227 8>>*/ data.set(from.data);
         /*<<bigarray.js 228 8>>*/ if(data_type != 0)
          /*<<bigarray.js 229 12>>*/ data2.set(from.data2) /*<<bigarray.js 230 4>>*/ }
       /*<<bigarray.js 232 4>>*/ function sub(ofs,len)
       { /*<<bigarray.js 233 8>>*/ var
         changed_dim,
          /*<<bigarray.js 234 16>>*/ mul=1;
         /*<<bigarray.js 236 8>>*/ if(layout == 0)
          /*<<bigarray.js 236 25>>*/ { /*<<bigarray.js 237 12>>*/ for
           ( /*<<bigarray.js 237 23>>*/ var i=1;i < n_dims;i++)
           mul = mul * dims[i];
          changed_dim = 0}
        else
          /*<<bigarray.js 240 15>>*/ { /*<<bigarray.js 241 12>>*/ for
           ( /*<<bigarray.js 241 23>>*/ var i=0;i < n_dims - 1;i++)
           mul = mul * dims[i];
          changed_dim = n_dims - 1;
          ofs = ofs - 1}
         /*<<bigarray.js 247 8>>*/ if
         (ofs < 0 || len < 0 || ofs + len > dims[changed_dim])
          /*<<bigarray.js 248 12>>*/ caml_invalid_argument
          ("Bigarray.sub: bad sub-array");
         /*<<bigarray.js 233 8>>*/ var
          /*<<bigarray.js 250 21>>*/ new_data=
           /*<<bigarray.js 250 23>>*/ data.subarray
           (ofs * mul,(ofs + len) * mul),
          /*<<bigarray.js 251 22>>*/ new_data2=
          data_type == 0
           ?null
           : /*<<bigarray.js 251 62>>*/ data2.subarray
             (ofs * mul,(ofs + len) * mul),
          /*<<bigarray.js 253 21>>*/ new_dims=[];
         /*<<bigarray.js 254 8>>*/ for
         ( /*<<bigarray.js 254 19>>*/ var i=0;i < n_dims;i++)
         new_dims[i] = dims[i];
        new_dims[changed_dim] = len;
         /*<<bigarray.js 258 8>>*/ return  /*<<bigarray.js 258 15>>*/ caml_ba_create_from
                (new_data,new_data2,data_type,kind,layout,new_dims) /*<<bigarray.js 259 4>>*/ }
       /*<<bigarray.js 261 4>>*/ function slice(vind)
       { /*<<bigarray.js 262 8>>*/ var
          /*<<bigarray.js 262 21>>*/ num_inds=vind.length,
          /*<<bigarray.js 263 18>>*/ index=[],
          /*<<bigarray.js 264 21>>*/ sub_dims=[],
         ofs;
         /*<<bigarray.js 267 8>>*/ if(num_inds >= n_dims)
          /*<<bigarray.js 268 12>>*/ caml_invalid_argument
          ("Bigarray.slice: too many indices");
         /*<<bigarray.js 271 8>>*/ if(layout == 0)
          /*<<bigarray.js 271 25>>*/ { /*<<bigarray.js 272 12>>*/ for
           ( /*<<bigarray.js 272 23>>*/ var i=0;i < num_inds;i++)
           index[i] = vind[i];
           /*<<bigarray.js 274 12>>*/ for(;i < n_dims;i++)index[i] = 0;
          ofs =  /*<<bigarray.js 276 18>>*/ offset(index);
          sub_dims =  /*<<bigarray.js 277 23>>*/ dims.slice(num_inds)}
        else
          /*<<bigarray.js 278 15>>*/ { /*<<bigarray.js 279 12>>*/ for
           ( /*<<bigarray.js 279 23>>*/ var i=0;i < num_inds;i++)
           index[n_dims - num_inds + i] = vind[i];
           /*<<bigarray.js 281 12>>*/ for
           ( /*<<bigarray.js 281 23>>*/ var i=0;i < n_dims - num_inds;i++)
           index[i] = 1;
          ofs =  /*<<bigarray.js 283 18>>*/ offset(index);
          sub_dims =  /*<<bigarray.js 284 23>>*/ dims.slice(0,num_inds)}
         /*<<bigarray.js 262 8>>*/ var
          /*<<bigarray.js 287 17>>*/ size=
           /*<<bigarray.js 287 19>>*/ caml_ba_get_size(sub_dims),
          /*<<bigarray.js 288 21>>*/ new_data=
           /*<<bigarray.js 288 23>>*/ data.subarray(ofs,ofs + size),
          /*<<bigarray.js 289 22>>*/ new_data2=
          data_type == 0
           ?null
           : /*<<bigarray.js 289 62>>*/ data2.subarray(ofs,ofs + size);
         /*<<bigarray.js 291 8>>*/ return  /*<<bigarray.js 291 15>>*/ caml_ba_create_from
                (new_data,new_data2,data_type,kind,layout,sub_dims) /*<<bigarray.js 292 4>>*/ }
       /*<<bigarray.js 294 4>>*/ function reshape(vdim)
       { /*<<bigarray.js 295 8>>*/ var
          /*<<bigarray.js 295 20>>*/ new_dim=[],
          /*<<bigarray.js 296 21>>*/ num_dims=vdim.length;
         /*<<bigarray.js 298 8>>*/ if(num_dims < 1)
          /*<<bigarray.js 299 12>>*/ caml_invalid_argument
          ("Bigarray.reshape: bad number of dimensions");
         /*<<bigarray.js 295 8>>*/  /*<<bigarray.js 300 21>>*/ var num_elts=1;
         /*<<bigarray.js 301 8>>*/ for
         ( /*<<bigarray.js 301 19>>*/ var i=0;i < num_dims;i++)
          /*<<bigarray.js 301 43>>*/ {new_dim[i] = vdim[i];
           /*<<bigarray.js 303 12>>*/ if(new_dim[i] < 0)
            /*<<bigarray.js 304 16>>*/ caml_invalid_argument
            ("Bigarray.reshape: negative dimension");
          num_elts = num_elts * new_dim[i]}
         /*<<bigarray.js 309 8>>*/ if(num_elts != size)
          /*<<bigarray.js 310 12>>*/ caml_invalid_argument
          ("Bigarray.reshape: size mismatch");
         /*<<bigarray.js 312 8>>*/ return  /*<<bigarray.js 312 15>>*/ caml_ba_create_from
                (data,data2,data_type,kind,layout,new_dim) /*<<bigarray.js 313 4>>*/ }
       /*<<bigarray.js 315 4>>*/ function compare(b,total)
       { /*<<bigarray.js 316 8>>*/ if(layout != b.layout)
          /*<<bigarray.js 317 12>>*/ return b.layout - layout;
         /*<<bigarray.js 318 8>>*/ if(n_dims != b.num_dims)
          /*<<bigarray.js 319 12>>*/ return b.num_dims - n_dims;
         /*<<bigarray.js 320 8>>*/ for
         ( /*<<bigarray.js 320 19>>*/ var i=0;i < n_dims;i++)
          /*<<bigarray.js 321 12>>*/ if
          ( /*<<bigarray.js 321 16>>*/ nth_dim(i)
           !=
            /*<<bigarray.js 321 30>>*/ b.nth_dim(i))
           /*<<bigarray.js 322 16>>*/ return  /*<<bigarray.js 322 24>>*/ nth_dim
                   (i)
                  <
                   /*<<bigarray.js 322 37>>*/ b.nth_dim(i)
                  ?-1
                  :1;
         /*<<bigarray.js 323 8>>*/ switch(kind)
         {case 0:
          case 1:
          case 10:
          case 11:
            /*<<bigarray.js 328 16>>*/ var x,y;
            /*<<bigarray.js 329 16>>*/ for
            ( /*<<bigarray.js 329 27>>*/ var i=0;i < data.length;i++)
             /*<<bigarray.js 329 54>>*/ {x = data[i];
             y = b.data[i];
              /*<<bigarray.js 334 20>>*/ if(x < y)
               /*<<bigarray.js 335 24>>*/ return -1;
              /*<<bigarray.js 336 20>>*/ if(x > y)
               /*<<bigarray.js 337 24>>*/ return 1;
              /*<<bigarray.js 338 20>>*/ if(x != y)
               /*<<bigarray.js 338 32>>*/ if(x != y)
                /*<<bigarray.js 339 36>>*/ { /*<<bigarray.js 340 28>>*/ if
                 (!total)
                  /*<<bigarray.js 341 32>>*/ return NaN;
                 /*<<bigarray.js 342 28>>*/ if(x == x)
                  /*<<bigarray.js 343 32>>*/ return 1;
                 /*<<bigarray.js 344 28>>*/ if(y == y)
                  /*<<bigarray.js 345 32>>*/ return -1}
              /*<<bigarray.js 348 20>>*/ if(data2)
               /*<<bigarray.js 348 31>>*/ {x = data2[i];
               y = b.data2[i];
                /*<<bigarray.js 352 24>>*/ if(x < y)
                 /*<<bigarray.js 353 28>>*/ return -1;
                /*<<bigarray.js 354 24>>*/ if(x > y)
                 /*<<bigarray.js 355 28>>*/ return 1;
                /*<<bigarray.js 356 24>>*/ if(x != y)
                 /*<<bigarray.js 356 36>>*/ if(x != y)
                  /*<<bigarray.js 357 40>>*/ { /*<<bigarray.js 358 32>>*/ if
                   (!total)
                    /*<<bigarray.js 359 36>>*/ return NaN;
                   /*<<bigarray.js 360 32>>*/ if(x == x)
                    /*<<bigarray.js 361 36>>*/ return 1;
                   /*<<bigarray.js 362 32>>*/ if(y == y)
                    /*<<bigarray.js 363 36>>*/ return -1}}}
            /*<<bigarray.js 369 16>>*/ break;
          case 2:
          case 3:
          case 4:
          case 5:
          case 6:
          case 8:
          case 9:
          case 12:
            /*<<bigarray.js 379 16>>*/ for
            ( /*<<bigarray.js 379 27>>*/ var i=0;i < data.length;i++)
             /*<<bigarray.js 379 54>>*/ { /*<<bigarray.js 380 20>>*/ if
              (data[i] < b.data[i])
               /*<<bigarray.js 381 24>>*/ return -1;
              /*<<bigarray.js 382 20>>*/ if(data[i] > b.data[i])
               /*<<bigarray.js 383 24>>*/ return 1}
            /*<<bigarray.js 386 16>>*/ break;
          case 7:
            /*<<bigarray.js 389 16>>*/ for
            ( /*<<bigarray.js 389 27>>*/ var i=0;i < data.length;i++)
             /*<<bigarray.js 389 54>>*/ { /*<<bigarray.js 390 20>>*/ if
              (data2[i] < b.data2[i])
               /*<<bigarray.js 391 24>>*/ return -1;
              /*<<bigarray.js 392 20>>*/ if(data2[i] > b.data2[i])
               /*<<bigarray.js 393 24>>*/ return 1;
              /*<<bigarray.js 394 20>>*/ if(data[i] < b.data[i])
               /*<<bigarray.js 395 24>>*/ return -1;
              /*<<bigarray.js 396 20>>*/ if(data[i] > b.data[i])
               /*<<bigarray.js 397 24>>*/ return 1}
            /*<<bigarray.js 400 16>>*/ break
          }
         /*<<bigarray.js 402 8>>*/ return 0 /*<<bigarray.js 403 4>>*/ }
       /*<<bigarray.js 405 4>>*/ return {data:data,
              data2:data2,
              data_type:data_type,
              num_dims:n_dims,
              nth_dim:nth_dim,
              kind:kind,
              layout:layout,
              size:size,
              sub:sub,
              slice:slice,
              blit:blit,
              fill:fill,
              reshape:reshape,
              get:get,
              get1:get1,
              set:set,
              set1:set1,
              compare:compare} /*<<bigarray.js 425 0>>*/ }
     /*<<bigarray.js 434 0>>*/ function caml_ba_create(kind,layout,dims_ml)
     { /*<<bigarray.js 436 4>>*/ caml_ba_init_views();
       /*<<bigarray.js 439 4>>*/ var
        /*<<bigarray.js 439 13>>*/ dims=
         /*<<bigarray.js 439 15>>*/ caml_js_from_array(dims_ml),
        /*<<bigarray.js 442 13>>*/ size=
         /*<<bigarray.js 442 15>>*/ caml_ba_get_size(dims),
        /*<<bigarray.js 445 13>>*/ view=caml_ba_views[0][kind];
       /*<<bigarray.js 446 4>>*/ if(!view)
        /*<<bigarray.js 447 8>>*/ caml_invalid_argument
        ("Bigarray.create: unsupported kind");
       /*<<bigarray.js 439 4>>*/ var
        /*<<bigarray.js 448 13>>*/ data=new view(size),
        /*<<bigarray.js 451 18>>*/ data_type=caml_ba_views[1][kind],
        /*<<bigarray.js 452 14>>*/ data2=null;
       /*<<bigarray.js 453 4>>*/ if(data_type != 0)
        /*<<bigarray.js 453 38>>*/ data2 = new view(size);
       /*<<bigarray.js 457 4>>*/ return  /*<<bigarray.js 457 11>>*/ caml_ba_create_from
              (data,data2,data_type,kind,layout,dims) /*<<bigarray.js 458 0>>*/ }
     /*<<bigstring.js 4 0>>*/ function bigstring_alloc(_,size)
     { /*<<bigstring.js 5 2>>*/ return  /*<<bigstring.js 5 9>>*/ caml_ba_create
              (12,0,[0,size]) /*<<bigstring.js 6 0>>*/ }
     /*<<bigstring.js 95 0>>*/ function bigstring_marshal_stub(v,_fl)
     { /*<<bigstring.js 97 2>>*/ var
        /*<<bigstring.js 97 10>>*/ arr=
         /*<<bigstring.js 97 12>>*/ caml_output_val(v),
        /*<<bigstring.js 98 10>>*/ bs=
         /*<<bigstring.js 98 12>>*/ bigstring_alloc(0,arr.length);
       /*<<bigstring.js 99 2>>*/ for
       ( /*<<bigstring.js 99 12>>*/ var i=0;i < arr.length;i++)
        /*<<bigstring.js 99 37>>*/  /*<<bigstring.js 100 4>>*/ caml_ba_set_1
        (bs,i,arr[i]);
       /*<<bigstring.js 102 2>>*/ return bs /*<<bigstring.js 103 0>>*/ }
     /*<<fs.js 221 0>>*/ function caml_sys_file_exists(name)
     { /*<<fs.js 222 2>>*/ var
        /*<<fs.js 222 10>>*/ dir=caml_root_dir,
        /*<<fs.js 223 11>>*/ path= /*<<fs.js 223 13>>*/ caml_make_path(name),
       auto_load,
       pos;
       /*<<fs.js 226 2>>*/ for
       ( /*<<fs.js 226 11>>*/ var i=0;i < path.length;i++)
        /*<<fs.js 226 32>>*/ { /*<<fs.js 227 4>>*/ if(dir.auto)
          /*<<fs.js 227 17>>*/ {auto_load = dir.auto;pos = i}
         /*<<fs.js 228 4>>*/ if
         (!(dir.exists &&  /*<<fs.js 228 23>>*/ dir.exists(path[i])))
          /*<<fs.js 228 45>>*/ return auto_load
                 ? /*<<fs.js 230 15>>*/ auto_load(path,pos)
                 :0;
        dir =  /*<<fs.js 234 8>>*/ dir.get(path[i])}
       /*<<fs.js 236 2>>*/ return 1 /*<<fs.js 237 0>>*/ }
     /*<<mlString.js 357 0>>*/ function caml_string_of_array(a)
     { /*<<mlString.js 357 36>>*/ return new MlString(4,a,a.length) /*<<mlString.js 357 71>>*/ }
     /*<<mlString.js 301 0>>*/ function caml_convert_string_to_array(s)
     { /*<<mlString.js 303 2>>*/ if(joo_global_object.Uint8Array)
        /*<<mlString.js 303 35>>*/  /*<<mlString.js 304 10>>*/ var
        a=
         new (joo_global_object.Uint8Array)(s.l);
      else
        /*<<mlString.js 305 9>>*/  /*<<mlString.js 306 10>>*/ var
        a=
         new Array(s.l);
       /*<<mlString.js 308 2>>*/ var
        /*<<mlString.js 308 8>>*/ b=s.c,
        /*<<mlString.js 308 17>>*/ l=b.length,
        /*<<mlString.js 308 31>>*/ i=0;
       /*<<mlString.js 309 2>>*/ for(;i < l;i++)
       a[i] =  /*<<mlString.js 309 28>>*/ b.charCodeAt(i);
       /*<<mlString.js 310 2>>*/ for(l = s.l;i < l;i++)a[i] = 0;
      s.c = a;
      s.t = 4;
       /*<<mlString.js 313 2>>*/ return a /*<<mlString.js 314 0>>*/ }
     /*<<mlString.js 318 0>>*/ function caml_array_of_string(s)
     { /*<<mlString.js 319 2>>*/ if(s.t != 4)
        /*<<mlString.js 319 28>>*/ caml_convert_string_to_array(s);
       /*<<mlString.js 320 2>>*/ return s.c /*<<mlString.js 321 0>>*/ }
     /*<<fs.js 133 0>>*/ function caml_fs_register(name,content)
     { /*<<fs.js 134 2>>*/ var
        /*<<fs.js 134 11>>*/ path= /*<<fs.js 134 13>>*/ caml_make_path(name),
        /*<<fs.js 135 10>>*/ dir=caml_root_dir;
       /*<<fs.js 136 2>>*/ for
       ( /*<<fs.js 136 11>>*/ var i=0;i < path.length - 1;i++)
        /*<<fs.js 136 34>>*/ { /*<<fs.js 137 4>>*/  /*<<fs.js 137 10>>*/ var
         d=
          path[i];
         /*<<fs.js 138 4>>*/ if(! /*<<fs.js 138 9>>*/ dir.exists(d))
          /*<<fs.js 139 6>>*/ dir.mk(d,new MlDir());
        dir =  /*<<fs.js 140 10>>*/ dir.get(d);
         /*<<fs.js 141 4>>*/ if(!(dir instanceof MlDir))
          /*<<fs.js 142 6>>*/ caml_raise_sys_error
          (path.orig + " : file already exists")}
       /*<<fs.js 134 2>>*/  /*<<fs.js 144 8>>*/ var d=path[path.length - 1];
       /*<<fs.js 145 2>>*/ if( /*<<fs.js 145 5>>*/ dir.exists(d))
        /*<<fs.js 145 20>>*/ caml_raise_sys_error
        (path.orig + " : file already exists");
       /*<<fs.js 146 2>>*/ if(content instanceof MlDir)
        /*<<fs.js 146 31>>*/ dir.mk(d,content);
      else
        /*<<fs.js 147 7>>*/ if(content instanceof MlFile)
         /*<<fs.js 147 37>>*/ dir.mk(d,content);
       else
         /*<<fs.js 148 7>>*/ if(content instanceof MlString)
          /*<<fs.js 148 39>>*/ dir.mk(d,new MlFile(content));
        else
          /*<<fs.js 149 7>>*/ if(content instanceof Array)
           /*<<fs.js 149 36>>*/ dir.mk
           (d,new MlFile( /*<<fs.js 149 56>>*/ caml_string_of_array(content)));
         else
           /*<<fs.js 150 7>>*/ if(content.toString)
            /*<<fs.js 150 28>>*/ { /*<<fs.js 151 4>>*/  /*<<fs.js 151 17>>*/ var
             mlstring=
               /*<<fs.js 151 19>>*/ caml_new_string
               ( /*<<fs.js 151 35>>*/ content.toString());
             /*<<fs.js 153 4>>*/ dir.mk(d,new MlFile(mlstring))}
          else
            /*<<fs.js 155 7>>*/ caml_invalid_argument("caml_fs_register");
       /*<<fs.js 156 2>>*/ return 0 /*<<fs.js 157 0>>*/ }
     /*<<fs.js 274 0>>*/ function caml_sys_remove(name)
     { /*<<fs.js 275 2>>*/ var
        /*<<fs.js 275 11>>*/ path= /*<<fs.js 275 13>>*/ caml_make_path(name),
        /*<<fs.js 276 10>>*/ dir=
         /*<<fs.js 276 12>>*/ caml_fs_content
         ( /*<<fs.js 276 28>>*/ path.slice(0,-1));
       /*<<fs.js 277 2>>*/ if
       ( /*<<fs.js 277 5>>*/ dir.exists(path[path.length - 1]))
        /*<<fs.js 278 4>>*/ dir.remove(path[path.length - 1]);
      else
        /*<<fs.js 279 7>>*/ caml_raise_no_such_file(name);
       /*<<fs.js 280 2>>*/ return 0 /*<<fs.js 281 0>>*/ }
     /*<<fs.js 295 0>>*/ function caml_sys_rename(o,n)
     { /*<<fs.js 296 2>>*/ var
        /*<<fs.js 296 11>>*/ path= /*<<fs.js 296 13>>*/ caml_make_path(o),
        /*<<fs.js 297 14>>*/ content=
         /*<<fs.js 297 16>>*/ caml_fs_content(path);
       /*<<fs.js 298 2>>*/ if( /*<<fs.js 298 5>>*/ caml_sys_file_exists(n))
        /*<<fs.js 298 29>>*/ { /*<<fs.js 299 4>>*/ if
         ( /*<<fs.js 299 7>>*/ caml_sys_is_directory(n))
          /*<<fs.js 299 33>>*/ caml_raise_sys_error
          ( /*<<fs.js 299 54>>*/ n.toString() + " : is a directory");
         /*<<fs.js 300 4>>*/ caml_sys_remove(n)}
       /*<<fs.js 302 2>>*/ caml_fs_register(n,content);
       /*<<fs.js 303 2>>*/ caml_sys_remove(o);
       /*<<fs.js 304 2>>*/ return 0 /*<<fs.js 305 0>>*/ }
     /*<<fs.js 100 0>>*/ function caml_raise_not_a_dir(name)
     {name
      =
      name instanceof MlString? /*<<fs.js 101 36>>*/ name.toString():name;
       /*<<fs.js 102 2>>*/ caml_raise_sys_error(name + ": Not a directory") /*<<fs.js 103 0>>*/ }
     /*<<fs.js 259 0>>*/ function caml_sys_read_directory(name)
     { /*<<fs.js 260 2>>*/  /*<<fs.js 260 10>>*/ var
       dir=
         /*<<fs.js 260 12>>*/ caml_fs_content
         ( /*<<fs.js 260 28>>*/ caml_make_path(name));
       /*<<fs.js 261 2>>*/ if(!(dir instanceof MlDir))
        /*<<fs.js 261 29>>*/  /*<<fs.js 262 4>>*/ caml_raise_not_a_dir(name);
       /*<<fs.js 260 2>>*/ var
        /*<<fs.js 264 11>>*/ list= /*<<fs.js 264 13>>*/ dir.list(),
        /*<<fs.js 265 8>>*/ l=new Array(list.length + 1);
      l[0] = 0;
       /*<<fs.js 267 2>>*/ for
       ( /*<<fs.js 267 11>>*/ var i=0;i < list.length;i++)
       l[i + 1] =  /*<<fs.js 268 13>>*/ caml_new_string(list[i]);
       /*<<fs.js 269 2>>*/ return l /*<<fs.js 270 0>>*/ }
     /*<<io.js 307 0>>*/ function caml_ml_seek_in(chan,pos)
     { /*<<io.js 308 2>>*/ if(chan.refill != null)
        /*<<io.js 308 27>>*/ caml_raise_sys_error("Illegal seek");
      chan.offset = pos;
       /*<<io.js 310 2>>*/ return 0 /*<<io.js 311 0>>*/ }
     /*<<mlString.js 481 0>>*/ function caml_blit_string(s1,i1,s2,i2,len)
     { /*<<mlString.js 482 2>>*/ if(len == 0)
        /*<<mlString.js 482 16>>*/ return 0;
       /*<<mlString.js 483 2>>*/ if
       (i2 == 0 && (len >= s2.l || s2.t == 2 && len >= s2.c.length))
        /*<<mlString.js 484 72>>*/ {s2.c
        =
        s1.t == 4
         ? /*<<mlString.js 486 13>>*/ caml_subarray_to_string(s1.c,i1,len)
         :i1 == 0 && s1.c.length == len
           ?s1.c
           : /*<<mlString.js 487 50>>*/ s1.c.substr(i1,len);
        s2.t = s2.c.length == s2.l?0:2}
      else
        /*<<mlString.js 489 9>>*/ if(s2.t == 2 && i2 == s2.c.length)
         /*<<mlString.js 489 59>>*/ {s2.c
         +=
         s1.t == 4
          ? /*<<mlString.js 491 13>>*/ caml_subarray_to_string(s1.c,i1,len)
          :i1 == 0 && s1.c.length == len
            ?s1.c
            : /*<<mlString.js 492 50>>*/ s1.c.substr(i1,len);
         s2.t = s2.c.length == s2.l?0:2}
       else
         /*<<mlString.js 494 9>>*/ { /*<<mlString.js 495 4>>*/ if(s2.t != 4)
           /*<<mlString.js 495 31>>*/ caml_convert_string_to_array(s2);
          /*<<mlString.js 496 4>>*/ var
           /*<<mlString.js 496 11>>*/ c1=s1.c,
           /*<<mlString.js 496 22>>*/ c2=s2.c;
          /*<<mlString.js 497 4>>*/ if(s1.t == 4)
           /*<<mlString.js 498 6>>*/ for
           ( /*<<mlString.js 498 17>>*/ var i=0;i < len;i++)
           c2[i2 + i] = c1[i1 + i];
         else
           /*<<mlString.js 499 9>>*/ { /*<<mlString.js 500 6>>*/  /*<<mlString.js 500 12>>*/ var
            l=
              /*<<mlString.js 500 14>>*/ Math.min(len,c1.length - i1);
            /*<<mlString.js 501 6>>*/ for
            ( /*<<mlString.js 501 17>>*/ var i=0;i < l;i++)
            c2[i2 + i] =  /*<<mlString.js 501 48>>*/ c1.charCodeAt(i1 + i);
            /*<<mlString.js 502 6>>*/ for(;i < len;i++)c2[i2 + i] = 0}}
       /*<<mlString.js 505 2>>*/ return 0 /*<<mlString.js 506 0>>*/ }
     /*<<io.js 346 0>>*/ function caml_ml_flush(oc)
     { /*<<io.js 347 4>>*/ if(!oc.opened)
        /*<<io.js 347 20>>*/ caml_raise_sys_error
        ("Cannot flush a closed channel");
       /*<<io.js 348 4>>*/ if(oc.buffer == "") /*<<io.js 348 24>>*/ return 0;
       /*<<io.js 349 4>>*/ if(oc.output)
        /*<<io.js 350 6>>*/ switch(oc.output.length)
        {case 2:
           /*<<io.js 351 14>>*/ oc.output(oc,oc.buffer);
           /*<<io.js 351 38>>*/ break;
         default: /*<<io.js 352 15>>*/ oc.output(oc.buffer)}
      oc.buffer = "";
       /*<<io.js 356 4>>*/ return 0 /*<<io.js 357 0>>*/ }
     /*<<io.js 364 0>>*/ function caml_ml_output(oc,buffer,offset,len)
     { /*<<io.js 365 4>>*/ if(!oc.opened)
        /*<<io.js 365 20>>*/ caml_raise_sys_error
        ("Cannot output to a closed channel");
       /*<<io.js 366 4>>*/ var string;
       /*<<io.js 367 4>>*/ if
       (offset
        ==
        0
        &&
         /*<<io.js 367 22>>*/ caml_ml_string_length(buffer)
        ==
        len)
       string = buffer;
      else
        /*<<io.js 369 9>>*/ {string
        =
         /*<<io.js 370 17>>*/ caml_create_string(len);
         /*<<io.js 371 8>>*/ caml_blit_string(buffer,offset,string,0,len)}
       /*<<io.js 366 4>>*/ var
        /*<<io.js 373 17>>*/ jsstring= /*<<io.js 373 19>>*/ string.toString(),
        /*<<io.js 374 11>>*/ id=
         /*<<io.js 374 13>>*/ jsstring.lastIndexOf("\n");
       /*<<io.js 375 4>>*/ if(id < 0)
       oc.buffer += jsstring;
      else
        /*<<io.js 377 9>>*/ {oc.buffer
        +=
         /*<<io.js 378 19>>*/ jsstring.substr(0,id + 1);
         /*<<io.js 379 8>>*/ caml_ml_flush(oc);
        oc.buffer +=  /*<<io.js 380 21>>*/ jsstring.substr(id + 1)}
       /*<<io.js 382 4>>*/ return 0 /*<<io.js 383 0>>*/ }
     /*<<io.js 392 0>>*/ function caml_ml_output_char(oc,c)
     { /*<<io.js 393 4>>*/  /*<<io.js 393 10>>*/ var
       s=
         /*<<io.js 393 12>>*/ caml_new_string
         ( /*<<io.js 393 28>>*/ String.fromCharCode(c));
       /*<<io.js 394 4>>*/ caml_ml_output(oc,s,0,1);
       /*<<io.js 395 4>>*/ return 0 /*<<io.js 396 0>>*/ }
     /*<<mlString.js 234 0>>*/ function caml_bytes_unsafe_set(s,i,c)
     {c &= 255;
       /*<<mlString.js 237 2>>*/ if(s.t != 4)
        /*<<mlString.js 237 28>>*/ { /*<<mlString.js 238 4>>*/ if
         (i == s.c.length)
          /*<<mlString.js 238 25>>*/ {s.c
          +=
           /*<<mlString.js 239 13>>*/ String.fromCharCode(c);
           /*<<mlString.js 240 6>>*/ if(i + 1 == s.l)s.t = 0;
           /*<<mlString.js 241 6>>*/ return 0}
         /*<<mlString.js 243 4>>*/ caml_convert_string_to_array(s)}
      s.c[i] = c;
       /*<<mlString.js 246 2>>*/ return 0 /*<<mlString.js 247 0>>*/ }
     /*<<mlString.js 277 0>>*/ function caml_bytes_set(s,i,c)
     { /*<<mlString.js 278 2>>*/ if(i >>> 0 >= s.l)
        /*<<mlString.js 278 22>>*/ caml_string_bound_error();
       /*<<mlString.js 279 2>>*/ return  /*<<mlString.js 279 9>>*/ caml_bytes_unsafe_set
              (s,i,c) /*<<mlString.js 280 0>>*/ }
     /*<<io.js 215 0>>*/ function caml_ml_refill_input(chan)
     { /*<<io.js 216 2>>*/ var
        /*<<io.js 216 10>>*/ str= /*<<io.js 216 12>>*/ chan.refill(),
        /*<<io.js 217 14>>*/ str_len=
         /*<<io.js 217 16>>*/ caml_ml_string_length(str);
       /*<<io.js 218 2>>*/ if(str_len == 0)chan.refill = null;
       /*<<io.js 216 2>>*/  /*<<io.js 219 14>>*/ var
       old_len=
         /*<<io.js 219 16>>*/ caml_ml_string_length(chan.file.data)
        -
        chan.offset;
       /*<<io.js 220 2>>*/ if(old_len == 0)
        /*<<io.js 220 20>>*/ chan.file.data = str;
      else
        /*<<io.js 222 9>>*/ { /*<<io.js 223 4>>*/  /*<<io.js 223 17>>*/ var
         new_data=
           /*<<io.js 223 19>>*/ caml_create_string(old_len + str_len);
         /*<<io.js 224 4>>*/ caml_blit_string
         (chan.file.data,chan.offset,new_data,0,old_len);
         /*<<io.js 225 4>>*/ caml_blit_string(str,0,new_data,old_len,str_len);
        chan.file.data = new_data}
      chan.offset = 0;
       /*<<io.js 229 2>>*/ return str_len /*<<io.js 230 0>>*/ }
     /*<<io.js 234 0>>*/ function caml_ml_may_refill_input(chan)
     { /*<<io.js 235 2>>*/ if(chan.refill == null)
        /*<<io.js 235 27>>*/ return;
       /*<<io.js 236 2>>*/ if
       ( /*<<io.js 236 6>>*/ caml_ml_string_length(chan.file.data)
        !=
        chan.offset)
        /*<<io.js 236 60>>*/ return;
       /*<<io.js 237 2>>*/ caml_ml_refill_input(chan) /*<<io.js 238 0>>*/ }
     /*<<stdlib.js 190 0>>*/ function caml_raise_end_of_file()
     { /*<<stdlib.js 191 2>>*/ caml_raise_constant
       (caml_global_data.End_of_file) /*<<stdlib.js 192 0>>*/ }
     /*<<io.js 280 0>>*/ function caml_ml_input_char(chan)
     { /*<<io.js 281 2>>*/ caml_ml_may_refill_input(chan);
       /*<<io.js 282 2>>*/ if
       (chan.offset
        >=
         /*<<io.js 282 21>>*/ caml_ml_string_length(chan.file.data))
        /*<<io.js 283 4>>*/ caml_raise_end_of_file();
       /*<<io.js 284 2>>*/  /*<<io.js 284 8>>*/ var
       c=
         /*<<io.js 284 10>>*/ caml_string_get(chan.file.data,chan.offset);
      chan.offset++;
       /*<<io.js 286 2>>*/ return c /*<<io.js 287 0>>*/ }
     /*<<stdlib.js 932 0>>*/ function caml_sys_const_ostype_win32()
     { /*<<stdlib.js 932 42>>*/ return 0 /*<<stdlib.js 932 52>>*/ }
     /*<<stdlib.js 220 0>>*/ function caml_obj_is_block(x)
     { /*<<stdlib.js 220 33>>*/ return +(x instanceof Array) /*<<stdlib.js 220 63>>*/ }
     /*<<ieee_754.js 124 0>>*/ function caml_int64_float_of_bits(x)
     { /*<<ieee_754.js 125 2>>*/  /*<<ieee_754.js 125 10>>*/ var
       exp=
        (x[3] & 32767) >> 4;
       /*<<ieee_754.js 126 2>>*/ if(exp == 2047)
        /*<<ieee_754.js 126 19>>*/ return (x[1] | x[2] | x[3] & 15) == 0
               ?x[3] & 32768?-Infinity:Infinity
               :NaN;
       /*<<ieee_754.js 125 2>>*/ var
        /*<<ieee_754.js 132 8>>*/ k=
         /*<<ieee_754.js 132 10>>*/ Math.pow(2,-24),
        /*<<ieee_754.js 133 10>>*/ res=(x[1] * k + x[2]) * k + (x[3] & 15);
       /*<<ieee_754.js 134 2>>*/ if(exp > 0)
        /*<<ieee_754.js 134 15>>*/ {res += 16;
        res *=  /*<<ieee_754.js 136 11>>*/ Math.pow(2,exp - 1027)}
      else
       res *=  /*<<ieee_754.js 138 11>>*/ Math.pow(2,-1026);
       /*<<ieee_754.js 139 2>>*/ if(x[3] & 32768)res = -res;
       /*<<ieee_754.js 140 2>>*/ return res /*<<ieee_754.js 141 0>>*/ }
     /*<<int64.js 327 0>>*/ function caml_int64_of_bytes(a)
     { /*<<int64.js 328 2>>*/ return [255,
              a[7] | a[6] << 8 | a[5] << 16,
              a[4] | a[3] << 8 | a[2] << 16,
              a[1] | a[0] << 8] /*<<int64.js 330 0>>*/ }
     /*<<marshal.js 126 0>>*/ function caml_float_of_bytes(a)
     { /*<<marshal.js 127 2>>*/ return  /*<<marshal.js 127 9>>*/ caml_int64_float_of_bits
              ( /*<<marshal.js 127 35>>*/ caml_int64_of_bytes(a)) /*<<marshal.js 128 0>>*/ }
     /*<<ieee_754.js 242 0>>*/ function caml_log10_float(x)
     { /*<<ieee_754.js 242 32>>*/ return Math.LOG10E
             *
              /*<<ieee_754.js 242 53>>*/ Math.log(x) /*<<ieee_754.js 242 66>>*/ }
     /*<<stdlib.js 1138 0>>*/  /*<<stdlib.js 1138 26>>*/ var
     caml_runtime_warnings=
      0;
     /*<<stdlib.js 1142 0>>*/ function caml_ml_enable_runtime_warnings(bool)
     {caml_runtime_warnings = bool;
       /*<<stdlib.js 1144 2>>*/ return 0 /*<<stdlib.js 1145 0>>*/ }
     /*<<ieee_754.js 152 0>>*/ function caml_classify_float(x)
     { /*<<ieee_754.js 153 2>>*/ if( /*<<ieee_754.js 153 6>>*/ isFinite(x))
        /*<<ieee_754.js 153 20>>*/ { /*<<ieee_754.js 154 4>>*/ if
         ( /*<<ieee_754.js 154 8>>*/ Math.abs(x) >= 2.22507385850720138e-308)
          /*<<ieee_754.js 154 48>>*/ return 0;
         /*<<ieee_754.js 155 4>>*/ if(x != 0)
          /*<<ieee_754.js 155 16>>*/ return 1;
         /*<<ieee_754.js 156 4>>*/ return 2}
       /*<<ieee_754.js 158 2>>*/ return  /*<<ieee_754.js 158 9>>*/ isNaN(x)
              ?4
              :3 /*<<ieee_754.js 159 0>>*/ }
     /*<<jslib_js_of_ocaml.js 43 0>>*/ function caml_js_var(x)
     { /*<<jslib_js_of_ocaml.js 44 2>>*/  /*<<jslib_js_of_ocaml.js 44 8>>*/ var
       x=
         /*<<jslib_js_of_ocaml.js 44 10>>*/ x.toString();
       /*<<jslib_js_of_ocaml.js 46 2>>*/ if
       (! /*<<jslib_js_of_ocaml.js 46 6>>*/ x.match
         (/^[a-zA-Z_$][a-zA-Z_$0-9]*(\.[a-zA-Z_$][a-zA-Z_$0-9]*)*$/))
        /*<<jslib_js_of_ocaml.js 46 73>>*/  /*<<jslib_js_of_ocaml.js 47 4>>*/ js_print_stderr
        ('caml_js_var: "'
         +
         x
         +
         '" is not a valid JavaScript variable. continuing ..');
       /*<<jslib_js_of_ocaml.js 50 2>>*/ return  /*<<jslib_js_of_ocaml.js 50 9>>*/ eval
              (x) /*<<jslib_js_of_ocaml.js 51 0>>*/ }
     /*<<io.js 331 0>>*/ function caml_ml_input_scan_line(chan)
     { /*<<io.js 332 2>>*/ caml_ml_may_refill_input(chan);
       /*<<io.js 333 2>>*/ var
        /*<<io.js 333 8>>*/ p=chan.offset,
        /*<<io.js 334 8>>*/ s=chan.file.data,
        /*<<io.js 335 10>>*/ len=
         /*<<io.js 335 12>>*/ caml_ml_string_length(s);
       /*<<io.js 336 2>>*/ if(p >= len) /*<<io.js 336 15>>*/ return 0;
       /*<<io.js 337 2>>*/ while(true)
        /*<<io.js 337 14>>*/ { /*<<io.js 338 4>>*/ if(p >= len)
          /*<<io.js 338 17>>*/ return -(p - chan.offset);
         /*<<io.js 339 4>>*/ if
         ( /*<<io.js 339 7>>*/ caml_string_get(s,p) == 10)
          /*<<io.js 339 36>>*/ return p - chan.offset + 1;
        p++} /*<<io.js 342 0>>*/ }
     /*<<gc.js 4 0>>*/ function caml_gc_minor()
     { /*<<gc.js 4 26>>*/ return 0 /*<<gc.js 4 34>>*/ }
     /*<<stdlib.js 508 0>>*/ function caml_is_printable(c)
     { /*<<stdlib.js 508 32>>*/ return +(c > 31 && c < 127) /*<<stdlib.js 508 61>>*/ }
     /*<<mlString.js 410 0>>*/ function caml_bytes_lessequal(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 411 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 412 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 413 2>>*/ return s1.c <= s2.c?1:0 /*<<mlString.js 414 0>>*/ }
     /*<<bigarray.js 518 0>>*/ function caml_ba_uint8_get64(ba,i0)
     { /*<<bigarray.js 519 4>>*/ var
        /*<<bigarray.js 519 11>>*/ b1= /*<<bigarray.js 519 13>>*/ ba.get1(i0),
        /*<<bigarray.js 520 11>>*/ b2=
         /*<<bigarray.js 520 13>>*/ ba.get1(i0 + 1)
        <<
        8,
        /*<<bigarray.js 521 11>>*/ b3=
         /*<<bigarray.js 521 13>>*/ ba.get1(i0 + 2)
        <<
        16,
        /*<<bigarray.js 522 11>>*/ b4=
         /*<<bigarray.js 522 13>>*/ ba.get1(i0 + 3),
        /*<<bigarray.js 523 11>>*/ b5=
         /*<<bigarray.js 523 13>>*/ ba.get1(i0 + 4)
        <<
        8,
        /*<<bigarray.js 524 11>>*/ b6=
         /*<<bigarray.js 524 13>>*/ ba.get1(i0 + 5)
        <<
        16,
        /*<<bigarray.js 525 11>>*/ b7=
         /*<<bigarray.js 525 13>>*/ ba.get1(i0 + 6),
        /*<<bigarray.js 526 11>>*/ b8=
         /*<<bigarray.js 526 13>>*/ ba.get1(i0 + 7)
        <<
        8;
       /*<<bigarray.js 527 4>>*/ return [255,
              b1 | b2 | b3,
              b4 | b5 | b6,
              b7 | b8] /*<<bigarray.js 528 0>>*/ }
     /*<<int64.js 39 0>>*/ function caml_int64_compare(x,y)
     { /*<<int64.js 40 2>>*/ var
        /*<<int64.js 40 9>>*/ x3=x[3] << 16,
        /*<<int64.js 41 9>>*/ y3=y[3] << 16;
       /*<<int64.js 42 2>>*/ if(x3 > y3) /*<<int64.js 42 15>>*/ return 1;
       /*<<int64.js 43 2>>*/ if(x3 < y3) /*<<int64.js 43 15>>*/ return -1;
       /*<<int64.js 44 2>>*/ if(x[2] > y[2]) /*<<int64.js 44 19>>*/ return 1;
       /*<<int64.js 45 2>>*/ if(x[2] < y[2]) /*<<int64.js 45 19>>*/ return -1;
       /*<<int64.js 46 2>>*/ if(x[1] > y[1]) /*<<int64.js 46 19>>*/ return 1;
       /*<<int64.js 47 2>>*/ if(x[1] < y[1]) /*<<int64.js 47 19>>*/ return -1;
       /*<<int64.js 48 2>>*/ return 0 /*<<int64.js 49 0>>*/ }
     /*<<stdlib.js 408 0>>*/ function caml_int_compare(a,b)
     { /*<<stdlib.js 409 2>>*/ if(a < b) /*<<stdlib.js 409 13>>*/ return -1;
       /*<<stdlib.js 409 26>>*/ if(a == b) /*<<stdlib.js 409 38>>*/ return 0;
       /*<<stdlib.js 409 48>>*/ return 1 /*<<stdlib.js 410 0>>*/ }
     /*<<mlString.js 361 0>>*/ function caml_string_compare(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 362 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 363 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 364 2>>*/ return s1.c < s2.c?-1:s1.c > s2.c?1:0 /*<<mlString.js 365 0>>*/ }
     /*<<stdlib.js 323 0>>*/ function caml_compare_val(a,b,total)
     { /*<<stdlib.js 324 2>>*/  /*<<stdlib.js 324 12>>*/ var stack=[];
       /*<<stdlib.js 325 2>>*/ for(;;)
        /*<<stdlib.js 325 10>>*/ { /*<<stdlib.js 326 4>>*/ if
         (!(total && a === b))
          /*<<stdlib.js 326 29>>*/ if(a instanceof MlString)
           /*<<stdlib.js 327 33>>*/ if(b instanceof MlString)
           { /*<<stdlib.js 328 35>>*/ if(a !== b)
              /*<<stdlib.js 329 25>>*/ { /*<<stdlib.js 330 2>>*/  /*<<stdlib.js 330 8>>*/ var
               x=
                 /*<<stdlib.js 330 10>>*/ caml_string_compare(a,b);
               /*<<stdlib.js 331 2>>*/ if(x != 0)
                /*<<stdlib.js 331 14>>*/ return x}}
          else
            /*<<stdlib.js 335 10>>*/ return 1;
         else
           /*<<stdlib.js 336 13>>*/ if
           (a instanceof Array && a[0] === (a[0] | 0))
            /*<<stdlib.js 336 58>>*/ { /*<<stdlib.js 337 8>>*/  /*<<stdlib.js 337 15>>*/ var
             ta=
              a[0];
             /*<<stdlib.js 339 8>>*/ if(ta === 254)ta = 0;
             /*<<stdlib.js 341 8>>*/ if(ta === 250)
              /*<<stdlib.js 341 24>>*/ {a = a[1];
               /*<<stdlib.js 343 10>>*/ continue}
            else
              /*<<stdlib.js 344 15>>*/ if
              (b instanceof Array && b[0] === (b[0] | 0))
               /*<<stdlib.js 344 60>>*/ { /*<<stdlib.js 345 10>>*/  /*<<stdlib.js 345 17>>*/ var
                tb=
                 b[0];
                /*<<stdlib.js 347 10>>*/ if(tb === 254)tb = 0;
                /*<<stdlib.js 349 10>>*/ if(tb === 250)
                 /*<<stdlib.js 349 26>>*/ {b = b[1];
                  /*<<stdlib.js 351 12>>*/ continue}
               else
                 /*<<stdlib.js 352 17>>*/ if(ta != tb)
                  /*<<stdlib.js 352 31>>*/ return ta < tb?-1:1;
                else
                  /*<<stdlib.js 354 17>>*/ switch(ta)
                  {case 248:
                     /*<<stdlib.js 358 2>>*/  /*<<stdlib.js 358 8>>*/ var
                     x=
                       /*<<stdlib.js 358 10>>*/ caml_int_compare(a[2],b[2]);
                     /*<<stdlib.js 359 2>>*/ if(x != 0)
                      /*<<stdlib.js 359 14>>*/ return x;
                     /*<<stdlib.js 360 2>>*/ break;
                   case 251:
                     /*<<stdlib.js 362 22>>*/  /*<<stdlib.js 363 16>>*/ caml_invalid_argument
                     ("equal: abstract value");
                   case 255:
                     /*<<stdlib.js 367 2>>*/  /*<<stdlib.js 367 8>>*/ var
                     x=
                       /*<<stdlib.js 367 10>>*/ caml_int64_compare(a,b);
                     /*<<stdlib.js 368 2>>*/ if(x != 0)
                      /*<<stdlib.js 368 14>>*/ return x;
                     /*<<stdlib.js 369 2>>*/ break;
                   default:
                     /*<<stdlib.js 372 14>>*/ if(a.length != b.length)
                      /*<<stdlib.js 372 40>>*/ return a.length < b.length?-1:1;
                     /*<<stdlib.js 373 14>>*/ if(a.length > 1)
                      /*<<stdlib.js 373 32>>*/ stack.push(a,b,1)}}
             else
               /*<<stdlib.js 377 10>>*/ return 1}
          else
            /*<<stdlib.js 378 13>>*/ if
            (b instanceof MlString
             ||
             b instanceof Array
             &&
             b[0]
             ===
             (b[0] | 0))
             /*<<stdlib.js 379 60>>*/ return -1;
           else
             /*<<stdlib.js 381 13>>*/ if
             (typeof a != "number" && a && a.compare)
              /*<<stdlib.js 381 57>>*/ return  /*<<stdlib.js 382 15>>*/ a.compare
                     (b,total);
            else
              /*<<stdlib.js 383 13>>*/ if(typeof a == "function")
               /*<<stdlib.js 383 41>>*/  /*<<stdlib.js 384 8>>*/ caml_invalid_argument
               ("equal: functional value");
             else
               /*<<stdlib.js 385 13>>*/ { /*<<stdlib.js 386 8>>*/ if(a < b)
                 /*<<stdlib.js 386 19>>*/ return -1;
                /*<<stdlib.js 387 8>>*/ if(a > b)
                 /*<<stdlib.js 387 19>>*/ return 1;
                /*<<stdlib.js 388 8>>*/ if(a != b)
                 /*<<stdlib.js 388 20>>*/ { /*<<stdlib.js 389 10>>*/ if
                  (!total)
                   /*<<stdlib.js 389 22>>*/ return NaN;
                  /*<<stdlib.js 390 10>>*/ if(a == a)
                   /*<<stdlib.js 390 22>>*/ return 1;
                  /*<<stdlib.js 391 10>>*/ if(b == b)
                   /*<<stdlib.js 391 22>>*/ return -1}}
         /*<<stdlib.js 395 4>>*/ if(stack.length == 0)
          /*<<stdlib.js 395 27>>*/ return 0;
         /*<<stdlib.js 396 4>>*/  /*<<stdlib.js 396 10>>*/ var
         i=
           /*<<stdlib.js 396 12>>*/ stack.pop();
        b =  /*<<stdlib.js 397 8>>*/ stack.pop();
        a =  /*<<stdlib.js 398 8>>*/ stack.pop();
         /*<<stdlib.js 399 4>>*/ if(i + 1 < a.length)
          /*<<stdlib.js 399 26>>*/ stack.push(a,b,i + 1);
        a = a[i];
        b = b[i]} /*<<stdlib.js 403 0>>*/ }
     /*<<stdlib.js 413 0>>*/ function caml_equal(x,y)
     { /*<<stdlib.js 413 29>>*/ return +( /*<<stdlib.js 413 38>>*/ caml_compare_val
               (x,y,false)
              ==
              0) /*<<stdlib.js 413 73>>*/ }
     /*<<bigarray.js 471 0>>*/ function caml_ba_num_dims(ba,_dim)
     { /*<<bigarray.js 472 4>>*/ return ba.num_dims /*<<bigarray.js 473 0>>*/ }
     /*<<fs.js 186 0>>*/ function caml_fs_init()
     { /*<<fs.js 187 2>>*/  /*<<fs.js 187 9>>*/ var
       tmp=
        joo_global_object.caml_fs_tmp;
       /*<<fs.js 188 2>>*/ if(tmp)
        /*<<fs.js 188 9>>*/ for
        ( /*<<fs.js 189 14>>*/ var i=0;i < tmp.length;i++)
         /*<<fs.js 189 39>>*/  /*<<fs.js 190 6>>*/ caml_fs_register
         (tmp[i].name,tmp[i].content);
      joo_global_object.caml_fs_register = caml_fs_register;
       /*<<fs.js 194 2>>*/ return 0 /*<<fs.js 195 0>>*/ }
     /*<<stdlib.js 253 0>>*/ if(!Math.imul)
     Math.imul
     =
     function(x,y)
      {y |= 0;
        /*<<stdlib.js 256 14>>*/ return ((x >> 16) * y << 16)
              +
              (x & 65535)
              *
              y
              |
              0 /*<<stdlib.js 255 4>>*/ };
     /*<<stdlib.js 257 0>>*/  /*<<stdlib.js 257 13>>*/ var caml_mul=Math.imul;
     /*<<stdlib.js 721 0>>*/ function caml_hash_mix_int(h,d)
     {d =  /*<<stdlib.js 722 6>>*/ caml_mul(d,3432918353 | 0);
      d = d << 15 | d >>> 32 - 15;
      d =  /*<<stdlib.js 724 6>>*/ caml_mul(d,461845907);
      h ^= d;
      h = h << 13 | h >>> 32 - 13;
       /*<<stdlib.js 727 2>>*/ return (h + (h << 2) | 0)
             +
             (3864292196 | 0)
             |
             0 /*<<stdlib.js 728 0>>*/ }
     /*<<stdlib.js 785 0>>*/ function caml_hash_mix_string_arr(h,s)
     { /*<<stdlib.js 786 2>>*/ var  /*<<stdlib.js 786 10>>*/ len=s.length,i,w;
       /*<<stdlib.js 787 2>>*/ for(i = 0;i + 4 <= len;i += 4)
        /*<<stdlib.js 787 36>>*/ {w
        =
        s[i]
        |
        s[i + 1]
        <<
        8
        |
        s[i + 2]
        <<
        16
        |
        s[i + 3]
        <<
        24;
        h =  /*<<stdlib.js 792 8>>*/ caml_hash_mix_int(h,w)}
      w = 0;
       /*<<stdlib.js 795 2>>*/ switch(len & 3)
       {case 3:w = s[i + 2] << 16;
        case 2:w |= s[i + 1] << 8;
        case 1:w |= s[i];h =  /*<<stdlib.js 799 8>>*/ caml_hash_mix_int(h,w)
        }
      h ^= len;
       /*<<stdlib.js 803 2>>*/ return h /*<<stdlib.js 804 0>>*/ }
     /*<<stdlib.js 122 0>>*/ function caml_return_exn_constant(tag)
     { /*<<stdlib.js 122 42>>*/ return tag /*<<stdlib.js 122 54>>*/ }
     /*<<stdlib.js 76 0>>*/  /*<<stdlib.js 76 22>>*/ var caml_named_values={};
     /*<<stdlib.js 87 0>>*/ function caml_named_value(nm)
     { /*<<stdlib.js 88 2>>*/ return caml_named_values[nm] /*<<stdlib.js 89 0>>*/ }
     /*<<stdlib.js 148 0>>*/ function caml_wrap_exception(e)
     { /*<<stdlib.js 149 2>>*/ if(e instanceof Array)
        /*<<stdlib.js 149 25>>*/ return e;
       /*<<stdlib.js 151 2>>*/ if
       (joo_global_object.RangeError
        &&
        e instanceof joo_global_object.RangeError
        &&
        e.message
        &&
         /*<<stdlib.js 154 8>>*/ e.message.match(/maximum call stack/i))
        /*<<stdlib.js 155 4>>*/ return  /*<<stdlib.js 155 11>>*/ caml_return_exn_constant
               (caml_global_data.Stack_overflow);
       /*<<stdlib.js 157 2>>*/ if
       (joo_global_object.InternalError
        &&
        e instanceof joo_global_object.InternalError
        &&
        e.message
        &&
         /*<<stdlib.js 160 8>>*/ e.message.match(/too much recursion/i))
        /*<<stdlib.js 161 4>>*/ return  /*<<stdlib.js 161 11>>*/ caml_return_exn_constant
               (caml_global_data.Stack_overflow);
       /*<<stdlib.js 163 2>>*/ if(e instanceof joo_global_object.Error)
        /*<<stdlib.js 164 4>>*/ return [0,
                /*<<stdlib.js 164 14>>*/ caml_named_value("jsError"),
               e];
       /*<<stdlib.js 166 2>>*/ return [0,
              caml_global_data.Failure,
               /*<<stdlib.js 166 37>>*/ caml_js_to_string
               ( /*<<stdlib.js 166 56>>*/ String(e))] /*<<stdlib.js 167 0>>*/ }
     /*<<stdlib.js 908 0>>*/ function caml_sys_random_seed()
     { /*<<stdlib.js 909 2>>*/  /*<<stdlib.js 909 8>>*/ var
       x=
        new Date() ^ 4294967295 *  /*<<stdlib.js 909 32>>*/ Math.random();
       /*<<stdlib.js 910 2>>*/ return [0,x] /*<<stdlib.js 911 0>>*/ }
     /*<<stdlib.js 1128 0>>*/ function caml_list_of_js_array(a)
     { /*<<stdlib.js 1129 2>>*/  /*<<stdlib.js 1129 8>>*/ var l=0;
       /*<<stdlib.js 1130 2>>*/ for
       ( /*<<stdlib.js 1130 11>>*/ var i=a.length - 1;i >= 0;i--)
        /*<<stdlib.js 1130 36>>*/ { /*<<stdlib.js 1131 4>>*/  /*<<stdlib.js 1131 10>>*/ var
         e=
          a[i];
        l = [0,e,l]}
       /*<<stdlib.js 1134 2>>*/ return l /*<<stdlib.js 1135 0>>*/ }
     /*<<bigarray.js 536 0>>*/ function caml_ba_get_2(ba,i0,i1)
     { /*<<bigarray.js 537 4>>*/ return  /*<<bigarray.js 537 11>>*/ ba.get
              ([i0,i1]) /*<<bigarray.js 538 0>>*/ }
     /*<<parsing.js 236 0>>*/ function caml_set_parser_trace()
     { /*<<parsing.js 236 35>>*/ return 0 /*<<parsing.js 236 45>>*/ }
     /*<<unix.js 53 0>>*/ function win_handle_fd(x)
     { /*<<unix.js 53 27>>*/ return x /*<<unix.js 53 36>>*/ }
     /*<<bigarray.js 552 0>>*/ function caml_ba_uint8_set16(ba,i0,v)
     { /*<<bigarray.js 553 4>>*/ ba.set1(i0,v & 255);
       /*<<bigarray.js 554 4>>*/ ba.set1(i0 + 1,v >>> 8 & 255);
       /*<<bigarray.js 555 4>>*/ return 0 /*<<bigarray.js 556 0>>*/ }
     /*<<fs.js 81 0>>*/ function caml_sys_chdir(dir)
     { /*<<fs.js 82 2>>*/ if
       ( /*<<fs.js 82 5>>*/ caml_sys_file_exists(dir)
        &&
         /*<<fs.js 82 34>>*/ caml_sys_is_directory(dir))
        /*<<fs.js 82 61>>*/ { /*<<fs.js 83 4>>*/  /*<<fs.js 83 13>>*/ var
         name=
           /*<<fs.js 83 15>>*/ caml_make_path(dir);
         /*<<fs.js 84 4>>*/ name.push("");
        caml_current_dir =  /*<<fs.js 85 23>>*/ name.join("/");
         /*<<fs.js 86 4>>*/ return 0}
      else
        /*<<fs.js 89 4>>*/ caml_raise_no_such_file(dir) /*<<fs.js 90 0>>*/ }
     /*<<gc.js 12 0>>*/ function caml_gc_counters()
     { /*<<gc.js 12 30>>*/ return [254,0,0,0] /*<<gc.js 12 49>>*/ }
     /*<<jslib.js 30 0>>*/ function caml_js_delete(o,f)
     {delete o[f]; /*<<jslib.js 30 44>>*/ return 0 /*<<jslib.js 30 52>>*/ }
     /*<<stdlib.js 455 0>>*/ function caml_int_of_string(s)
     { /*<<stdlib.js 456 2>>*/ var
        /*<<stdlib.js 456 8>>*/ r=
         /*<<stdlib.js 456 10>>*/ caml_parse_sign_and_base(s),
        /*<<stdlib.js 457 8>>*/ i=r[0],
        /*<<stdlib.js 457 21>>*/ sign=r[1],
        /*<<stdlib.js 457 34>>*/ base=r[2],
        /*<<stdlib.js 458 10>>*/ len=
         /*<<stdlib.js 458 12>>*/ caml_ml_string_length(s),
        /*<<stdlib.js 459 16>>*/ threshold=-1 >>> 0,
        /*<<stdlib.js 460 8>>*/ c=
        i < len? /*<<stdlib.js 460 20>>*/ caml_string_unsafe_get(s,i):0,
        /*<<stdlib.js 461 8>>*/ d=
         /*<<stdlib.js 461 10>>*/ caml_parse_digit(c);
       /*<<stdlib.js 462 2>>*/ if(d < 0 || d >= base)
        /*<<stdlib.js 462 26>>*/ caml_failwith("int_of_string");
       /*<<stdlib.js 456 2>>*/  /*<<stdlib.js 463 10>>*/ var res=d;
       /*<<stdlib.js 464 2>>*/ for(i++;i < len;i++)
        /*<<stdlib.js 464 22>>*/ {c
        =
         /*<<stdlib.js 465 8>>*/ caml_string_unsafe_get(s,i);
         /*<<stdlib.js 466 4>>*/ if(c == 95)
          /*<<stdlib.js 466 17>>*/ continue;
        d =  /*<<stdlib.js 467 8>>*/ caml_parse_digit(c);
         /*<<stdlib.js 468 4>>*/ if(d < 0 || d >= base)
          /*<<stdlib.js 468 28>>*/ break;
        res = base * res + d;
         /*<<stdlib.js 470 4>>*/ if(res > threshold)
          /*<<stdlib.js 470 25>>*/ caml_failwith("int_of_string")}
       /*<<stdlib.js 472 2>>*/ if(i != len)
        /*<<stdlib.js 472 16>>*/ caml_failwith("int_of_string");
      res = sign * res;
       /*<<stdlib.js 477 2>>*/ if(base == 10 && (res | 0) != res)
        /*<<stdlib.js 479 4>>*/ caml_failwith("int_of_string");
       /*<<stdlib.js 480 2>>*/ return res | 0 /*<<stdlib.js 481 0>>*/ }
     /*<<marshal.js 21 0>>*/  /*<<marshal.js 21 27>>*/ var
     caml_marshal_constants=
      {PREFIX_SMALL_BLOCK:128,
       PREFIX_SMALL_INT:64,
       PREFIX_SMALL_STRING:32,
       CODE_INT8:0,
       CODE_INT16:1,
       CODE_INT32:2,
       CODE_INT64:3,
       CODE_SHARED8:4,
       CODE_SHARED16:5,
       CODE_SHARED32:6,
       CODE_BLOCK32:8,
       CODE_BLOCK64:19,
       CODE_STRING8:9,
       CODE_STRING32:10,
       CODE_DOUBLE_BIG:11,
       CODE_DOUBLE_LITTLE:12,
       CODE_DOUBLE_ARRAY8_BIG:13,
       CODE_DOUBLE_ARRAY8_LITTLE:14,
       CODE_DOUBLE_ARRAY32_BIG:15,
       CODE_DOUBLE_ARRAY32_LITTLE:7,
       CODE_CODEPOINTER:16,
       CODE_INFIXPOINTER:17,
       CODE_CUSTOM:18};
     /*<<jslib_js_of_ocaml.js 105 0>>*/ function caml_js_equals(x,y)
     { /*<<jslib_js_of_ocaml.js 105 33>>*/ return +(x == y) /*<<jslib_js_of_ocaml.js 105 51>>*/ }
     /*<<stdlib.js 762 0>>*/ function caml_hash_mix_string_str(h,s)
     { /*<<stdlib.js 763 2>>*/ var  /*<<stdlib.js 763 10>>*/ len=s.length,i,w;
       /*<<stdlib.js 764 2>>*/ for(i = 0;i + 4 <= len;i += 4)
        /*<<stdlib.js 764 36>>*/ {w
        =
         /*<<stdlib.js 765 8>>*/ s.charCodeAt(i)
        |
         /*<<stdlib.js 766 11>>*/ s.charCodeAt(i + 1)
        <<
        8
        |
         /*<<stdlib.js 767 11>>*/ s.charCodeAt(i + 2)
        <<
        16
        |
         /*<<stdlib.js 768 11>>*/ s.charCodeAt(i + 3)
        <<
        24;
        h =  /*<<stdlib.js 769 8>>*/ caml_hash_mix_int(h,w)}
      w = 0;
       /*<<stdlib.js 772 2>>*/ switch(len & 3)
       {case 3:w =  /*<<stdlib.js 773 15>>*/ s.charCodeAt(i + 2) << 16;
        case 2:w |=  /*<<stdlib.js 774 15>>*/ s.charCodeAt(i + 1) << 8;
        case 1:
         w |=  /*<<stdlib.js 775 15>>*/ s.charCodeAt(i);
         h =  /*<<stdlib.js 776 14>>*/ caml_hash_mix_int(h,w)
        }
      h ^= len;
       /*<<stdlib.js 780 2>>*/ return h /*<<stdlib.js 781 0>>*/ }
     /*<<stdlib.js 422 0>>*/ function caml_greaterthan(x,y)
     { /*<<stdlib.js 422 35>>*/ return +( /*<<stdlib.js 422 44>>*/ caml_compare_val
               (x,y,false)
              >
              0) /*<<stdlib.js 422 78>>*/ }
     /*<<bigarray.js 596 0>>*/ function caml_ba_blit(src,dst)
     { /*<<bigarray.js 597 4>>*/ dst.blit(src);
       /*<<bigarray.js 598 4>>*/ return 0 /*<<bigarray.js 599 0>>*/ }
     /*<<marshal.js 141 0>>*/ function caml_input_value_from_reader
     (reader,ofs)
     { /*<<marshal.js 142 2>>*/ var
        /*<<marshal.js 142 13>>*/ _magic=
         /*<<marshal.js 142 15>>*/ reader.read32u(),
        /*<<marshal.js 143 17>>*/ _block_len=
         /*<<marshal.js 143 19>>*/ reader.read32u(),
        /*<<marshal.js 144 18>>*/ num_objects=
         /*<<marshal.js 144 20>>*/ reader.read32u(),
        /*<<marshal.js 145 15>>*/ _size_32=
         /*<<marshal.js 145 17>>*/ reader.read32u(),
        /*<<marshal.js 146 15>>*/ _size_64=
         /*<<marshal.js 146 17>>*/ reader.read32u(),
        /*<<marshal.js 147 12>>*/ stack=[],
        /*<<marshal.js 148 23>>*/ intern_obj_table=num_objects > 0?[]:null,
        /*<<marshal.js 149 18>>*/ obj_counter=0;
       /*<<marshal.js 150 2>>*/ function intern_rec()
       { /*<<marshal.js 151 4>>*/  /*<<marshal.js 151 13>>*/ var
         code=
           /*<<marshal.js 151 15>>*/ reader.read8u();
         /*<<marshal.js 152 4>>*/ if(code >= 64)
          /*<<marshal.js 152 47>>*/ if(code >= 128)
           /*<<marshal.js 153 51>>*/ { /*<<marshal.js 154 8>>*/ var
             /*<<marshal.js 154 16>>*/ tag=code & 15,
             /*<<marshal.js 155 17>>*/ size=code >> 4 & 7,
             /*<<marshal.js 156 14>>*/ v=[tag];
            /*<<marshal.js 157 8>>*/ if(size == 0)
             /*<<marshal.js 157 23>>*/ return v;
            /*<<marshal.js 158 8>>*/ if(intern_obj_table)
            intern_obj_table[obj_counter++] = v;
            /*<<marshal.js 159 8>>*/ stack.push(v,size);
            /*<<marshal.js 160 8>>*/ return v}
         else
           /*<<marshal.js 162 8>>*/ return code & 63;
        else
          /*<<marshal.js 163 11>>*/ if(code >= 32)
           /*<<marshal.js 164 52>>*/ { /*<<marshal.js 165 8>>*/ var
             /*<<marshal.js 165 16>>*/ len=code & 31,
             /*<<marshal.js 166 14>>*/ v=
              /*<<marshal.js 166 16>>*/ reader.readstr(len);
            /*<<marshal.js 167 8>>*/ if(intern_obj_table)
            intern_obj_table[obj_counter++] = v;
            /*<<marshal.js 168 8>>*/ return v}
         else
           /*<<marshal.js 169 13>>*/ switch(code)
           {case 0:
              /*<<marshal.js 172 10>>*/ return  /*<<marshal.js 172 17>>*/ reader.read8s
                     ();
            case 1:
              /*<<marshal.js 174 10>>*/ return  /*<<marshal.js 174 17>>*/ reader.read16s
                     ();
            case 2:
              /*<<marshal.js 176 10>>*/ return  /*<<marshal.js 176 17>>*/ reader.read32s
                     ();
            case 3:
              /*<<marshal.js 178 10>>*/ caml_failwith
              ("input_value: integer too large");
              /*<<marshal.js 179 10>>*/ break;
            case 4:
              /*<<marshal.js 181 10>>*/  /*<<marshal.js 181 21>>*/ var
              offset=
                /*<<marshal.js 181 23>>*/ reader.read8u();
              /*<<marshal.js 182 10>>*/ return intern_obj_table
                     [obj_counter - offset];
            case 5:
              /*<<marshal.js 184 10>>*/  /*<<marshal.js 184 21>>*/ var
              offset=
                /*<<marshal.js 184 23>>*/ reader.read16u();
              /*<<marshal.js 185 10>>*/ return intern_obj_table
                     [obj_counter - offset];
            case 6:
              /*<<marshal.js 187 10>>*/  /*<<marshal.js 187 21>>*/ var
              offset=
                /*<<marshal.js 187 23>>*/ reader.read32u();
              /*<<marshal.js 188 10>>*/ return intern_obj_table
                     [obj_counter - offset];
            case 8:
              /*<<marshal.js 190 10>>*/ var
               /*<<marshal.js 190 21>>*/ header=
                /*<<marshal.js 190 23>>*/ reader.read32u(),
               /*<<marshal.js 191 18>>*/ tag=header & 255,
               /*<<marshal.js 192 19>>*/ size=header >> 10,
               /*<<marshal.js 193 16>>*/ v=[tag];
              /*<<marshal.js 194 10>>*/ if(size == 0)
               /*<<marshal.js 194 25>>*/ return v;
              /*<<marshal.js 195 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 196 10>>*/ stack.push(v,size);
              /*<<marshal.js 197 10>>*/ return v;
            case 19:
              /*<<marshal.js 199 10>>*/ caml_failwith
              ("input_value: data block too large");
              /*<<marshal.js 200 10>>*/ break;
            case 9:
              /*<<marshal.js 202 10>>*/ var
               /*<<marshal.js 202 18>>*/ len=
                /*<<marshal.js 202 20>>*/ reader.read8u(),
               /*<<marshal.js 203 16>>*/ v=
                /*<<marshal.js 203 18>>*/ reader.readstr(len);
              /*<<marshal.js 204 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 205 10>>*/ return v;
            case 10:
              /*<<marshal.js 207 10>>*/ var
               /*<<marshal.js 207 18>>*/ len=
                /*<<marshal.js 207 20>>*/ reader.read32u(),
               /*<<marshal.js 208 16>>*/ v=
                /*<<marshal.js 208 18>>*/ reader.readstr(len);
              /*<<marshal.js 209 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 210 10>>*/ return v;
            case 12:
              /*<<marshal.js 212 10>>*/  /*<<marshal.js 212 16>>*/ var
              t=
               new Array(8);
              /*<<marshal.js 213 10>>*/ for
              ( /*<<marshal.js 213 21>>*/ var i=0;i < 8;i++)
              t[7 - i] =  /*<<marshal.js 213 47>>*/ reader.read8u();
              /*<<marshal.js 212 10>>*/  /*<<marshal.js 214 16>>*/ var
              v=
                /*<<marshal.js 214 18>>*/ caml_float_of_bytes(t);
              /*<<marshal.js 215 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 216 10>>*/ return v;
            case 11:
              /*<<marshal.js 218 10>>*/  /*<<marshal.js 218 16>>*/ var
              t=
               new Array(8);
              /*<<marshal.js 219 10>>*/ for
              ( /*<<marshal.js 219 21>>*/ var i=0;i < 8;i++)
              t[i] =  /*<<marshal.js 219 43>>*/ reader.read8u();
              /*<<marshal.js 218 10>>*/  /*<<marshal.js 220 16>>*/ var
              v=
                /*<<marshal.js 220 18>>*/ caml_float_of_bytes(t);
              /*<<marshal.js 221 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 222 10>>*/ return v;
            case 14:
              /*<<marshal.js 224 10>>*/ var
               /*<<marshal.js 224 18>>*/ len=
                /*<<marshal.js 224 20>>*/ reader.read8u(),
               /*<<marshal.js 225 16>>*/ v=new Array(len + 1);
             v[0] = 254;
              /*<<marshal.js 224 10>>*/  /*<<marshal.js 227 16>>*/ var
              t=
               new Array(8);
              /*<<marshal.js 228 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 229 10>>*/ for
              ( /*<<marshal.js 229 21>>*/ var i=1;i <= len;i++)
               /*<<marshal.js 229 39>>*/ { /*<<marshal.js 230 12>>*/ for
                ( /*<<marshal.js 230 23>>*/ var j=0;j < 8;j++)
                t[7 - j] =  /*<<marshal.js 230 49>>*/ reader.read8u();
               v[i] =  /*<<marshal.js 231 19>>*/ caml_float_of_bytes(t)}
              /*<<marshal.js 233 10>>*/ return v;
            case 13:
              /*<<marshal.js 235 10>>*/ var
               /*<<marshal.js 235 18>>*/ len=
                /*<<marshal.js 235 20>>*/ reader.read8u(),
               /*<<marshal.js 236 16>>*/ v=new Array(len + 1);
             v[0] = 254;
              /*<<marshal.js 235 10>>*/  /*<<marshal.js 238 16>>*/ var
              t=
               new Array(8);
              /*<<marshal.js 239 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 240 10>>*/ for
              ( /*<<marshal.js 240 21>>*/ var i=1;i <= len;i++)
               /*<<marshal.js 240 39>>*/ { /*<<marshal.js 241 12>>*/ for
                ( /*<<marshal.js 241 23>>*/ var j=0;j < 8;j++)
                t[j] =  /*<<marshal.js 241 45>>*/ reader.read8u();
               v[i] =  /*<<marshal.js 242 20>>*/ caml_float_of_bytes(t)}
              /*<<marshal.js 244 10>>*/ return v;
            case 7:
              /*<<marshal.js 246 10>>*/ var
               /*<<marshal.js 246 18>>*/ len=
                /*<<marshal.js 246 20>>*/ reader.read32u(),
               /*<<marshal.js 247 16>>*/ v=new Array(len + 1);
             v[0] = 254;
              /*<<marshal.js 249 10>>*/ if(intern_obj_table)
              intern_obj_table[obj_counter++] = v;
              /*<<marshal.js 246 10>>*/  /*<<marshal.js 250 16>>*/ var
              t=
               new Array(8);
              /*<<marshal.js 251 10>>*/ for
              ( /*<<marshal.js 251 21>>*/ var i=1;i <= len;i++)
               /*<<marshal.js 251 39>>*/ { /*<<marshal.js 252 12>>*/ for
                ( /*<<marshal.js 252 23>>*/ var j=0;j < 8;j++)
                t[7 - j] =  /*<<marshal.js 252 49>>*/ reader.read8u();
               v[i] =  /*<<marshal.js 253 19>>*/ caml_float_of_bytes(t)}
              /*<<marshal.js 255 10>>*/ return v;
            case 15:
              /*<<marshal.js 257 10>>*/ var
               /*<<marshal.js 257 18>>*/ len=
                /*<<marshal.js 257 20>>*/ reader.read32u(),
               /*<<marshal.js 258 16>>*/ v=new Array(len + 1);
             v[0] = 254;
              /*<<marshal.js 257 10>>*/  /*<<marshal.js 260 16>>*/ var
              t=
               new Array(8);
              /*<<marshal.js 261 10>>*/ for
              ( /*<<marshal.js 261 21>>*/ var i=1;i <= len;i++)
               /*<<marshal.js 261 39>>*/ { /*<<marshal.js 262 12>>*/ for
                ( /*<<marshal.js 262 23>>*/ var j=0;j < 8;j++)
                t[j] =  /*<<marshal.js 262 45>>*/ reader.read8u();
               v[i] =  /*<<marshal.js 263 20>>*/ caml_float_of_bytes(t)}
              /*<<marshal.js 265 10>>*/ return v;
            case 16:
            case 17:
              /*<<marshal.js 268 10>>*/ caml_failwith
              ("input_value: code pointer");
              /*<<marshal.js 269 10>>*/ break;
            case 18:
              /*<<marshal.js 271 10>>*/ var c, /*<<marshal.js 271 19>>*/ s="";
              /*<<marshal.js 272 10>>*/ while
              ((c =  /*<<marshal.js 272 22>>*/ reader.read8u()) != 0)
              s +=  /*<<marshal.js 272 51>>*/ String.fromCharCode(c);
              /*<<marshal.js 273 10>>*/ switch(s)
              {case "_j":
                 /*<<marshal.js 276 12>>*/  /*<<marshal.js 276 18>>*/ var
                 t=
                  new Array(8);
                 /*<<marshal.js 277 12>>*/ for
                 ( /*<<marshal.js 277 23>>*/ var j=0;j < 8;j++)
                 t[j] =  /*<<marshal.js 277 45>>*/ reader.read8u();
                 /*<<marshal.js 276 12>>*/  /*<<marshal.js 278 18>>*/ var
                 v=
                   /*<<marshal.js 278 20>>*/ caml_int64_of_bytes(t);
                 /*<<marshal.js 279 12>>*/ if(intern_obj_table)
                 intern_obj_table[obj_counter++] = v;
                 /*<<marshal.js 280 12>>*/ return v;
               case "_i":
                 /*<<marshal.js 283 12>>*/  /*<<marshal.js 283 18>>*/ var
                 v=
                   /*<<marshal.js 283 20>>*/ reader.read32s();
                 /*<<marshal.js 284 12>>*/ if(intern_obj_table)
                 intern_obj_table[obj_counter++] = v;
                 /*<<marshal.js 285 12>>*/ return v;
               case "_n":
                 /*<<marshal.js 288 12>>*/ switch
                 ( /*<<marshal.js 288 20>>*/ reader.read8u())
                 {case 1:
                    /*<<marshal.js 290 14>>*/  /*<<marshal.js 290 20>>*/ var
                    v=
                      /*<<marshal.js 290 22>>*/ reader.read32s();
                    /*<<marshal.js 291 14>>*/ if(intern_obj_table)
                    intern_obj_table[obj_counter++] = v;
                    /*<<marshal.js 292 14>>*/ return v;
                  case 2:
                    /*<<marshal.js 294 14>>*/ caml_failwith
                    ("input_value: native integer value too large");
                  default:
                    /*<<marshal.js 296 14>>*/ caml_failwith
                    ("input_value: ill-formed native integer")}
               default:
                 /*<<marshal.js 299 12>>*/ caml_failwith
                 ("input_value: unknown custom block identifier")}
            default:
              /*<<marshal.js 302 10>>*/ caml_failwith
              ("input_value: ill-formed message")} /*<<marshal.js 306 2>>*/ }
       /*<<marshal.js 307 2>>*/  /*<<marshal.js 307 10>>*/ var
       res=
         /*<<marshal.js 307 12>>*/ intern_rec();
       /*<<marshal.js 308 2>>*/ while(stack.length > 0)
        /*<<marshal.js 308 27>>*/ { /*<<marshal.js 309 4>>*/ var
          /*<<marshal.js 309 13>>*/ size=
           /*<<marshal.js 309 15>>*/ stack.pop(),
          /*<<marshal.js 310 10>>*/ v= /*<<marshal.js 310 12>>*/ stack.pop(),
          /*<<marshal.js 311 10>>*/ d=v.length;
         /*<<marshal.js 312 4>>*/ if(d < size)
          /*<<marshal.js 312 18>>*/ stack.push(v,size);
        v[d] =  /*<<marshal.js 313 11>>*/ intern_rec()}
       /*<<marshal.js 315 2>>*/ if(typeof ofs != "number")ofs[0] = reader.i;
       /*<<marshal.js 316 2>>*/ return res /*<<marshal.js 317 0>>*/ }
     /*<<bigarray.js 614 0>>*/ function caml_ba_slice(ba,vind)
     { /*<<bigarray.js 615 4>>*/ return  /*<<bigarray.js 615 11>>*/ ba.slice
              ( /*<<bigarray.js 615 20>>*/ caml_js_from_array(vind)) /*<<bigarray.js 616 0>>*/ }
     /*<<stdlib.js 196 0>>*/ function caml_raise_zero_divide()
     { /*<<stdlib.js 197 2>>*/ caml_raise_constant
       (caml_global_data.Division_by_zero) /*<<stdlib.js 198 0>>*/ }
     /*<<int64.js 215 0>>*/ function caml_int64_div(x,y)
     { /*<<int64.js 217 2>>*/ if
       ( /*<<int64.js 217 6>>*/ caml_int64_is_zero(y))
        /*<<int64.js 217 30>>*/ caml_raise_zero_divide();
       /*<<int64.js 218 2>>*/  /*<<int64.js 218 11>>*/ var sign=x[3] ^ y[3];
       /*<<int64.js 219 2>>*/ if(x[3] & 32768)
       x =  /*<<int64.js 219 25>>*/ caml_int64_neg(x);
       /*<<int64.js 220 2>>*/ if(y[3] & 32768)
       y =  /*<<int64.js 220 25>>*/ caml_int64_neg(y);
       /*<<int64.js 218 2>>*/  /*<<int64.js 221 8>>*/ var
       q=
         /*<<int64.js 221 10>>*/ caml_int64_udivmod(x,y)[1];
       /*<<int64.js 222 2>>*/ if(sign & 32768)
       q =  /*<<int64.js 222 25>>*/ caml_int64_neg(q);
       /*<<int64.js 223 2>>*/ return q /*<<int64.js 224 0>>*/ }
     /*<<bigarray.js 531 0>>*/ function caml_ba_get_1(ba,i0)
     { /*<<bigarray.js 532 4>>*/ return  /*<<bigarray.js 532 11>>*/ ba.get1
              (i0) /*<<bigarray.js 533 0>>*/ }
     /*<<bigstring.js 56 0>>*/ function bigstring_find(bs,chr,pos,len)
     { /*<<bigstring.js 57 2>>*/ while(len > 0)
        /*<<bigstring.js 57 16>>*/ { /*<<bigstring.js 58 4>>*/ if
         ( /*<<bigstring.js 58 7>>*/ caml_ba_get_1(bs,pos) == chr)
          /*<<bigstring.js 58 37>>*/ return pos;
        pos++;
        len--}
       /*<<bigstring.js 62 2>>*/ return -1 /*<<bigstring.js 63 0>>*/ }
     /*<<jslib.js 55 0>>*/ function caml_js_html_entities(s)
     { /*<<jslib.js 56 4>>*/ var
       str,
        /*<<jslib.js 56 18>>*/ temp=
         /*<<jslib.js 56 20>>*/ document.createElement("p");
      temp.innerHTML = s;
      str = temp.textContent || temp.innerText;
      temp = null;
       /*<<jslib.js 60 4>>*/ return str /*<<jslib.js 61 0>>*/ }
     /*<<io.js 191 0>>*/ function caml_ml_channel_size(chan)
     { /*<<io.js 192 2>>*/ return  /*<<io.js 192 9>>*/ caml_ml_string_length
              (chan.file.data) /*<<io.js 193 0>>*/ }
     /*<<int64.js 257 0>>*/ function caml_int64_of_float(x)
     { /*<<int64.js 258 2>>*/ if(x < 0)
       x =  /*<<int64.js 258 17>>*/ Math.ceil(x);
       /*<<int64.js 259 2>>*/ return [255,
              x & 16777215,
               /*<<int64.js 261 10>>*/ Math.floor(x * caml_int64_offset)
              &
              16777215,
               /*<<int64.js 262 10>>*/ Math.floor
               (x * caml_int64_offset * caml_int64_offset)
              &
              65535] /*<<int64.js 263 0>>*/ }
     /*<<io.js 197 0>>*/ function caml_ml_channel_size_64(chan)
     { /*<<io.js 198 2>>*/ return  /*<<io.js 198 9>>*/ caml_int64_of_float
              ( /*<<io.js 198 29>>*/ caml_ml_string_length(chan.file.data)) /*<<io.js 199 0>>*/ }
     /*<<bigarray.js 586 0>>*/ function caml_ba_set_2(ba,i0,i1,v)
     { /*<<bigarray.js 587 4>>*/ return  /*<<bigarray.js 587 11>>*/ ba.set
              ([i0,i1],v) /*<<bigarray.js 588 0>>*/ }
     /*<<mlString.js 217 0>>*/ function caml_string_unsafe_set(s,i,c)
     {c &= 255;
       /*<<mlString.js 220 2>>*/ if(s.t != 4)
        /*<<mlString.js 220 28>>*/ { /*<<mlString.js 221 4>>*/ if
         (i == s.c.length)
          /*<<mlString.js 221 25>>*/ {s.c
          +=
           /*<<mlString.js 222 13>>*/ String.fromCharCode(c);
           /*<<mlString.js 223 6>>*/ if(i + 1 == s.l)s.t = 0;
           /*<<mlString.js 224 6>>*/ return 0}
         /*<<mlString.js 226 4>>*/ caml_convert_string_to_array(s)}
      s.c[i] = c;
       /*<<mlString.js 229 2>>*/ return 0 /*<<mlString.js 230 0>>*/ }
     /*<<internalMod.js 22 0>>*/ function caml_CamlinternalMod_init_mod
     (loc,shape)
     { /*<<internalMod.js 23 2>>*/ function undef_module(_x)
       { /*<<internalMod.js 24 4>>*/ caml_raise_with_arg
         (caml_global_data.Undefined_recursive_module,loc) /*<<internalMod.js 25 2>>*/ }
       /*<<internalMod.js 26 2>>*/ function loop(shape,struct,idx)
       { /*<<internalMod.js 27 4>>*/ if(typeof shape === "number")
          /*<<internalMod.js 28 6>>*/ switch(shape)
          {case 0:
            struct[idx] = {fun:undef_module};
             /*<<internalMod.js 31 8>>*/ break;
           case 1:
            struct[idx] = [246,undef_module];
             /*<<internalMod.js 34 8>>*/ break;
           default:struct[idx] = []}
        else
          /*<<internalMod.js 39 6>>*/ switch(shape[0])
          {case 0:
            struct[idx] = [0];
             /*<<internalMod.js 42 8>>*/ for
             ( /*<<internalMod.js 42 17>>*/ var i=1;i < shape[1].length;i++)
              /*<<internalMod.js 43 10>>*/ loop(shape[1][i],struct[idx],i);
             /*<<internalMod.js 44 8>>*/ break;
           default:struct[idx] = shape[1]} /*<<internalMod.js 48 2>>*/ }
       /*<<internalMod.js 49 2>>*/  /*<<internalMod.js 49 10>>*/ var res=[];
       /*<<internalMod.js 50 2>>*/ loop(shape,res,0);
       /*<<internalMod.js 51 2>>*/ return res[0] /*<<internalMod.js 52 0>>*/ }
     /*<<jslib_js_of_ocaml.js 112 0>>*/ function caml_js_eval_string(s)
     { /*<<jslib_js_of_ocaml.js 112 34>>*/ return  /*<<jslib_js_of_ocaml.js 112 41>>*/ eval
              ( /*<<jslib_js_of_ocaml.js 112 46>>*/ s.toString()) /*<<jslib_js_of_ocaml.js 112 60>>*/ }
     /*<<mlString.js 370 0>>*/ function caml_bytes_compare(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 371 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 372 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 373 2>>*/ return s1.c < s2.c?-1:s1.c > s2.c?1:0 /*<<mlString.js 374 0>>*/ }
     /*<<marshal.js 321 0>>*/ function caml_marshal_data_size(s,ofs)
     { /*<<marshal.js 322 2>>*/ function get32(s,i)
       { /*<<marshal.js 323 4>>*/ return  /*<<marshal.js 323 12>>*/ caml_string_unsafe_get
                (s,i)
               <<
               24
               |
                /*<<marshal.js 324 12>>*/ caml_string_unsafe_get(s,i + 1)
               <<
               16
               |
                /*<<marshal.js 325 12>>*/ caml_string_unsafe_get(s,i + 2)
               <<
               8
               |
                /*<<marshal.js 326 12>>*/ caml_string_unsafe_get(s,i + 3) /*<<marshal.js 327 2>>*/ }
       /*<<marshal.js 328 2>>*/ if
       ( /*<<marshal.js 328 6>>*/ get32(s,ofs) != (2224400062 | 0))
        /*<<marshal.js 329 4>>*/ caml_failwith
        ("Marshal.data_size: bad object");
       /*<<marshal.js 330 2>>*/ return  /*<<marshal.js 330 10>>*/ get32
              (s,ofs + 4) /*<<marshal.js 331 0>>*/ }
     /*<<marshal.js 50 0>>*/ function MlStringReader(s,i)
     {this.s =  /*<<marshal.js 50 42>>*/ caml_bytes_of_string(s);
      this.i = i /*<<marshal.js 50 79>>*/ }
    MlStringReader.prototype
    =
    {read8u:
     function()
      { /*<<marshal.js 52 23>>*/ return  /*<<marshal.js 52 30>>*/ this.s.charCodeAt
               (this.i++) /*<<marshal.js 52 9>>*/ },
     read8s:
     function()
      { /*<<marshal.js 53 23>>*/ return  /*<<marshal.js 53 30>>*/ this.s.charCodeAt
               (this.i++)
              <<
              24
              >>
              24 /*<<marshal.js 53 9>>*/ },
     read16u:
     function()
      { /*<<marshal.js 55 4>>*/ var
         /*<<marshal.js 55 10>>*/ s=this.s,
         /*<<marshal.js 55 22>>*/ i=this.i;
       this.i = i + 2;
        /*<<marshal.js 57 4>>*/ return  /*<<marshal.js 57 12>>*/ s.charCodeAt
               (i)
              <<
              8
              |
               /*<<marshal.js 57 36>>*/ s.charCodeAt(i + 1) /*<<marshal.js 54 10>>*/ },
     read16s:
     function()
      { /*<<marshal.js 60 4>>*/ var
         /*<<marshal.js 60 10>>*/ s=this.s,
         /*<<marshal.js 60 22>>*/ i=this.i;
       this.i = i + 2;
        /*<<marshal.js 62 4>>*/ return  /*<<marshal.js 62 12>>*/ s.charCodeAt
               (i)
              <<
              24
              >>
              16
              |
               /*<<marshal.js 62 43>>*/ s.charCodeAt(i + 1) /*<<marshal.js 59 10>>*/ },
     read32u:
     function()
      { /*<<marshal.js 65 4>>*/ var
         /*<<marshal.js 65 10>>*/ s=this.s,
         /*<<marshal.js 65 22>>*/ i=this.i;
       this.i = i + 4;
        /*<<marshal.js 67 4>>*/ return ( /*<<marshal.js 67 13>>*/ s.charCodeAt
                (i)
               <<
               24
               |
                /*<<marshal.js 67 39>>*/ s.charCodeAt(i + 1)
               <<
               16
               |
                /*<<marshal.js 68 13>>*/ s.charCodeAt(i + 2)
               <<
               8
               |
                /*<<marshal.js 68 39>>*/ s.charCodeAt(i + 3))
              >>>
              0 /*<<marshal.js 64 10>>*/ },
     read32s:
     function()
      { /*<<marshal.js 71 4>>*/ var
         /*<<marshal.js 71 10>>*/ s=this.s,
         /*<<marshal.js 71 22>>*/ i=this.i;
       this.i = i + 4;
        /*<<marshal.js 73 4>>*/ return  /*<<marshal.js 73 12>>*/ s.charCodeAt
               (i)
              <<
              24
              |
               /*<<marshal.js 73 38>>*/ s.charCodeAt(i + 1)
              <<
              16
              |
               /*<<marshal.js 74 7>>*/ s.charCodeAt(i + 2)
              <<
              8
              |
               /*<<marshal.js 74 33>>*/ s.charCodeAt(i + 3) /*<<marshal.js 70 10>>*/ },
     readstr:
     function(len)
      { /*<<marshal.js 77 4>>*/  /*<<marshal.js 77 10>>*/ var i=this.i;
       this.i = i + len;
        /*<<marshal.js 79 4>>*/ return  /*<<marshal.js 79 11>>*/ caml_new_string
               ( /*<<marshal.js 79 27>>*/ this.s.substring(i,i + len)) /*<<marshal.js 76 10>>*/ }};
     /*<<marshal.js 132 0>>*/ function caml_input_value_from_string(s,ofs)
     { /*<<marshal.js 133 2>>*/  /*<<marshal.js 133 13>>*/ var
       reader=
        new MlStringReader(s,typeof ofs == "number"?ofs:ofs[0]);
       /*<<marshal.js 134 2>>*/ return  /*<<marshal.js 134 9>>*/ caml_input_value_from_reader
              (reader,ofs) /*<<marshal.js 135 0>>*/ }
     /*<<io.js 268 0>>*/ function caml_input_value(chan)
     { /*<<io.js 269 2>>*/ var
        /*<<io.js 269 10>>*/ str=chan.file.data,
        /*<<io.js 270 13>>*/ offset=[chan.offset],
        /*<<io.js 271 11>>*/ _len=
         /*<<io.js 271 13>>*/ caml_marshal_data_size(str,offset[0]),
        /*<<io.js 272 10>>*/ res=
         /*<<io.js 272 12>>*/ caml_input_value_from_string(str,offset);
      chan.offset = offset[0];
       /*<<io.js 274 2>>*/ return res /*<<io.js 275 0>>*/ }
     /*<<bigarray.js 461 0>>*/ function caml_ba_kind(ba)
     { /*<<bigarray.js 462 4>>*/ return ba.kind /*<<bigarray.js 463 0>>*/ }
     /*<<jslib_js_of_ocaml.js 57 0>>*/ function caml_js_fun_call(f,args)
     { /*<<jslib_js_of_ocaml.js 57 37>>*/ return  /*<<jslib_js_of_ocaml.js 57 44>>*/ f.apply
              (null,
                /*<<jslib_js_of_ocaml.js 57 58>>*/ caml_js_from_array(args)) /*<<jslib_js_of_ocaml.js 57 85>>*/ }
     /*<<bigstring.js 107 0>>*/ function bigstring_marshal_blit_stub
     (s,ofs,len,v,_fl)
     { /*<<bigstring.js 109 2>>*/  /*<<bigstring.js 109 8>>*/ var
       t=
         /*<<bigstring.js 109 10>>*/ caml_output_val(v);
       /*<<bigstring.js 110 2>>*/ if(t.length > len)
        /*<<bigstring.js 110 22>>*/ caml_failwith
        ("Marshal.to_buffer: buffer overflow");
       /*<<bigstring.js 111 2>>*/ for
       ( /*<<bigstring.js 111 12>>*/ var i=0;i < t.length;i++)
        /*<<bigstring.js 111 35>>*/  /*<<bigstring.js 112 4>>*/ caml_ba_set_1
        (s,i + ofs,t[i]);
       /*<<bigstring.js 114 2>>*/ return t.length /*<<bigstring.js 115 0>>*/ }
     /*<<jslib.js 23 0>>*/ function caml_js_pure_expr(f)
     { /*<<jslib.js 23 33>>*/ return  /*<<jslib.js 23 40>>*/ f() /*<<jslib.js 23 45>>*/ }
     /*<<stdlib.js 1040 0>>*/ function caml_sys_exit(code)
     { /*<<stdlib.js 1041 2>>*/  /*<<stdlib.js 1041 8>>*/ var
       g=
        joo_global_object;
       /*<<stdlib.js 1042 2>>*/ if(g.quit)
        /*<<stdlib.js 1042 13>>*/ g.quit(code);
       /*<<stdlib.js 1044 2>>*/ if(g.process && g.process.exit)
        /*<<stdlib.js 1044 34>>*/ g.process.exit(code);
       /*<<stdlib.js 1045 2>>*/ caml_invalid_argument
       ("Function 'exit' not implemented") /*<<stdlib.js 1046 0>>*/ }
     /*<<io.js 243 0>>*/ function caml_ml_input(chan,s,i,l)
     { /*<<io.js 244 2>>*/  /*<<io.js 244 9>>*/ var
       l2=
         /*<<io.js 244 11>>*/ caml_ml_string_length(chan.file.data)
        -
        chan.offset;
       /*<<io.js 245 2>>*/ if(l2 == 0 && chan.refill != null)
       l2 =  /*<<io.js 245 43>>*/ caml_ml_refill_input(chan);
       /*<<io.js 246 2>>*/ if(l2 < l)l = l2;
       /*<<io.js 247 2>>*/ caml_blit_string(chan.file.data,chan.offset,s,i,l);
      chan.offset += l;
       /*<<io.js 249 2>>*/ return l /*<<io.js 250 0>>*/ }
     /*<<bigarray.js 620 0>>*/ function caml_ba_reshape(ba,vind)
     { /*<<bigarray.js 621 4>>*/ return  /*<<bigarray.js 621 11>>*/ ba.reshape
              ( /*<<bigarray.js 621 22>>*/ caml_js_from_array(vind)) /*<<bigarray.js 622 0>>*/ }
     /*<<ieee_754.js 65 0>>*/ function caml_int32_bits_of_float(x)
     { /*<<ieee_754.js 66 2>>*/  /*<<ieee_754.js 66 15>>*/ var
       float32a=
        new (joo_global_object.Float32Array)(1);
      float32a[0] = x;
       /*<<ieee_754.js 66 2>>*/  /*<<ieee_754.js 68 13>>*/ var
       int32a=
        new (joo_global_object.Int32Array)(float32a.buffer);
       /*<<ieee_754.js 69 2>>*/ return int32a[0] | 0 /*<<ieee_754.js 70 0>>*/ }
     /*<<stdlib.js 1080 0>>*/ function caml_set_oo_id(b)
     {b[2] = caml_oo_last_id++;
       /*<<stdlib.js 1082 2>>*/ return b /*<<stdlib.js 1083 0>>*/ }
     /*<<stdlib.js 1020 0>>*/ function caml_record_backtrace()
     { /*<<stdlib.js 1020 36>>*/ return 0 /*<<stdlib.js 1020 46>>*/ }
     /*<<stdlib.js 103 0>>*/ function caml_get_global_data()
     { /*<<stdlib.js 103 35>>*/ return caml_global_data /*<<stdlib.js 103 60>>*/ }
     /*<<unix.js 13 0>>*/ function unix_gmtime(t)
     { /*<<unix.js 14 2>>*/ var
        /*<<unix.js 14 8>>*/ d=new Date(t * 1e3),
        /*<<unix.js 15 19>>*/ januaryfirst=
        new
         Date
         ( /*<<unix.js 15 30>>*/ Date.UTC
           ( /*<<unix.js 15 39>>*/ d.getUTCFullYear(),0,1)),
        /*<<unix.js 16 10>>*/ doy=
         /*<<unix.js 16 12>>*/ Math.floor((d - januaryfirst) / 864e5);
       /*<<unix.js 17 2>>*/ return [0,
               /*<<unix.js 17 13>>*/ d.getUTCSeconds(),
               /*<<unix.js 17 32>>*/ d.getUTCMinutes(),
               /*<<unix.js 17 51>>*/ d.getUTCHours(),
               /*<<unix.js 18 10>>*/ d.getUTCDate(),
               /*<<unix.js 18 26>>*/ d.getUTCMonth(),
               /*<<unix.js 18 43>>*/ d.getUTCFullYear() - 1900,
               /*<<unix.js 19 10>>*/ d.getUTCDay(),
              doy,
              false | 0] /*<<unix.js 21 0>>*/ }
     /*<<bigarray.js 502 0>>*/ function caml_ba_uint8_get16(ba,i0)
     { /*<<bigarray.js 503 4>>*/ var
        /*<<bigarray.js 503 11>>*/ b1= /*<<bigarray.js 503 13>>*/ ba.get1(i0),
        /*<<bigarray.js 504 11>>*/ b2=
         /*<<bigarray.js 504 13>>*/ ba.get1(i0 + 1)
        <<
        8;
       /*<<bigarray.js 505 4>>*/ return b1 | b2 /*<<bigarray.js 506 0>>*/ }
     /*<<int64.js 136 0>>*/ function caml_int64_shift_right_unsigned(x,s)
     {s = s & 63;
       /*<<int64.js 138 2>>*/ if(s == 0) /*<<int64.js 138 14>>*/ return x;
       /*<<int64.js 139 2>>*/ if(s < 24)
        /*<<int64.js 140 4>>*/ return [255,
               (x[1] >> s | x[2] << 24 - s) & 16777215,
               (x[2] >> s | x[3] << 24 - s) & 16777215,
               x[3] >> s];
       /*<<int64.js 144 2>>*/ if(s < 48)
        /*<<int64.js 145 4>>*/ return [255,
               (x[2] >> s - 24 | x[3] << 48 - s) & 16777215,
               x[3] >> s - 24,
               0];
       /*<<int64.js 149 2>>*/ return [255,x[3] >> s - 48,0,0] /*<<int64.js 150 0>>*/ }
     /*<<stdlib.js 892 0>>*/ function caml_sys_const_backend_type()
     { /*<<stdlib.js 893 2>>*/ return [0,
               /*<<stdlib.js 893 13>>*/ caml_new_string("js_of_ocaml")] /*<<stdlib.js 894 0>>*/ }
     /*<<stdlib.js 886 0>>*/ function caml_sys_get_config()
     { /*<<stdlib.js 887 2>>*/ return [0,
               /*<<stdlib.js 887 13>>*/ caml_new_string("Unix"),
              32,
              0] /*<<stdlib.js 888 0>>*/ }
     /*<<stdlib.js 406 0>>*/ function caml_compare(a,b)
     { /*<<stdlib.js 406 31>>*/ return  /*<<stdlib.js 406 38>>*/ caml_compare_val
              (a,b,true) /*<<stdlib.js 406 69>>*/ }
     /*<<io.js 95 0>>*/  /*<<io.js 95 25>>*/ var
     caml_ml_out_channels=
      new Array();
     /*<<io.js 99 0>>*/ function caml_ml_out_channels_list()
     { /*<<io.js 100 2>>*/  /*<<io.js 100 8>>*/ var l=0;
       /*<<io.js 101 2>>*/ for
       ( /*<<io.js 101 12>>*/ var c=0;c < caml_ml_out_channels.length;c++)
        /*<<io.js 101 54>>*/ if
        (caml_ml_out_channels[c] && caml_ml_out_channels[c].opened)
        l = [0,caml_ml_out_channels[c],l];
       /*<<io.js 105 2>>*/ return l /*<<io.js 106 0>>*/ }
     /*<<mlString.js 271 0>>*/ function caml_string_set(s,i,c)
     { /*<<mlString.js 272 2>>*/ if(i >>> 0 >= s.l)
        /*<<mlString.js 272 22>>*/ caml_string_bound_error();
       /*<<mlString.js 273 2>>*/ return  /*<<mlString.js 273 9>>*/ caml_string_unsafe_set
              (s,i,c) /*<<mlString.js 274 0>>*/ }
     /*<<bigstring.js 15 0>>*/ function bigstring_blit_bigstring_string_stub
     (v_bstr,v_src_pos,v_str,v_dst_pos,v_len)
     { /*<<bigstring.js 16 2>>*/ for
       ( /*<<bigstring.js 16 13>>*/ var i=0;i < v_len;i++)
        /*<<bigstring.js 16 34>>*/ caml_string_set
        (v_str,
         v_dst_pos + i,
          /*<<bigstring.js 16 70>>*/ caml_ba_get_1(v_bstr,v_src_pos + i));
       /*<<bigstring.js 17 2>>*/ return 0 /*<<bigstring.js 18 0>>*/ }
     /*<<stdlib.js 1087 0>>*/ function caml_fresh_oo_id()
     { /*<<stdlib.js 1088 2>>*/ return caml_oo_last_id++ /*<<stdlib.js 1089 0>>*/ }
     /*<<int64.js 251 0>>*/ function caml_int64_to_float(x)
     { /*<<int64.js 252 2>>*/ return (x[3] << 16)
             *
              /*<<int64.js 252 25>>*/ Math.pow(2,32)
             +
             x[2]
             *
              /*<<int64.js 252 50>>*/ Math.pow(2,24)
             +
             x[1] /*<<int64.js 253 0>>*/ }
     /*<<bigstring.js 72 0>>*/ function bigstring_of_array_buffer(ab)
     { /*<<bigstring.js 73 2>>*/  /*<<bigstring.js 73 9>>*/ var
       ta=
        new (joo_global_object.Uint8Array)(ab);
       /*<<bigstring.js 74 2>>*/ return  /*<<bigstring.js 74 9>>*/ caml_ba_create_from
              (ta,null,0,12,0,[ta.length]) /*<<bigstring.js 75 0>>*/ }
     /*<<bigstring.js 9 0>>*/ function bigstring_destroy_stub(_v)
     { /*<<bigstring.js 10 2>>*/ return 0 /*<<bigstring.js 11 0>>*/ }
     /*<<bigarray.js 509 0>>*/ function caml_ba_uint8_get32(ba,i0)
     { /*<<bigarray.js 510 4>>*/ var
        /*<<bigarray.js 510 11>>*/ b1= /*<<bigarray.js 510 13>>*/ ba.get1(i0),
        /*<<bigarray.js 511 11>>*/ b2=
         /*<<bigarray.js 511 13>>*/ ba.get1(i0 + 1)
        <<
        8,
        /*<<bigarray.js 512 11>>*/ b3=
         /*<<bigarray.js 512 13>>*/ ba.get1(i0 + 2)
        <<
        16,
        /*<<bigarray.js 513 11>>*/ b4=
         /*<<bigarray.js 513 13>>*/ ba.get1(i0 + 3)
        <<
        24;
       /*<<bigarray.js 514 4>>*/ return b1 | b2 | b3 | b4 /*<<bigarray.js 515 0>>*/ }
     /*<<bigstring.js 66 0>>*/ function bigstring_to_array_buffer(bs)
     { /*<<bigstring.js 67 2>>*/ return bs.data.buffer /*<<bigstring.js 68 0>>*/ }
     /*<<stdlib.js 275 0>>*/ function caml_mod(x,y)
     { /*<<stdlib.js 276 2>>*/ if(y == 0)
        /*<<stdlib.js 276 14>>*/ caml_raise_zero_divide();
       /*<<stdlib.js 277 2>>*/ return x % y /*<<stdlib.js 278 0>>*/ }
     /*<<stdlib.js 227 0>>*/ function caml_obj_block(tag,size)
     { /*<<stdlib.js 228 2>>*/  /*<<stdlib.js 228 8>>*/ var
       o=
        new Array(size + 1);
      o[0] = tag;
       /*<<stdlib.js 230 2>>*/ for
       ( /*<<stdlib.js 230 13>>*/ var i=1;i <= size;i++)
       o[i] = 0;
       /*<<stdlib.js 231 2>>*/ return o /*<<stdlib.js 232 0>>*/ }
     /*<<bigarray.js 32 0>>*/ function caml_ba_init()
     { /*<<bigarray.js 33 4>>*/ return 0 /*<<bigarray.js 34 0>>*/ }
     /*<<stdlib.js 1012 0>>*/ function caml_final_release()
     { /*<<stdlib.js 1012 33>>*/ return 0 /*<<stdlib.js 1012 43>>*/ }
     /*<<bigarray.js 497 0>>*/ function caml_ba_get_generic(ba,index)
     { /*<<bigarray.js 498 4>>*/ return  /*<<bigarray.js 498 11>>*/ ba.get
              ( /*<<bigarray.js 498 18>>*/ caml_js_from_array(index)) /*<<bigarray.js 499 0>>*/ }
     /*<<marshal.js 85 0>>*/ function BigStringReader(bs,i)
     {this.s = bs;this.i = i /*<<marshal.js 85 60>>*/ }
    BigStringReader.prototype
    =
    {read8u:
     function()
      { /*<<marshal.js 87 23>>*/ return  /*<<marshal.js 87 30>>*/ caml_ba_get_1
               (this.s,this.i++) /*<<marshal.js 87 9>>*/ },
     read8s:
     function()
      { /*<<marshal.js 88 23>>*/ return  /*<<marshal.js 88 30>>*/ caml_ba_get_1
               (this.s,this.i++)
              <<
              24
              >>
              24 /*<<marshal.js 88 9>>*/ },
     read16u:
     function()
      { /*<<marshal.js 90 4>>*/ var
         /*<<marshal.js 90 10>>*/ s=this.s,
         /*<<marshal.js 90 22>>*/ i=this.i;
       this.i = i + 2;
        /*<<marshal.js 92 4>>*/ return  /*<<marshal.js 92 12>>*/ caml_ba_get_1
               (s,i)
              <<
              8
              |
               /*<<marshal.js 92 39>>*/ caml_ba_get_1(s,i + 1) /*<<marshal.js 89 10>>*/ },
     read16s:
     function()
      { /*<<marshal.js 95 4>>*/ var
         /*<<marshal.js 95 10>>*/ s=this.s,
         /*<<marshal.js 95 22>>*/ i=this.i;
       this.i = i + 2;
        /*<<marshal.js 97 4>>*/ return  /*<<marshal.js 97 12>>*/ caml_ba_get_1
               (s,i)
              <<
              24
              >>
              16
              |
               /*<<marshal.js 97 46>>*/ caml_ba_get_1(s,i + 1) /*<<marshal.js 94 10>>*/ },
     read32u:
     function()
      { /*<<marshal.js 100 4>>*/ var
         /*<<marshal.js 100 10>>*/ s=this.s,
         /*<<marshal.js 100 22>>*/ i=this.i;
       this.i = i + 4;
        /*<<marshal.js 102 4>>*/ return ( /*<<marshal.js 102 12>>*/ caml_ba_get_1
                ((s,i) << 24)
               |
                /*<<marshal.js 102 42>>*/ caml_ba_get_1(s,i + 1)
               <<
               16
               |
                /*<<marshal.js 103 13>>*/ caml_ba_get_1(s,i + 2)
               <<
               8
               |
                /*<<marshal.js 103 42>>*/ caml_ba_get_1(s,i + 3))
              >>>
              0 /*<<marshal.js 99 10>>*/ },
     read32s:
     function()
      { /*<<marshal.js 106 4>>*/ var
         /*<<marshal.js 106 10>>*/ s=this.s,
         /*<<marshal.js 106 22>>*/ i=this.i;
       this.i = i + 4;
        /*<<marshal.js 108 4>>*/ return  /*<<marshal.js 108 12>>*/ caml_ba_get_1
               (s,i)
              <<
              24
              |
               /*<<marshal.js 108 41>>*/ caml_ba_get_1(s,i + 1)
              <<
              16
              |
               /*<<marshal.js 109 7>>*/ caml_ba_get_1(s,i + 2)
              <<
              8
              |
               /*<<marshal.js 109 36>>*/ caml_ba_get_1(s,i + 3) /*<<marshal.js 105 10>>*/ },
     readstr:
     function(len)
      { /*<<marshal.js 112 4>>*/ var
         /*<<marshal.js 112 10>>*/ i=this.i,
         /*<<marshal.js 113 12>>*/ arr=new Array(len);
        /*<<marshal.js 114 4>>*/ for
        ( /*<<marshal.js 114 14>>*/ var j=0;j < len;j++)
         /*<<marshal.js 114 32>>*/ arr[j]
        =
         /*<<marshal.js 115 15>>*/ caml_ba_get_1(this.s,i + j);
       this.i = i + len;
        /*<<marshal.js 118 4>>*/ return  /*<<marshal.js 118 11>>*/ caml_string_of_array
               (arr) /*<<marshal.js 111 10>>*/ }};
     /*<<stdlib.js 1016 0>>*/ function caml_get_exception_backtrace()
     { /*<<stdlib.js 1016 43>>*/ return 0 /*<<stdlib.js 1016 53>>*/ }
     /*<<stdlib.js 38 0>>*/ function raw_array_cons(a,x)
     { /*<<stdlib.js 39 2>>*/ var
        /*<<stdlib.js 39 8>>*/ l=a.length,
        /*<<stdlib.js 40 8>>*/ b=new Array(l + 1);
      b[0] = x;
       /*<<stdlib.js 42 2>>*/ for( /*<<stdlib.js 42 12>>*/ var i=1;i <= l;i++)
       b[i] = a[i - 1];
       /*<<stdlib.js 43 2>>*/ return b /*<<stdlib.js 44 0>>*/ }
     /*<<jslib_js_of_ocaml.js 38 0>>*/ function caml_js_to_array(a)
     { /*<<jslib_js_of_ocaml.js 38 31>>*/ return  /*<<jslib_js_of_ocaml.js 38 38>>*/ raw_array_cons
              (a,0) /*<<jslib_js_of_ocaml.js 38 59>>*/ }
     /*<<io.js 24 0>>*/ function caml_sys_close(fd)
     {delete caml_global_data.fds[fd];
       /*<<io.js 26 2>>*/ return 0 /*<<io.js 27 0>>*/ }
     /*<<stdlib.js 614 0>>*/ function caml_format_float(fmt,x)
     { /*<<stdlib.js 615 2>>*/ var
       s,
        /*<<stdlib.js 615 11>>*/ f=
         /*<<stdlib.js 615 13>>*/ caml_parse_format(fmt),
        /*<<stdlib.js 616 11>>*/ prec=f.prec < 0?6:f.prec;
       /*<<stdlib.js 617 2>>*/ if(x < 0 || x == 0 && 1 / x == -Infinity)
        /*<<stdlib.js 617 45>>*/ {f.sign = -1;x = -x}
       /*<<stdlib.js 618 2>>*/ if( /*<<stdlib.js 618 6>>*/ isNaN(x))
        /*<<stdlib.js 618 16>>*/ {s = "nan";f.filler = " "}
      else
        /*<<stdlib.js 619 7>>*/ if(! /*<<stdlib.js 619 12>>*/ isFinite(x))
         /*<<stdlib.js 619 25>>*/ {s = "inf";f.filler = " "}
       else
         /*<<stdlib.js 621 4>>*/ switch(f.conv)
         {case "e":
            /*<<stdlib.js 623 6>>*/ var
             /*<<stdlib.js 623 12>>*/ s=
              /*<<stdlib.js 623 14>>*/ x.toExponential(prec),
             /*<<stdlib.js 625 12>>*/ i=s.length;
            /*<<stdlib.js 626 6>>*/ if
            ( /*<<stdlib.js 626 10>>*/ s.charAt(i - 3) == "e")
            s
            =
             /*<<stdlib.js 627 12>>*/ s.slice(0,i - 1)
            +
            "0"
            +
             /*<<stdlib.js 627 39>>*/ s.slice(i - 1);
            /*<<stdlib.js 628 6>>*/ break;
          case "f":
           s =  /*<<stdlib.js 630 10>>*/ x.toFixed(prec);
            /*<<stdlib.js 630 27>>*/ break;
          case "g":
           prec = prec?prec:1;
           s =  /*<<stdlib.js 633 10>>*/ x.toExponential(prec - 1);
            /*<<stdlib.js 634 6>>*/ var
             /*<<stdlib.js 634 12>>*/ j=
              /*<<stdlib.js 634 14>>*/ s.indexOf("e"),
             /*<<stdlib.js 635 14>>*/ exp=
             + /*<<stdlib.js 635 17>>*/ s.slice(j + 1);
            /*<<stdlib.js 636 6>>*/ if
            (exp
             <
             -4
             ||
             x
             >=
             1e+21
             ||
              /*<<stdlib.js 636 35>>*/ x.toFixed(0).length
             >
             prec)
             /*<<stdlib.js 636 63>>*/ { /*<<stdlib.js 638 8>>*/  /*<<stdlib.js 638 14>>*/ var
              i=
               j - 1;
              /*<<stdlib.js 638 23>>*/ while
              ( /*<<stdlib.js 638 30>>*/ s.charAt(i) == "0")
              i--;
              /*<<stdlib.js 639 8>>*/ if
              ( /*<<stdlib.js 639 12>>*/ s.charAt(i) == ".")
              i--;
             s
             =
              /*<<stdlib.js 640 12>>*/ s.slice(0,i + 1)
             +
              /*<<stdlib.js 640 32>>*/ s.slice(j);
             i = s.length;
              /*<<stdlib.js 642 8>>*/ if
              ( /*<<stdlib.js 642 12>>*/ s.charAt(i - 3) == "e")
              s
              =
               /*<<stdlib.js 643 14>>*/ s.slice(0,i - 1)
              +
              "0"
              +
               /*<<stdlib.js 643 41>>*/ s.slice(i - 1);
              /*<<stdlib.js 644 8>>*/ break}
           else
             /*<<stdlib.js 645 13>>*/ { /*<<stdlib.js 646 8>>*/  /*<<stdlib.js 646 14>>*/ var
              p=
               prec;
              /*<<stdlib.js 647 8>>*/ if(exp < 0)
               /*<<stdlib.js 647 21>>*/ {p -= exp + 1;
               s =  /*<<stdlib.js 647 41>>*/ x.toFixed(p)}
             else
               /*<<stdlib.js 648 13>>*/ while
               (s
                =
                 /*<<stdlib.js 648 24>>*/ x.toFixed(p),
                s.length
                >
                prec
                +
                1)
               p--;
              /*<<stdlib.js 649 8>>*/ if(p)
               /*<<stdlib.js 649 15>>*/ { /*<<stdlib.js 651 10>>*/  /*<<stdlib.js 651 16>>*/ var
                i=
                 s.length - 1;
                /*<<stdlib.js 651 32>>*/ while
                ( /*<<stdlib.js 651 39>>*/ s.charAt(i) == "0")
                i--;
                /*<<stdlib.js 652 10>>*/ if
                ( /*<<stdlib.js 652 14>>*/ s.charAt(i) == ".")
                i--;
               s =  /*<<stdlib.js 653 14>>*/ s.slice(0,i + 1)}}
            /*<<stdlib.js 656 6>>*/ break
          }
       /*<<stdlib.js 658 2>>*/ return  /*<<stdlib.js 658 9>>*/ caml_finish_formatting
              (f,s) /*<<stdlib.js 659 0>>*/ }
     /*<<stdlib.js 1114 0>>*/ function caml_int64_bswap(x)
     { /*<<stdlib.js 1115 2>>*/ return [255,
              (x[3] & 65280) >> 8 | (x[3] & 255) << 8 | x[2] & 16711680,
              (x[2] & 65280) >> 8 | (x[2] & 255) << 8 | x[1] & 16711680,
              (x[1] & 65280) >> 8 | (x[1] & 255) << 8] /*<<stdlib.js 1125 0>>*/ }
     /*<<stdlib.js 268 0>>*/ function caml_div(x,y)
     { /*<<stdlib.js 269 2>>*/ if(y == 0)
        /*<<stdlib.js 269 14>>*/ caml_raise_zero_divide();
       /*<<stdlib.js 270 2>>*/ return x / y | 0 /*<<stdlib.js 271 0>>*/ }
     /*<<mlString.js 457 0>>*/ function caml_fill_string(s,i,l,c)
     { /*<<mlString.js 458 2>>*/ if(l > 0)
        /*<<mlString.js 458 13>>*/ if
        (i == 0 && (l >= s.l || s.t == 2 && l >= s.c.length))
         /*<<mlString.js 459 77>>*/ if(c == 0)
          /*<<mlString.js 460 18>>*/ {s.c = "";s.t = 2}
        else
          /*<<mlString.js 463 13>>*/ {s.c
          =
           /*<<mlString.js 464 14>>*/ caml_str_repeat
           (l, /*<<mlString.js 464 34>>*/ String.fromCharCode(c));
          s.t = l == s.l?0:2}
       else
         /*<<mlString.js 467 11>>*/ { /*<<mlString.js 468 6>>*/ if(s.t != 4)
           /*<<mlString.js 468 32>>*/ caml_convert_string_to_array(s);
          /*<<mlString.js 469 6>>*/ for(l += i;i < l;i++)s.c[i] = c}
       /*<<mlString.js 472 2>>*/ return 0 /*<<mlString.js 473 0>>*/ }
     /*<<mlString.js 418 0>>*/ function caml_string_lessthan(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 419 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 420 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 421 2>>*/ return s1.c < s2.c?1:0 /*<<mlString.js 422 0>>*/ }
     /*<<mlString.js 445 0>>*/ function caml_string_greaterthan(s1,s2)
     { /*<<mlString.js 446 2>>*/ return  /*<<mlString.js 446 9>>*/ caml_string_lessthan
              (s2,s1) /*<<mlString.js 447 0>>*/ }
     /*<<gc.js 6 0>>*/ function caml_gc_major()
     { /*<<gc.js 6 26>>*/ return 0 /*<<gc.js 6 34>>*/ }
     /*<<fs.js 198 0>>*/ function caml_fs_register_extern(name,content)
     { /*<<fs.js 199 2>>*/ if(joo_global_object.caml_fs_register)
        /*<<fs.js 200 4>>*/ joo_global_object.caml_fs_register(name,content);
      else
        /*<<fs.js 201 7>>*/ { /*<<fs.js 202 4>>*/ if
         (!joo_global_object.caml_fs_tmp)
         joo_global_object.caml_fs_tmp = [];
         /*<<fs.js 203 4>>*/ joo_global_object.caml_fs_tmp.push
         ({name:name,content:content})}
       /*<<fs.js 205 2>>*/ return 0 /*<<fs.js 206 0>>*/ }
     /*<<lexing.js 20 0>>*/ function caml_lex_array(s)
     {s =  /*<<lexing.js 21 6>>*/ caml_bytes_of_string(s);
       /*<<lexing.js 22 2>>*/ var
        /*<<lexing.js 22 8>>*/ l=s.length / 2,
        /*<<lexing.js 23 8>>*/ a=new Array(l);
       /*<<lexing.js 24 2>>*/ for( /*<<lexing.js 24 13>>*/ var i=0;i < l;i++)
       a[i]
       =
       ( /*<<lexing.js 25 12>>*/ s.charCodeAt(2 * i)
        |
         /*<<lexing.js 25 35>>*/ s.charCodeAt(2 * i + 1)
        <<
        8)
       <<
       16
       >>
       16;
       /*<<lexing.js 26 2>>*/ return a /*<<lexing.js 27 0>>*/ }
     /*<<lexing.js 31 0>>*/ function caml_lex_engine(tbl,start_state,lexbuf)
     { /*<<lexing.js 32 2>>*/ var
        /*<<lexing.js 32 17>>*/ lex_buffer=2,
        /*<<lexing.js 33 21>>*/ lex_buffer_len=3,
        /*<<lexing.js 34 20>>*/ lex_start_pos=5,
        /*<<lexing.js 35 19>>*/ lex_curr_pos=6,
        /*<<lexing.js 36 19>>*/ lex_last_pos=7,
        /*<<lexing.js 37 22>>*/ lex_last_action=8,
        /*<<lexing.js 38 22>>*/ lex_eof_reached=9,
        /*<<lexing.js 39 15>>*/ lex_base=1,
        /*<<lexing.js 40 18>>*/ lex_backtrk=2,
        /*<<lexing.js 41 18>>*/ lex_default=3,
        /*<<lexing.js 42 16>>*/ lex_trans=4,
        /*<<lexing.js 43 16>>*/ lex_check=5;
       /*<<lexing.js 45 2>>*/ if(!tbl.lex_default)
        /*<<lexing.js 45 24>>*/ {tbl.lex_base
        =
         /*<<lexing.js 46 22>>*/ caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk
        =
         /*<<lexing.js 47 22>>*/ caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check
        =
         /*<<lexing.js 48 22>>*/ caml_lex_array(tbl[lex_check]);
        tbl.lex_trans
        =
         /*<<lexing.js 49 22>>*/ caml_lex_array(tbl[lex_trans]);
        tbl.lex_default
        =
         /*<<lexing.js 50 22>>*/ caml_lex_array(tbl[lex_default])}
       /*<<lexing.js 32 2>>*/ var
       c,
        /*<<lexing.js 53 15>>*/ state=start_state,
        /*<<lexing.js 55 13>>*/ buffer=
         /*<<lexing.js 55 15>>*/ caml_array_of_string(lexbuf[lex_buffer]);
       /*<<lexing.js 57 2>>*/ if(state >= 0)
        /*<<lexing.js 57 18>>*/ {lexbuf[lex_last_pos]
        =
        lexbuf[lex_start_pos]
        =
        lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = -1}
      else
        /*<<lexing.js 61 9>>*/ state = -state - 1;
       /*<<lexing.js 65 2>>*/ for(;;)
        /*<<lexing.js 65 10>>*/ { /*<<lexing.js 67 4>>*/  /*<<lexing.js 67 13>>*/ var
         base=
          tbl.lex_base[state];
         /*<<lexing.js 68 4>>*/ if(base < 0)
          /*<<lexing.js 68 18>>*/ return -base - 1;
         /*<<lexing.js 67 4>>*/  /*<<lexing.js 70 16>>*/ var
         backtrk=
          tbl.lex_backtrk[state];
         /*<<lexing.js 71 4>>*/ if(backtrk >= 0)
          /*<<lexing.js 71 22>>*/ {lexbuf[lex_last_pos]
          =
          lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
         /*<<lexing.js 76 4>>*/ if
         (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
          /*<<lexing.js 76 55>>*/ if(lexbuf[lex_eof_reached] == 0)
           /*<<lexing.js 78 8>>*/ return -state - 1;
         else
          c = 256;
        else
          /*<<lexing.js 81 9>>*/ {c = buffer[lexbuf[lex_curr_pos]];
          lexbuf[lex_curr_pos]++}
         /*<<lexing.js 87 4>>*/ state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
         /*<<lexing.js 92 4>>*/ if(state < 0)
          /*<<lexing.js 92 19>>*/ {lexbuf[lex_curr_pos]
          =
          lexbuf[lex_last_pos];
           /*<<lexing.js 94 6>>*/ if(lexbuf[lex_last_action] == -1)
            /*<<lexing.js 95 8>>*/ caml_failwith("lexing: empty token");
          else
            /*<<lexing.js 97 8>>*/ return lexbuf[lex_last_action]}
        else
          /*<<lexing.js 98 9>>*/ if(c == 256)lexbuf[lex_eof_reached] = 0} /*<<lexing.js 105 0>>*/ }
     /*<<stdlib.js 1051 0>>*/ function caml_sys_get_argv()
     { /*<<stdlib.js 1052 2>>*/ var
        /*<<stdlib.js 1052 8>>*/ g=joo_global_object,
        /*<<stdlib.js 1053 11>>*/ main="a.out",
        /*<<stdlib.js 1054 11>>*/ args=[];
       /*<<stdlib.js 1056 2>>*/ if
       (g.process && g.process.argv && g.process.argv.length > 1)
        /*<<stdlib.js 1058 35>>*/ { /*<<stdlib.js 1059 4>>*/  /*<<stdlib.js 1059 13>>*/ var
         argv=
          g.process.argv;
        main = argv[1];
        args
        =
         /*<<stdlib.js 1062 11>>*/ raw_array_sub(argv,2,argv.length - 2)}
       /*<<stdlib.js 1052 2>>*/ var
        /*<<stdlib.js 1065 8>>*/ p=
         /*<<stdlib.js 1065 10>>*/ caml_js_to_string(main),
        /*<<stdlib.js 1066 12>>*/ args2=[0,p];
       /*<<stdlib.js 1067 2>>*/ for
       ( /*<<stdlib.js 1067 12>>*/ var i=0;i < args.length;i++)
        /*<<stdlib.js 1068 4>>*/ args2.push
        ( /*<<stdlib.js 1068 15>>*/ caml_js_to_string(args[i]));
       /*<<stdlib.js 1069 2>>*/ return [0,p,args2] /*<<stdlib.js 1070 0>>*/ }
     /*<<jslib_js_of_ocaml.js 25 0>>*/ function caml_js_to_bool(x)
     { /*<<jslib_js_of_ocaml.js 25 30>>*/ return +x /*<<jslib_js_of_ocaml.js 25 41>>*/ }
     /*<<stdlib.js 1097 0>>*/ function caml_convert_raw_backtrace_slot()
     { /*<<stdlib.js 1098 2>>*/ caml_failwith
       ("caml_convert_raw_backtrace_slot") /*<<stdlib.js 1099 0>>*/ }
     /*<<stdlib.js 941 0>>*/ function caml_array_sub(a,i,len)
     { /*<<stdlib.js 942 2>>*/  /*<<stdlib.js 942 9>>*/ var
       a2=
        new Array(len + 1);
      a2[0] = 0;
       /*<<stdlib.js 944 2>>*/ for
       (var  /*<<stdlib.js 944 13>>*/ i2=1, /*<<stdlib.js 944 20>>*/ i1=i + 1;
        i2
        <=
        len;
        i2++,
        i1++)
        /*<<stdlib.js 944 49>>*/ a2[i2] = a[i1];
       /*<<stdlib.js 947 2>>*/ return a2 /*<<stdlib.js 948 0>>*/ }
     /*<<stdlib.js 428 0>>*/ function caml_lessthan(x,y)
     { /*<<stdlib.js 428 32>>*/ return +( /*<<stdlib.js 428 41>>*/ caml_compare_val
               (x,y,false)
              <
              0) /*<<stdlib.js 428 75>>*/ }
     /*<<mlString.js 386 0>>*/ function caml_bytes_equal(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 387 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 388 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 389 2>>*/ return s1.c == s2.c?1:0 /*<<mlString.js 390 0>>*/ }
     /*<<mlString.js 516 0>>*/ function caml_ml_bytes_length(s)
     { /*<<mlString.js 516 35>>*/ return s.l /*<<mlString.js 516 46>>*/ }
     /*<<stdlib.js 928 0>>*/ function caml_sys_const_ostype_cygwin()
     { /*<<stdlib.js 928 43>>*/ return 0 /*<<stdlib.js 928 53>>*/ }
     /*<<stdlib.js 96 0>>*/ function caml_register_global(n,v,name_opt)
     {caml_global_data[n + 1] = v;
       /*<<stdlib.js 98 2>>*/ if(name_opt)caml_global_data[name_opt] = v /*<<stdlib.js 99 0>>*/ }
     /*<<ieee_754.js 244 0>>*/ function caml_cosh_float(x)
     { /*<<ieee_754.js 244 31>>*/ return ( /*<<ieee_754.js 244 39>>*/ Math.exp
               (x)
              +
               /*<<ieee_754.js 244 53>>*/ Math.exp(-x))
             /
             2 /*<<ieee_754.js 244 72>>*/ }
     /*<<stdlib.js 732 0>>*/ function caml_hash_mix_final(h)
     {h ^= h >>> 16;
      h =  /*<<stdlib.js 734 6>>*/ caml_mul(h,2246822507 | 0);
      h ^= h >>> 13;
      h =  /*<<stdlib.js 736 6>>*/ caml_mul(h,3266489909 | 0);
      h ^= h >>> 16;
       /*<<stdlib.js 738 2>>*/ return h /*<<stdlib.js 739 0>>*/ }
     /*<<bigarray.js 568 0>>*/ function caml_ba_uint8_set64(ba,i0,v)
     { /*<<bigarray.js 569 4>>*/ ba.set1(i0,v[1] & 255);
       /*<<bigarray.js 570 4>>*/ ba.set1(i0 + 1,v[1] >> 8 & 255);
       /*<<bigarray.js 571 4>>*/ ba.set1(i0 + 2,v[1] >> 16);
       /*<<bigarray.js 572 4>>*/ ba.set1(i0 + 3,v[2] & 255);
       /*<<bigarray.js 573 4>>*/ ba.set1(i0 + 4,v[2] >> 8 & 255);
       /*<<bigarray.js 574 4>>*/ ba.set1(i0 + 5,v[2] >> 16);
       /*<<bigarray.js 575 4>>*/ ba.set1(i0 + 6,v[3] & 255);
       /*<<bigarray.js 576 4>>*/ ba.set1(i0 + 7,v[3] >> 8);
       /*<<bigarray.js 577 4>>*/ return 0 /*<<bigarray.js 578 0>>*/ }
     /*<<lexing.js 114 0>>*/ function caml_lex_run_mem(s,i,mem,curr_pos)
     { /*<<lexing.js 115 2>>*/ for(;;)
        /*<<lexing.js 115 11>>*/ { /*<<lexing.js 116 4>>*/  /*<<lexing.js 116 12>>*/ var
         dst=
           /*<<lexing.js 116 14>>*/ s.charCodeAt(i);
        i++;
         /*<<lexing.js 117 4>>*/ if(dst == 255)
          /*<<lexing.js 117 21>>*/ return;
         /*<<lexing.js 116 4>>*/  /*<<lexing.js 118 12>>*/ var
         src=
           /*<<lexing.js 118 14>>*/ s.charCodeAt(i);
        i++;
         /*<<lexing.js 119 4>>*/ mem[dst + 1]
        =
        src == 255?curr_pos:mem[src + 1]} /*<<lexing.js 124 0>>*/ }
     /*<<lexing.js 126 0>>*/ function caml_lex_run_tag(s,i,mem)
     { /*<<lexing.js 127 2>>*/ for(;;)
        /*<<lexing.js 127 11>>*/ { /*<<lexing.js 128 4>>*/  /*<<lexing.js 128 12>>*/ var
         dst=
           /*<<lexing.js 128 14>>*/ s.charCodeAt(i);
        i++;
         /*<<lexing.js 129 4>>*/ if(dst == 255)
          /*<<lexing.js 129 21>>*/ return;
         /*<<lexing.js 128 4>>*/  /*<<lexing.js 130 12>>*/ var
         src=
           /*<<lexing.js 130 14>>*/ s.charCodeAt(i);
        i++;
         /*<<lexing.js 131 4>>*/ mem[dst + 1] = src == 255?-1:mem[src + 1]} /*<<lexing.js 136 0>>*/ }
     /*<<lexing.js 138 0>>*/ function caml_new_lex_engine
     (tbl,start_state,lexbuf)
     { /*<<lexing.js 139 2>>*/ var
        /*<<lexing.js 139 17>>*/ lex_buffer=2,
        /*<<lexing.js 140 21>>*/ lex_buffer_len=3,
        /*<<lexing.js 141 20>>*/ lex_start_pos=5,
        /*<<lexing.js 142 19>>*/ lex_curr_pos=6,
        /*<<lexing.js 143 19>>*/ lex_last_pos=7,
        /*<<lexing.js 144 22>>*/ lex_last_action=8,
        /*<<lexing.js 145 22>>*/ lex_eof_reached=9,
        /*<<lexing.js 146 14>>*/ lex_mem=10,
        /*<<lexing.js 147 15>>*/ lex_base=1,
        /*<<lexing.js 148 18>>*/ lex_backtrk=2,
        /*<<lexing.js 149 18>>*/ lex_default=3,
        /*<<lexing.js 150 16>>*/ lex_trans=4,
        /*<<lexing.js 151 16>>*/ lex_check=5,
        /*<<lexing.js 152 20>>*/ lex_base_code=6,
        /*<<lexing.js 153 23>>*/ lex_backtrk_code=7,
        /*<<lexing.js 154 23>>*/ lex_default_code=8,
        /*<<lexing.js 155 21>>*/ lex_trans_code=9,
        /*<<lexing.js 156 21>>*/ lex_check_code=10,
        /*<<lexing.js 157 15>>*/ lex_code=11;
       /*<<lexing.js 159 2>>*/ if(!tbl.lex_default)
        /*<<lexing.js 159 24>>*/ {tbl.lex_base
        =
         /*<<lexing.js 160 22>>*/ caml_lex_array(tbl[lex_base]);
        tbl.lex_backtrk
        =
         /*<<lexing.js 161 22>>*/ caml_lex_array(tbl[lex_backtrk]);
        tbl.lex_check
        =
         /*<<lexing.js 162 22>>*/ caml_lex_array(tbl[lex_check]);
        tbl.lex_trans
        =
         /*<<lexing.js 163 22>>*/ caml_lex_array(tbl[lex_trans]);
        tbl.lex_default
        =
         /*<<lexing.js 164 22>>*/ caml_lex_array(tbl[lex_default])}
       /*<<lexing.js 166 2>>*/ if(!tbl.lex_default_code)
        /*<<lexing.js 166 29>>*/ {tbl.lex_base_code
        =
         /*<<lexing.js 167 27>>*/ caml_lex_array(tbl[lex_base_code]);
        tbl.lex_backtrk_code
        =
         /*<<lexing.js 168 27>>*/ caml_lex_array(tbl[lex_backtrk_code]);
        tbl.lex_check_code
        =
         /*<<lexing.js 169 27>>*/ caml_lex_array(tbl[lex_check_code]);
        tbl.lex_trans_code
        =
         /*<<lexing.js 170 27>>*/ caml_lex_array(tbl[lex_trans_code]);
        tbl.lex_default_code
        =
         /*<<lexing.js 171 27>>*/ caml_lex_array(tbl[lex_default_code])}
       /*<<lexing.js 173 2>>*/ if(tbl.lex_code == null)
       tbl.lex_code
       =
        /*<<lexing.js 173 43>>*/ caml_bytes_of_string(tbl[lex_code]);
       /*<<lexing.js 139 2>>*/ var
       c,
        /*<<lexing.js 175 15>>*/ state=start_state,
        /*<<lexing.js 177 13>>*/ buffer=
         /*<<lexing.js 177 15>>*/ caml_array_of_string(lexbuf[lex_buffer]);
       /*<<lexing.js 179 2>>*/ if(state >= 0)
        /*<<lexing.js 179 18>>*/ {lexbuf[lex_last_pos]
        =
        lexbuf[lex_start_pos]
        =
        lexbuf[lex_curr_pos];
        lexbuf[lex_last_action] = -1}
      else
        /*<<lexing.js 183 9>>*/ state = -state - 1;
       /*<<lexing.js 187 2>>*/ for(;;)
        /*<<lexing.js 187 10>>*/ { /*<<lexing.js 189 4>>*/  /*<<lexing.js 189 13>>*/ var
         base=
          tbl.lex_base[state];
         /*<<lexing.js 190 4>>*/ if(base < 0)
          /*<<lexing.js 190 18>>*/ { /*<<lexing.js 191 6>>*/  /*<<lexing.js 191 17>>*/ var
           pc_off=
            tbl.lex_base_code[state];
           /*<<lexing.js 192 6>>*/ caml_lex_run_tag
           (tbl.lex_code,pc_off,lexbuf[lex_mem]);
           /*<<lexing.js 193 6>>*/ return -base - 1}
         /*<<lexing.js 189 4>>*/  /*<<lexing.js 196 16>>*/ var
         backtrk=
          tbl.lex_backtrk[state];
         /*<<lexing.js 197 4>>*/ if(backtrk >= 0)
          /*<<lexing.js 197 22>>*/ { /*<<lexing.js 198 6>>*/  /*<<lexing.js 198 17>>*/ var
           pc_off=
            tbl.lex_backtrk_code[state];
           /*<<lexing.js 199 6>>*/ caml_lex_run_tag
           (tbl.lex_code,pc_off,lexbuf[lex_mem]);
          lexbuf[lex_last_pos] = lexbuf[lex_curr_pos];
          lexbuf[lex_last_action] = backtrk}
         /*<<lexing.js 204 4>>*/ if
         (lexbuf[lex_curr_pos] >= lexbuf[lex_buffer_len])
          /*<<lexing.js 204 55>>*/ if(lexbuf[lex_eof_reached] == 0)
           /*<<lexing.js 206 8>>*/ return -state - 1;
         else
          c = 256;
        else
          /*<<lexing.js 209 9>>*/ {c = buffer[lexbuf[lex_curr_pos]];
          lexbuf[lex_curr_pos]++}
         /*<<lexing.js 189 4>>*/  /*<<lexing.js 215 15>>*/ var pstate=state;
         /*<<lexing.js 216 4>>*/ state
        =
        tbl.lex_check[base + c] == state
         ?tbl.lex_trans[base + c]
         :tbl.lex_default[state];
         /*<<lexing.js 221 4>>*/ if(state < 0)
          /*<<lexing.js 221 19>>*/ {lexbuf[lex_curr_pos]
          =
          lexbuf[lex_last_pos];
           /*<<lexing.js 223 6>>*/ if(lexbuf[lex_last_action] == -1)
            /*<<lexing.js 224 8>>*/ caml_failwith("lexing: empty token");
          else
            /*<<lexing.js 226 8>>*/ return lexbuf[lex_last_action]}
        else
          /*<<lexing.js 227 9>>*/ { /*<<lexing.js 229 6>>*/ var
            /*<<lexing.js 229 20>>*/ base_code=tbl.lex_base_code[pstate],
           pc_off;
           /*<<lexing.js 230 6>>*/ pc_off
          =
          tbl.lex_check_code[base_code + c] == pstate
           ?tbl.lex_trans_code[base_code + c]
           :tbl.lex_default_code[pstate];
           /*<<lexing.js 234 6>>*/ if(pc_off > 0)
            /*<<lexing.js 235 8>>*/ caml_lex_run_mem
            (tbl.lex_code,pc_off,lexbuf[lex_mem],lexbuf[lex_curr_pos]);
           /*<<lexing.js 240 6>>*/ if(c == 256)lexbuf[lex_eof_reached] = 0}} /*<<lexing.js 243 0>>*/ }
     /*<<jslib_js_of_ocaml.js 27 0>>*/ function caml_js_from_float(x)
     { /*<<jslib_js_of_ocaml.js 27 33>>*/ return x /*<<jslib_js_of_ocaml.js 27 43>>*/ }
     /*<<gc.js 18 0>>*/ function caml_gc_stat()
     { /*<<gc.js 19 2>>*/ return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /*<<gc.js 20 0>>*/ }
     /*<<stdlib.js 425 0>>*/ function caml_lessequal(x,y)
     { /*<<stdlib.js 425 33>>*/ return +( /*<<stdlib.js 425 42>>*/ caml_compare_val
               (x,y,false)
              <=
              0) /*<<stdlib.js 425 77>>*/ }
     /*<<io.js 415 0>>*/ function caml_ml_seek_out_64(chan,pos)
     {chan.offset =  /*<<io.js 416 16>>*/ caml_int64_to_float(pos);
       /*<<io.js 417 2>>*/ return 0 /*<<io.js 418 0>>*/ }
     /*<<gc.js 23 0>>*/ function caml_gc_set(_control)
     { /*<<gc.js 24 2>>*/ return 0 /*<<gc.js 25 0>>*/ }
     /*<<jslib.js 28 0>>*/ function caml_js_get(o,f)
     { /*<<jslib.js 28 28>>*/ return o[f] /*<<jslib.js 28 41>>*/ }
     /*<<stdlib.js 985 0>>*/  /*<<stdlib.js 985 22>>*/ var
     caml_method_cache=
      [];
     /*<<stdlib.js 986 0>>*/ function caml_get_public_method(obj,tag,cacheid)
     { /*<<stdlib.js 987 2>>*/ var
        /*<<stdlib.js 987 12>>*/ meths=obj[1],
        /*<<stdlib.js 988 10>>*/ ofs=caml_method_cache[cacheid];
       /*<<stdlib.js 989 2>>*/ if(ofs === null)
        /*<<stdlib.js 989 20>>*/ for
        ( /*<<stdlib.js 991 15>>*/ var i=caml_method_cache.length;
         i
         <
         cacheid;
         i++)
        caml_method_cache[i] = 0;
      else
        /*<<stdlib.js 993 9>>*/ if(meths[ofs] === tag)
         /*<<stdlib.js 993 33>>*/ return meths[ofs - 1];
       /*<<stdlib.js 987 2>>*/ var
        /*<<stdlib.js 998 9>>*/ li=3,
        /*<<stdlib.js 998 17>>*/ hi=meths[1] * 2 + 1,
       mi;
       /*<<stdlib.js 999 2>>*/ while(li < hi)
        /*<<stdlib.js 999 18>>*/ {mi = li + hi >> 1 | 1;
         /*<<stdlib.js 1001 4>>*/ if(tag < meths[mi + 1])
         hi = mi - 2;
        else
         li = mi}
      caml_method_cache[cacheid] = li + 1;
       /*<<stdlib.js 1006 2>>*/ return tag == meths[li + 1]?meths[li]:0 /*<<stdlib.js 1007 0>>*/ }
     /*<<jslib.js 65 0>>*/ function caml_js_get_console()
     { /*<<jslib.js 66 2>>*/ var
        /*<<jslib.js 66 8>>*/ c=
        joo_global_object.console?joo_global_object.console:{},
        /*<<jslib.js 67 8>>*/ m=
        ["log",
         "debug",
         "info",
         "warn",
         "error",
         "assert",
         "dir",
         "dirxml",
         "trace",
         "group",
         "groupCollapsed",
         "groupEnd",
         "time",
         "timeEnd"];
       /*<<jslib.js 69 2>>*/ function f(){ /*<<jslib.js 69 17>>*/ }
       /*<<jslib.js 70 2>>*/ for
       ( /*<<jslib.js 70 13>>*/ var i=0;i < m.length;i++)
        /*<<jslib.js 70 37>>*/ if(!c[m[i]])c[m[i]] = f;
       /*<<jslib.js 71 2>>*/ return c /*<<jslib.js 72 0>>*/ }
     /*<<io.js 34 0>>*/ function caml_sys_open_internal(idx,file,flags)
     { /*<<io.js 35 2>>*/ if(caml_global_data.fds === undefined)
       caml_global_data.fds = new Array();
      flags = flags?flags:{};
       /*<<io.js 37 2>>*/  /*<<io.js 37 11>>*/ var info={};
      info.file = file;
      info.offset
      =
      flags.append? /*<<io.js 39 29>>*/ caml_ml_string_length(file.data):0;
      info.flags = flags;
      caml_global_data.fds[idx] = info;
      caml_global_data.fd_last_idx = idx;
       /*<<io.js 43 2>>*/ return idx /*<<io.js 44 0>>*/ }
     /*<<io.js 45 0>>*/ function caml_sys_open(name,flags,_perms)
     { /*<<io.js 46 2>>*/  /*<<io.js 46 8>>*/ var f={};
       /*<<io.js 47 2>>*/ while(flags)
        /*<<io.js 47 14>>*/ { /*<<io.js 48 4>>*/ switch(flags[1])
         {case 0:f.rdonly = 1; /*<<io.js 49 25>>*/ break;
          case 1:f.wronly = 1; /*<<io.js 50 25>>*/ break;
          case 2:f.append = 1; /*<<io.js 51 25>>*/ break;
          case 3:f.create = 1; /*<<io.js 52 25>>*/ break;
          case 4:f.truncate = 1; /*<<io.js 53 27>>*/ break;
          case 5:f.excl = 1; /*<<io.js 54 24>>*/ break;
          case 6:f.binary = 1; /*<<io.js 55 25>>*/ break;
          case 7:f.text = 1; /*<<io.js 56 23>>*/ break;
          case 8:f.nonblock = 1; /*<<io.js 57 27>>*/ break
          }
        flags = flags[2]}
       /*<<io.js 46 2>>*/ var
        /*<<io.js 61 12>>*/ name2= /*<<io.js 61 14>>*/ name.toString(),
        /*<<io.js 62 11>>*/ path= /*<<io.js 62 13>>*/ caml_make_path(name);
       /*<<io.js 63 2>>*/ if(f.rdonly && f.wronly)
        /*<<io.js 64 4>>*/ caml_raise_sys_error
        (name2 + " : flags Open_rdonly and Open_wronly are not compatible");
       /*<<io.js 65 2>>*/ if(f.text && f.binary)
        /*<<io.js 66 4>>*/ caml_raise_sys_error
        (name2 + " : flags Open_text and Open_binary are not compatible");
       /*<<io.js 67 2>>*/ if( /*<<io.js 67 6>>*/ caml_sys_file_exists(name))
        /*<<io.js 67 34>>*/ { /*<<io.js 68 4>>*/ if
         ( /*<<io.js 68 8>>*/ caml_sys_is_directory(name))
          /*<<io.js 68 37>>*/ caml_raise_sys_error
          (name2 + " : is a directory");
         /*<<io.js 69 4>>*/ if(f.create && f.excl)
          /*<<io.js 69 28>>*/ caml_raise_sys_error
          (name2 + " : file already exists");
         /*<<io.js 70 4>>*/ var
          /*<<io.js 70 12>>*/ idx=
          caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0,
          /*<<io.js 71 13>>*/ file= /*<<io.js 71 15>>*/ caml_fs_content(path);
         /*<<io.js 72 4>>*/ if(f.truncate)
          /*<<io.js 72 19>>*/ file.truncate();
         /*<<io.js 73 4>>*/ return  /*<<io.js 73 11>>*/ caml_sys_open_internal
                (idx + 1,file,f)}
      else
        /*<<io.js 74 9>>*/ if(f.create)
         /*<<io.js 74 23>>*/ { /*<<io.js 75 4>>*/  /*<<io.js 75 12>>*/ var
          idx=
           caml_global_data.fd_last_idx?caml_global_data.fd_last_idx:0;
          /*<<io.js 76 4>>*/ caml_fs_register
          (name, /*<<io.js 76 26>>*/ caml_create_string(0));
          /*<<io.js 75 4>>*/  /*<<io.js 77 13>>*/ var
          file=
            /*<<io.js 77 15>>*/ caml_fs_content(path);
          /*<<io.js 78 4>>*/ return  /*<<io.js 78 11>>*/ caml_sys_open_internal
                 (idx + 1,file,f)}
       else
         /*<<io.js 80 7>>*/ caml_raise_no_such_file(name) /*<<io.js 81 0>>*/ }
     /*<<io.js 82 0>>*/ caml_sys_open_internal
     (0,new MlFile( /*<<io.js 82 36>>*/ caml_create_string(0)));
     /*<<io.js 83 0>>*/ caml_sys_open_internal
     (1,new MlFile( /*<<io.js 83 36>>*/ caml_create_string(0)));
     /*<<io.js 84 0>>*/ caml_sys_open_internal
     (2,new MlFile( /*<<io.js 84 36>>*/ caml_create_string(0)));
     /*<<io.js 153 0>>*/ function caml_ml_open_descriptor_in(fd)
     { /*<<io.js 154 2>>*/  /*<<io.js 154 11>>*/ var
       data=
        caml_global_data.fds[fd];
       /*<<io.js 155 2>>*/ if(data.flags.wronly)
        /*<<io.js 155 24>>*/ caml_raise_sys_error
        ("fd " + fd + " is writeonly");
       /*<<io.js 157 2>>*/ return {file:data.file,
              offset:data.offset,
              fd:fd,
              opened:true,
              refill:null} /*<<io.js 164 0>>*/ }
     /*<<gc.js 10 0>>*/ function caml_gc_compaction()
     { /*<<gc.js 10 31>>*/ return 0 /*<<gc.js 10 39>>*/ }
     /*<<jslib.js 46 0>>*/  /*<<jslib.js 46 20>>*/ var
     caml_js_regexps=
      {amp:/&/g,lt:/</g,quot:/\"/g,all:/[&<\"]/};
     /*<<jslib.js 47 0>>*/ function caml_js_html_escape(s)
     { /*<<jslib.js 48 2>>*/ if
       (! /*<<jslib.js 48 7>>*/ caml_js_regexps.all.test(s))
        /*<<jslib.js 48 36>>*/ return s;
       /*<<jslib.js 49 2>>*/ return  /*<<jslib.js 49 9>>*/  /*<<jslib.js 49 9>>*/  /*<<jslib.js 49 9>>*/ s.replace
                (caml_js_regexps.amp,"&amp;").replace
               (caml_js_regexps.lt,"&lt;").replace
              (caml_js_regexps.quot,"&quot;") /*<<jslib.js 52 0>>*/ }
     /*<<io.js 181 0>>*/ function caml_ml_close_channel(channel)
     { /*<<io.js 182 4>>*/ caml_ml_flush(channel);
      channel.opened = false;
      delete caml_ml_out_channels[channel.fd];
       /*<<io.js 185 4>>*/ caml_sys_close(channel.fd);
       /*<<io.js 186 4>>*/ return 0 /*<<io.js 187 0>>*/ }
     /*<<unix.js 50 0>>*/ function win_cleanup(){ /*<<unix.js 50 24>>*/ }
     /*<<fs.js 352 0>>*/ function unix_stat(name)
     { /*<<fs.js 353 2>>*/  /*<<fs.js 353 8>>*/ var
       f=
         /*<<fs.js 353 10>>*/ caml_fs_content
         ( /*<<fs.js 353 26>>*/ caml_make_path(name));
       /*<<fs.js 354 2>>*/ return  /*<<fs.js 354 9>>*/ unix_stat_file(f) /*<<fs.js 355 0>>*/ }
     /*<<stdlib.js 172 0>>*/ function caml_exn_with_js_backtrace(exn,force)
     { /*<<stdlib.js 173 2>>*/ if(!exn.js_error || force)
       exn.js_error
       =
       new (joo_global_object.Error)("Js exception containing backtrace");
       /*<<stdlib.js 174 2>>*/ return exn /*<<stdlib.js 175 0>>*/ }
     /*<<stdlib.js 1155 0>>*/ function caml_sys_isatty(_chan)
     { /*<<stdlib.js 1156 2>>*/ return 0 /*<<stdlib.js 1157 0>>*/ }
     /*<<bigarray.js 486 0>>*/ function caml_ba_dim_2(ba)
     { /*<<bigarray.js 487 4>>*/ return  /*<<bigarray.js 487 11>>*/ ba.nth_dim
              (1) /*<<bigarray.js 488 0>>*/ }
     /*<<stdlib.js 1073 0>>*/ function unix_inet_addr_of_string()
     { /*<<stdlib.js 1073 38>>*/ return 0 /*<<stdlib.js 1073 47>>*/ }
     /*<<ieee_754.js 246 0>>*/ function caml_sinh_float(x)
     { /*<<ieee_754.js 246 31>>*/ return ( /*<<ieee_754.js 246 39>>*/ Math.exp
               (x)
              -
               /*<<ieee_754.js 246 53>>*/ Math.exp(-x))
             /
             2 /*<<ieee_754.js 246 72>>*/ }
     /*<<jslib.js 26 0>>*/ function caml_js_set(o,f,v)
     {o[f] = v; /*<<jslib.js 26 37>>*/ return 0 /*<<jslib.js 26 45>>*/ }
     /*<<ieee_754.js 174 0>>*/ function caml_ldexp_float(x,exp)
     {exp |= 0;
       /*<<ieee_754.js 176 2>>*/ if(exp > 1023)
        /*<<ieee_754.js 176 18>>*/ {exp -= 1023;
        x *=  /*<<ieee_754.js 178 9>>*/ Math.pow(2,1023);
         /*<<ieee_754.js 179 4>>*/ if(exp > 1023)
          /*<<ieee_754.js 179 20>>*/ {exp -= 1023;
          x *=  /*<<ieee_754.js 181 11>>*/ Math.pow(2,1023)}}
       /*<<ieee_754.js 184 2>>*/ if(exp < -1023)
        /*<<ieee_754.js 184 19>>*/ {exp += 1023;
        x *=  /*<<ieee_754.js 186 9>>*/ Math.pow(2,-1023)}
      x *=  /*<<ieee_754.js 188 7>>*/ Math.pow(2,exp);
       /*<<ieee_754.js 189 2>>*/ return x /*<<ieee_754.js 190 0>>*/ }
     /*<<stdlib.js 290 0>>*/ function caml_array_get(array,index)
     { /*<<stdlib.js 291 2>>*/ if(index < 0 || index >= array.length - 1)
        /*<<stdlib.js 291 50>>*/ caml_array_bound_error();
       /*<<stdlib.js 292 2>>*/ return array[index + 1] /*<<stdlib.js 293 0>>*/ }
     /*<<stdlib.js 1024 0>>*/ function caml_get_current_callstack()
     { /*<<stdlib.js 1024 41>>*/ return [0] /*<<stdlib.js 1024 53>>*/ }
     /*<<int64.js 229 0>>*/ function caml_int64_mod(x,y)
     { /*<<int64.js 231 2>>*/ if
       ( /*<<int64.js 231 6>>*/ caml_int64_is_zero(y))
        /*<<int64.js 231 30>>*/ caml_raise_zero_divide();
       /*<<int64.js 232 2>>*/  /*<<int64.js 232 11>>*/ var sign=x[3];
       /*<<int64.js 233 2>>*/ if(x[3] & 32768)
       x =  /*<<int64.js 233 25>>*/ caml_int64_neg(x);
       /*<<int64.js 234 2>>*/ if(y[3] & 32768)
       y =  /*<<int64.js 234 25>>*/ caml_int64_neg(y);
       /*<<int64.js 232 2>>*/  /*<<int64.js 235 8>>*/ var
       r=
         /*<<int64.js 235 10>>*/ caml_int64_udivmod(x,y)[2];
       /*<<int64.js 236 2>>*/ if(sign & 32768)
       r =  /*<<int64.js 236 25>>*/ caml_int64_neg(r);
       /*<<int64.js 237 2>>*/ return r /*<<int64.js 238 0>>*/ }
     /*<<stdlib.js 225 0>>*/ function caml_obj_set_tag(x,tag)
     {x[0] = tag; /*<<stdlib.js 225 49>>*/ return 0 /*<<stdlib.js 225 59>>*/ }
     /*<<bigstring.js 87 0>>*/ function bigstring_unmarshal_stub(s,ofs)
     { /*<<bigstring.js 88 2>>*/  /*<<bigstring.js 88 13>>*/ var
       reader=
        new BigStringReader(s,typeof ofs == "number"?ofs:ofs[0]);
       /*<<bigstring.js 89 2>>*/ return  /*<<bigstring.js 89 9>>*/ caml_input_value_from_reader
              (reader,ofs) /*<<bigstring.js 90 0>>*/ }
     /*<<stdlib.js 1107 0>>*/ function caml_int32_bswap(x)
     { /*<<stdlib.js 1108 2>>*/ return (x & 255)
             <<
             24
             |
             (x & 65280)
             <<
             8
             |
             (x & 16711680)
             >>
             8
             |
             (x & 4278190080)
             >>
             24 /*<<stdlib.js 1112 0>>*/ }
     /*<<unix.js 47 0>>*/ function win_startup(){ /*<<unix.js 47 24>>*/ }
     /*<<io.js 315 0>>*/ function caml_ml_seek_in_64(chan,pos)
     { /*<<io.js 316 2>>*/ if(chan.refill != null)
        /*<<io.js 316 27>>*/ caml_raise_sys_error("Illegal seek");
      chan.offset =  /*<<io.js 317 16>>*/ caml_int64_to_float(pos);
       /*<<io.js 318 2>>*/ return 0 /*<<io.js 319 0>>*/ }
     /*<<bigarray.js 591 0>>*/ function caml_ba_set_3(ba,i0,i1,i2,v)
     { /*<<bigarray.js 592 4>>*/ return  /*<<bigarray.js 592 11>>*/ ba.set
              ([i0,i1,i2],v) /*<<bigarray.js 593 0>>*/ }
     /*<<jslib.js 33 0>>*/ function caml_js_instanceof(o,c)
     { /*<<jslib.js 33 35>>*/ return o instanceof c /*<<jslib.js 33 58>>*/ }
     /*<<stdlib.js 743 0>>*/ function caml_hash_mix_float(h,v0)
     { /*<<stdlib.js 744 2>>*/ var
        /*<<stdlib.js 744 8>>*/ v=
         /*<<stdlib.js 744 10>>*/ caml_int64_bits_of_float(v0),
        /*<<stdlib.js 745 9>>*/ lo=v[1] | v[2] << 24,
        /*<<stdlib.js 746 9>>*/ hi=v[2] >>> 8 | v[3] << 16;
      h =  /*<<stdlib.js 747 6>>*/ caml_hash_mix_int(h,lo);
      h =  /*<<stdlib.js 748 6>>*/ caml_hash_mix_int(h,hi);
       /*<<stdlib.js 749 2>>*/ return h /*<<stdlib.js 750 0>>*/ }
     /*<<stdlib.js 416 0>>*/ function caml_notequal(x,y)
     { /*<<stdlib.js 416 32>>*/ return +( /*<<stdlib.js 416 41>>*/ caml_compare_val
               (x,y,false)
              !=
              0) /*<<stdlib.js 416 76>>*/ }
     /*<<int64.js 120 0>>*/ function caml_int64_shift_left(x,s)
     {s = s & 63;
       /*<<int64.js 122 2>>*/ if(s == 0) /*<<int64.js 122 14>>*/ return x;
       /*<<int64.js 123 2>>*/ if(s < 24)
        /*<<int64.js 124 4>>*/ return [255,
               x[1] << s & 16777215,
               (x[2] << s | x[1] >> 24 - s) & 16777215,
               (x[3] << s | x[2] >> 24 - s) & 65535];
       /*<<int64.js 128 2>>*/ if(s < 48)
        /*<<int64.js 129 4>>*/ return [255,
               0,
               x[1] << s - 24 & 16777215,
               (x[2] << s - 24 | x[1] >> 48 - s) & 65535];
       /*<<int64.js 132 2>>*/ return [255,0,0,x[1] << s - 48 & 65535] /*<<int64.js 133 0>>*/ }
     /*<<stdlib.js 47 0>>*/ function raw_array_append_one(a,x)
     { /*<<stdlib.js 48 2>>*/ var
        /*<<stdlib.js 48 8>>*/ l=a.length,
        /*<<stdlib.js 49 8>>*/ b=new Array(l + 1),
        /*<<stdlib.js 50 8>>*/ i=0;
       /*<<stdlib.js 51 2>>*/ for(;i < l;i++)b[i] = a[i];
      b[i] = x;
       /*<<stdlib.js 53 2>>*/ return b /*<<stdlib.js 54 0>>*/ }
     /*<<stdlib.js 59 0>>*/ function caml_call_gen(f,args)
     { /*<<stdlib.js 60 2>>*/ if(f.fun)
        /*<<stdlib.js 61 4>>*/ return  /*<<stdlib.js 61 11>>*/ caml_call_gen
               (f.fun,args);
       /*<<stdlib.js 62 2>>*/ var
        /*<<stdlib.js 62 8>>*/ n=f.length,
        /*<<stdlib.js 63 14>>*/ argsLen=args.length,
        /*<<stdlib.js 64 8>>*/ d=n - argsLen;
       /*<<stdlib.js 65 2>>*/ if(d == 0)
        /*<<stdlib.js 66 4>>*/ return  /*<<stdlib.js 66 11>>*/ f.apply
               (null,args);
      else
        /*<<stdlib.js 67 7>>*/ if(d < 0)
         /*<<stdlib.js 68 4>>*/ return  /*<<stdlib.js 68 11>>*/ caml_call_gen
                ( /*<<stdlib.js 68 25>>*/ f.apply
                  (null, /*<<stdlib.js 69 33>>*/ raw_array_sub(args,0,n)),
                  /*<<stdlib.js 70 25>>*/ raw_array_sub(args,n,argsLen - n));
       else
         /*<<stdlib.js 72 4>>*/ return function(x)
         { /*<<stdlib.js 72 25>>*/ return  /*<<stdlib.js 72 32>>*/ caml_call_gen
                  (f, /*<<stdlib.js 72 49>>*/ raw_array_append_one(args,x)) /*<<stdlib.js 72 11>>*/ } /*<<stdlib.js 73 0>>*/ }
     /*<<jslib_js_of_ocaml.js 94 0>>*/ function caml_js_wrap_meth_callback(f)
     { /*<<jslib_js_of_ocaml.js 95 2>>*/ return function()
       { /*<<jslib_js_of_ocaml.js 96 4>>*/ return  /*<<jslib_js_of_ocaml.js 96 11>>*/ caml_call_gen
                (f,
                  /*<<jslib_js_of_ocaml.js 96 27>>*/ raw_array_cons
                  (arguments,this)) /*<<jslib_js_of_ocaml.js 95 9>>*/ } /*<<jslib_js_of_ocaml.js 98 0>>*/ }
     /*<<stdlib.js 920 0>>*/ function caml_sys_const_int_size()
     { /*<<stdlib.js 920 38>>*/ return 32 /*<<stdlib.js 920 49>>*/ }
     /*<<bigstring.js 22 0>>*/  /*<<bigstring.js 22 34>>*/ var
     caml_blit_bigstring_to_string=
      bigstring_blit_bigstring_string_stub;
     /*<<bigarray.js 481 0>>*/ function caml_ba_dim_1(ba)
     { /*<<bigarray.js 482 4>>*/ return  /*<<bigarray.js 482 11>>*/ ba.nth_dim
              (0) /*<<bigarray.js 483 0>>*/ }
     /*<<stdlib.js 30 0>>*/ function raw_array_copy(a)
     { /*<<stdlib.js 31 2>>*/ var
        /*<<stdlib.js 31 8>>*/ l=a.length,
        /*<<stdlib.js 32 8>>*/ b=new Array(l);
       /*<<stdlib.js 33 2>>*/ for( /*<<stdlib.js 33 12>>*/ var i=0;i < l;i++)
       b[i] = a[i];
       /*<<stdlib.js 34 2>>*/ return b /*<<stdlib.js 35 0>>*/ }
     /*<<jslib_js_of_ocaml.js 83 0>>*/ function caml_js_wrap_callback(f)
     { /*<<jslib_js_of_ocaml.js 84 2>>*/ return function()
       { /*<<jslib_js_of_ocaml.js 85 4>>*/ return arguments.length > 0
                ? /*<<jslib_js_of_ocaml.js 86 13>>*/ caml_call_gen
                  (f,
                    /*<<jslib_js_of_ocaml.js 86 30>>*/ raw_array_copy
                    (arguments))
                : /*<<jslib_js_of_ocaml.js 88 13>>*/ caml_call_gen
                  (f,[undefined]) /*<<jslib_js_of_ocaml.js 84 9>>*/ } /*<<jslib_js_of_ocaml.js 91 0>>*/ }
     /*<<jslib_js_of_ocaml.js 61 0>>*/ function caml_js_meth_call(o,f,args)
     { /*<<jslib_js_of_ocaml.js 62 2>>*/ return  /*<<jslib_js_of_ocaml.js 62 9>>*/ o
               [ /*<<jslib_js_of_ocaml.js 62 11>>*/ f.toString()].apply
              (o, /*<<jslib_js_of_ocaml.js 62 34>>*/ caml_js_from_array(args)) /*<<jslib_js_of_ocaml.js 63 0>>*/ }
     /*<<fs.js 310 0>>*/ function caml_ba_map_file
     (vfd,kind,layout,shared,dims,pos)
     { /*<<fs.js 312 4>>*/ caml_failwith("caml_ba_map_file not Implemented") /*<<fs.js 313 0>>*/ }
     /*<<fs.js 317 0>>*/ function caml_ba_map_file_bytecode(argv,argn)
     { /*<<fs.js 318 2>>*/ return  /*<<fs.js 318 9>>*/ caml_ba_map_file
              (argv[0],argv[1],argv[2],argv[3],argv[4],argv[5]) /*<<fs.js 319 0>>*/ }
     /*<<unix.js 24 0>>*/ function unix_localtime(t)
     { /*<<unix.js 25 2>>*/ var
        /*<<unix.js 25 8>>*/ d=new Date(t * 1e3),
        /*<<unix.js 26 19>>*/ januaryfirst=
        new Date( /*<<unix.js 26 30>>*/ d.getFullYear(),0,1),
        /*<<unix.js 27 10>>*/ doy=
         /*<<unix.js 27 12>>*/ Math.floor((d - januaryfirst) / 864e5),
        /*<<unix.js 28 10>>*/ jan=
        new Date( /*<<unix.js 28 21>>*/ d.getFullYear(),0,1),
        /*<<unix.js 29 10>>*/ jul=
        new Date( /*<<unix.js 29 21>>*/ d.getFullYear(),6,1),
        /*<<unix.js 30 24>>*/ stdTimezoneOffset=
         /*<<unix.js 30 26>>*/ Math.max
         ( /*<<unix.js 30 35>>*/ jan.getTimezoneOffset(),
           /*<<unix.js 30 60>>*/ jul.getTimezoneOffset());
       /*<<unix.js 31 2>>*/ return [0,
               /*<<unix.js 31 13>>*/ d.getSeconds(),
               /*<<unix.js 31 29>>*/ d.getMinutes(),
               /*<<unix.js 31 45>>*/ d.getHours(),
               /*<<unix.js 32 2>>*/ d.getDate(),
               /*<<unix.js 32 15>>*/ d.getMonth(),
               /*<<unix.js 32 29>>*/ d.getFullYear() - 1900,
               /*<<unix.js 33 2>>*/ d.getDay(),
              doy,
               /*<<unix.js 34 3>>*/ d.getTimezoneOffset()
              <
              stdTimezoneOffset
              |
              0] /*<<unix.js 35 0>>*/ }
     /*<<jslib_js_of_ocaml.js 108 0>>*/ function caml_js_to_byte_string(s)
     { /*<<jslib_js_of_ocaml.js 108 37>>*/ return  /*<<jslib_js_of_ocaml.js 108 44>>*/ caml_new_string
              (s) /*<<jslib_js_of_ocaml.js 108 64>>*/ }
     /*<<ieee_754.js 248 0>>*/ function caml_tanh_float(x)
     { /*<<ieee_754.js 249 2>>*/ var
        /*<<ieee_754.js 249 8>>*/ y= /*<<ieee_754.js 249 10>>*/ Math.exp(x),
        /*<<ieee_754.js 249 25>>*/ z= /*<<ieee_754.js 249 27>>*/ Math.exp(-x);
       /*<<ieee_754.js 250 2>>*/ return (y + z) / (y - z) /*<<ieee_754.js 251 0>>*/ }
     /*<<fs.js 363 0>>*/ function unix_fstat(idx)
     { /*<<fs.js 364 2>>*/ return  /*<<fs.js 364 9>>*/ unix_stat_file
              (caml_global_data.fds[idx].file) /*<<fs.js 365 0>>*/ }
     /*<<polyfill/json2.js 170 0>>*/  /*<<polyfill/json2.js 170 9>>*/ var
     JSON=
      joo_global_object.JSON;
     /*<<polyfill/json2.js 171 0>>*/ if(typeof JSON !== "object")
      /*<<polyfill/json2.js 171 30>>*/ JSON = {};
    ( /*<<polyfill/json2.js 175 1>>*/ function()
       {"use strict";
         /*<<polyfill/json2.js 178 4>>*/ var
          /*<<polyfill/json2.js 178 15>>*/ rx_one=/^[\],:{}\s]*$/,
          /*<<polyfill/json2.js 179 15>>*/ rx_two=
          /\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,
          /*<<polyfill/json2.js 180 17>>*/ rx_three=
          /"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,
          /*<<polyfill/json2.js 181 16>>*/ rx_four=/(?:^|:|,)(?:\s*\[)+/g,
          /*<<polyfill/json2.js 182 21>>*/ rx_escapable=
          /[\\\"\u0000-\u001f\u007f-\u009f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
          /*<<polyfill/json2.js 183 21>>*/ rx_dangerous=
          /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g;
         /*<<polyfill/json2.js 185 4>>*/ function f(n)
         { /*<<polyfill/json2.js 187 8>>*/ return n < 10?"0" + n:n /*<<polyfill/json2.js 190 4>>*/ }
         /*<<polyfill/json2.js 192 4>>*/ function this_value()
         { /*<<polyfill/json2.js 193 8>>*/ return  /*<<polyfill/json2.js 193 15>>*/ this.valueOf
                  () /*<<polyfill/json2.js 194 4>>*/ }
         /*<<polyfill/json2.js 196 4>>*/ if
         (typeof Date.prototype.toJSON !== "function")
          /*<<polyfill/json2.js 196 53>>*/ {Date.prototype.toJSON
          =
          function()
           { /*<<polyfill/json2.js 200 12>>*/ return  /*<<polyfill/json2.js 200 19>>*/ isFinite
                     ( /*<<polyfill/json2.js 200 28>>*/ this.valueOf())
                    ? /*<<polyfill/json2.js 201 18>>*/ this.getUTCFullYear()
                     +
                     "-"
                     +
                      /*<<polyfill/json2.js 202 24>>*/ f
                      ( /*<<polyfill/json2.js 202 26>>*/ this.getUTCMonth() + 1)
                     +
                     "-"
                     +
                      /*<<polyfill/json2.js 203 24>>*/ f
                      ( /*<<polyfill/json2.js 203 26>>*/ this.getUTCDate())
                     +
                     "T"
                     +
                      /*<<polyfill/json2.js 204 24>>*/ f
                      ( /*<<polyfill/json2.js 204 26>>*/ this.getUTCHours())
                     +
                     ":"
                     +
                      /*<<polyfill/json2.js 205 24>>*/ f
                      ( /*<<polyfill/json2.js 205 26>>*/ this.getUTCMinutes())
                     +
                     ":"
                     +
                      /*<<polyfill/json2.js 206 24>>*/ f
                      ( /*<<polyfill/json2.js 206 26>>*/ this.getUTCSeconds())
                     +
                     "Z"
                    :null /*<<polyfill/json2.js 198 32>>*/ };
          Boolean.prototype.toJSON = this_value;
          Number.prototype.toJSON = this_value;
          String.prototype.toJSON = this_value}
         /*<<polyfill/json2.js 215 4>>*/ var gap,indent,meta,rep;
         /*<<polyfill/json2.js 221 4>>*/ function quote(string)
         {rx_escapable.lastIndex = 0;
           /*<<polyfill/json2.js 229 8>>*/ return  /*<<polyfill/json2.js 229 15>>*/ rx_escapable.test
                   (string)
                  ?'"'
                   +
                    /*<<polyfill/json2.js 230 20>>*/ string.replace
                    (rx_escapable,
                     function(a)
                      { /*<<polyfill/json2.js 231 16>>*/  /*<<polyfill/json2.js 231 22>>*/ var
                        c=
                         meta[a];
                        /*<<polyfill/json2.js 232 16>>*/ return typeof c
                               ===
                               "string"
                               ?c
                               :"\\u"
                                +
                                 /*<<polyfill/json2.js 234 30>>*/ ("0000"
                                  +
                                   /*<<polyfill/json2.js 234 40>>*/  /*<<polyfill/json2.js 234 40>>*/ a.charCodeAt
                                    (0).toString
                                   (16)).slice
                                 (-4) /*<<polyfill/json2.js 230 49>>*/ })
                   +
                   '"'
                  :'"' + string + '"' /*<<polyfill/json2.js 237 4>>*/ }
         /*<<polyfill/json2.js 240 4>>*/ function str(key,holder)
         { /*<<polyfill/json2.js 244 8>>*/ var
           i,
           k,
           v,
           length,
            /*<<polyfill/json2.js 248 17>>*/ mind=gap,
           partial,
            /*<<polyfill/json2.js 250 18>>*/ value=holder[key];
           /*<<polyfill/json2.js 254 8>>*/ if
           (value
            &&
            typeof value
            ===
            "object"
            &&
            typeof value.toJSON
            ===
            "function")
            /*<<polyfill/json2.js 255 52>>*/ value
           =
            /*<<polyfill/json2.js 256 20>>*/ value.toJSON(key);
           /*<<polyfill/json2.js 262 8>>*/ if(typeof rep === "function")
            /*<<polyfill/json2.js 262 39>>*/ value
           =
            /*<<polyfill/json2.js 263 20>>*/ rep.call(holder,key,value);
           /*<<polyfill/json2.js 268 8>>*/ switch(typeof value)
           {case "string":
              /*<<polyfill/json2.js 270 12>>*/ return  /*<<polyfill/json2.js 270 19>>*/ quote
                     (value);
            case "number":
              /*<<polyfill/json2.js 276 12>>*/ return  /*<<polyfill/json2.js 276 19>>*/ isFinite
                      (value)
                     ? /*<<polyfill/json2.js 277 18>>*/ String(value)
                     :"null";
            case "boolean":
            case "null":
              /*<<polyfill/json2.js 287 12>>*/ return  /*<<polyfill/json2.js 287 19>>*/ String
                     (value);
            case "object":
              /*<<polyfill/json2.js 297 12>>*/ if(!value)
               /*<<polyfill/json2.js 297 24>>*/ return "null";
             gap += indent;
             partial = [];
              /*<<polyfill/json2.js 308 12>>*/ if
              ( /*<<polyfill/json2.js 308 16>>*/ Object.prototype.toString.apply
                (value)
               ===
               "[object Array]")
               /*<<polyfill/json2.js 308 77>>*/ {length = value.length;
                /*<<polyfill/json2.js 314 16>>*/ for(i = 0;i < length;i += 1)
                 /*<<polyfill/json2.js 314 48>>*/ partial[i]
                =
                 /*<<polyfill/json2.js 315 33>>*/ str(i,value)
                ||
                "null";
               v
               =
               partial.length === 0
                ?"[]"
                :gap
                  ?"[\n"
                   +
                   gap
                   +
                    /*<<polyfill/json2.js 324 40>>*/ partial.join(",\n" + gap)
                   +
                   "\n"
                   +
                   mind
                   +
                   "]"
                  :"["
                   +
                    /*<<polyfill/json2.js 325 32>>*/ partial.join(",")
                   +
                   "]";
               gap = mind;
                /*<<polyfill/json2.js 327 16>>*/ return v}
              /*<<polyfill/json2.js 332 12>>*/ if
              (rep && typeof rep === "object")
               /*<<polyfill/json2.js 332 48>>*/ {length = rep.length;
                /*<<polyfill/json2.js 334 16>>*/ for(i = 0;i < length;i += 1)
                 /*<<polyfill/json2.js 334 48>>*/ if
                 (typeof rep[i] === "string")
                  /*<<polyfill/json2.js 335 52>>*/ {k = rep[i];
                  v =  /*<<polyfill/json2.js 337 28>>*/ str(k,value);
                   /*<<polyfill/json2.js 338 24>>*/ if(v)
                    /*<<polyfill/json2.js 338 31>>*/  /*<<polyfill/json2.js 339 28>>*/ partial.push
                    ( /*<<polyfill/json2.js 339 41>>*/ quote(k)
                     +
                     (gap?": ":":")
                     +
                     v)}}
             else
               /*<<polyfill/json2.js 347 19>>*/ for(k in value)
                /*<<polyfill/json2.js 351 33>>*/ if
                ( /*<<polyfill/json2.js 352 24>>*/ Object.prototype.hasOwnProperty.call
                  (value,k))
                 /*<<polyfill/json2.js 352 72>>*/ {v
                 =
                  /*<<polyfill/json2.js 353 28>>*/ str(k,value);
                  /*<<polyfill/json2.js 354 24>>*/ if(v)
                   /*<<polyfill/json2.js 354 31>>*/  /*<<polyfill/json2.js 355 28>>*/ partial.push
                   ( /*<<polyfill/json2.js 355 41>>*/ quote(k)
                    +
                    (gap?": ":":")
                    +
                    v)}
             v
             =
             partial.length === 0
              ?"{}"
              :gap
                ?"{\n"
                 +
                 gap
                 +
                  /*<<polyfill/json2.js 371 36>>*/ partial.join(",\n" + gap)
                 +
                 "\n"
                 +
                 mind
                 +
                 "}"
                :"{"
                 +
                  /*<<polyfill/json2.js 372 28>>*/ partial.join(",")
                 +
                 "}";
             gap = mind;
              /*<<polyfill/json2.js 374 12>>*/ return v
            } /*<<polyfill/json2.js 376 4>>*/ }
         /*<<polyfill/json2.js 380 4>>*/ if
         (typeof JSON.stringify !== "function")
          /*<<polyfill/json2.js 380 46>>*/ {meta
          =
          {"\b":"\\b",
           "\t":"\\t",
           "\n":"\\n",
           "\f":"\\f",
           "\r":"\\r",
           '"':'\\"',
           "\\":"\\\\"};
          JSON.stringify
          =
          function(value,replacer,space)
           { /*<<polyfill/json2.js 398 12>>*/ var i;
            gap = "";
            indent = "";
             /*<<polyfill/json2.js 405 12>>*/ if(typeof space === "number")
              /*<<polyfill/json2.js 405 43>>*/ for(i = 0;i < space;i += 1)
               /*<<polyfill/json2.js 406 47>>*/ indent += " ";
            else
              /*<<polyfill/json2.js 412 19>>*/ if(typeof space === "string")
               /*<<polyfill/json2.js 412 50>>*/ indent = space;
            rep = replacer;
             /*<<polyfill/json2.js 420 12>>*/ if
             (replacer
              &&
              typeof replacer
              !==
              "function"
              &&
              (typeof replacer
               !==
               "object"
               ||
               typeof replacer.length
               !==
               "number"))
              /*<<polyfill/json2.js 422 58>>*/ throw new
                    Error
                    ("JSON.stringify");
             /*<<polyfill/json2.js 429 12>>*/ return  /*<<polyfill/json2.js 429 19>>*/ str
                    ("",{"":value}) /*<<polyfill/json2.js 390 25>>*/ }}
         /*<<polyfill/json2.js 436 4>>*/ if(typeof JSON.parse !== "function")
          /*<<polyfill/json2.js 436 42>>*/ JSON.parse
         =
         function(text,reviver)
          { /*<<polyfill/json2.js 442 12>>*/ var j;
            /*<<polyfill/json2.js 444 12>>*/ function walk(holder,key)
            { /*<<polyfill/json2.js 449 16>>*/ var
              k,
              v,
               /*<<polyfill/json2.js 449 32>>*/ value=holder[key];
              /*<<polyfill/json2.js 450 16>>*/ if
              (value && typeof value === "object")
               /*<<polyfill/json2.js 450 56>>*/ for(k in value)
                /*<<polyfill/json2.js 451 37>>*/ if
                ( /*<<polyfill/json2.js 452 28>>*/ Object.prototype.hasOwnProperty.call
                  (value,k))
                 /*<<polyfill/json2.js 452 76>>*/ {v
                 =
                  /*<<polyfill/json2.js 453 32>>*/ walk(value,k);
                  /*<<polyfill/json2.js 454 28>>*/ if(v !== undefined)
                   /*<<polyfill/json2.js 454 49>>*/ value[k] = v;
                 else
                   /*<<polyfill/json2.js 456 35>>*/ delete value[k]}
              /*<<polyfill/json2.js 462 16>>*/ return  /*<<polyfill/json2.js 462 23>>*/ reviver.call
                     (holder,key,value) /*<<polyfill/json2.js 463 12>>*/ }
           text =  /*<<polyfill/json2.js 470 19>>*/ String(text);
           rx_dangerous.lastIndex = 0;
            /*<<polyfill/json2.js 472 12>>*/ if
            ( /*<<polyfill/json2.js 472 16>>*/ rx_dangerous.test(text))
             /*<<polyfill/json2.js 472 41>>*/ text
            =
             /*<<polyfill/json2.js 473 23>>*/ text.replace
             (rx_dangerous,
              function(a)
               { /*<<polyfill/json2.js 474 20>>*/ return "\\u"
                       +
                        /*<<polyfill/json2.js 475 28>>*/ ("0000"
                         +
                          /*<<polyfill/json2.js 475 38>>*/  /*<<polyfill/json2.js 475 38>>*/ a.charCodeAt
                           (0).toString
                          (16)).slice
                        (-4) /*<<polyfill/json2.js 473 50>>*/ });
            /*<<polyfill/json2.js 492 12>>*/ if
            ( /*<<polyfill/json2.js 493 16>>*/ rx_one.test
              ( /*<<polyfill/json2.js 494 20>>*/  /*<<polyfill/json2.js 494 20>>*/  /*<<polyfill/json2.js 494 20>>*/ text.replace
                  (rx_two,"@").replace
                 (rx_three,"]").replace
                (rx_four,"")))
             /*<<polyfill/json2.js 499 14>>*/ {j
             =
              /*<<polyfill/json2.js 506 20>>*/ eval("(" + text + ")");
              /*<<polyfill/json2.js 511 16>>*/ return typeof reviver
                     ===
                     "function"
                     ? /*<<polyfill/json2.js 512 22>>*/ walk({"":j},"")
                     :j}
            /*<<polyfill/json2.js 518 12>>*/ throw new
                  SyntaxError
                  ("JSON.parse") /*<<polyfill/json2.js 437 21>>*/ } /*<<polyfill/json2.js 175 1>>*/ }
      ());
     /*<<polyfill/json2.js 525 0>>*/ function caml_json()
     { /*<<polyfill/json2.js 525 23>>*/ return JSON /*<<polyfill/json2.js 525 36>>*/ }
     /*<<jslib.js 75 0>>*/ function caml_trampoline(res)
     { /*<<jslib.js 76 2>>*/  /*<<jslib.js 76 8>>*/ var c=1;
       /*<<jslib.js 77 2>>*/ while(res && res.joo_tramp)
        /*<<jslib.js 77 29>>*/ {res
        =
         /*<<jslib.js 78 10>>*/ res.joo_tramp.apply(null,res.joo_args);
        c++}
       /*<<jslib.js 82 2>>*/ return res /*<<jslib.js 83 0>>*/ }
     /*<<unix.js 39 0>>*/ function unix_mktime(tm)
     { /*<<unix.js 40 4>>*/ var
        /*<<unix.js 40 10>>*/ d=
        new Date(tm[6] + 1900,tm[5],tm[4],tm[3],tm[2],tm[1]),
        /*<<unix.js 41 10>>*/ t=
         /*<<unix.js 41 12>>*/ Math.floor
         ( /*<<unix.js 41 23>>*/ d.getTime() / 1e3),
        /*<<unix.js 42 12>>*/ tm2= /*<<unix.js 42 14>>*/ unix_localtime(t);
       /*<<unix.js 43 4>>*/ return [0,t,tm2] /*<<unix.js 44 0>>*/ }
     /*<<io.js 255 0>>*/ function caml_fs_file_content(name)
     { /*<<io.js 256 2>>*/ var
        /*<<io.js 256 11>>*/ path= /*<<io.js 256 13>>*/ caml_make_path(name),
        /*<<io.js 257 8>>*/ f= /*<<io.js 257 10>>*/ caml_fs_content(path);
       /*<<io.js 258 2>>*/ if(f instanceof MlFile)
        /*<<io.js 258 25>>*/ { /*<<io.js 259 4>>*/  /*<<io.js 259 12>>*/ var
         now=
           /*<<io.js 259 14>>*/ unix_time();
        f.atime = now;
         /*<<io.js 261 4>>*/ return f.data}
       /*<<io.js 263 2>>*/ caml_raise_not_found() /*<<io.js 264 0>>*/ }
     /*<<fs.js 163 0>>*/ function caml_fs_update_inode(name,content)
     { /*<<fs.js 164 2>>*/ var
        /*<<fs.js 164 11>>*/ path= /*<<fs.js 164 13>>*/ caml_make_path(name),
        /*<<fs.js 165 10>>*/ dir=caml_root_dir;
       /*<<fs.js 166 2>>*/ for
       ( /*<<fs.js 166 11>>*/ var i=0;i < path.length - 1;i++)
        /*<<fs.js 166 34>>*/ { /*<<fs.js 167 4>>*/  /*<<fs.js 167 10>>*/ var
         d=
          path[i];
         /*<<fs.js 168 4>>*/ if(! /*<<fs.js 168 9>>*/ dir.exists(d))
          /*<<fs.js 169 6>>*/ dir.mk(d,new MlDir());
        dir =  /*<<fs.js 170 10>>*/ dir.get(d);
         /*<<fs.js 171 4>>*/ if(!(dir instanceof MlDir))
          /*<<fs.js 172 6>>*/ caml_raise_sys_error
          (path.orig + " : file does not exists")}
       /*<<fs.js 164 2>>*/  /*<<fs.js 174 8>>*/ var d=path[path.length - 1];
       /*<<fs.js 175 2>>*/ if(! /*<<fs.js 175 6>>*/ dir.exists(d))
        /*<<fs.js 175 21>>*/ caml_raise_sys_error
        (path.orig + " : file does not exists");
       /*<<fs.js 176 2>>*/ if(content instanceof MlString)
        /*<<fs.js 176 34>>*/ { /*<<fs.js 177 4>>*/  /*<<fs.js 177 14>>*/ var
         inode=
           /*<<fs.js 177 16>>*/ dir.get(d);
        inode.data = content}
      else
        /*<<fs.js 180 7>>*/ caml_invalid_argument("caml_fs_update_inode");
       /*<<fs.js 181 2>>*/ return 0 /*<<fs.js 182 0>>*/ }
     /*<<mlString.js 204 0>>*/ function caml_bytes_unsafe_get(s,i)
     { /*<<mlString.js 205 2>>*/ switch(s.t & 6)
       {default:
          /*<<mlString.js 207 4>>*/ if(i >= s.c.length)
           /*<<mlString.js 207 25>>*/ return 0;case 0:
          /*<<mlString.js 209 4>>*/ return  /*<<mlString.js 209 11>>*/ s.c.charCodeAt
                 (i);
        case 4: /*<<mlString.js 211 4>>*/ return s.c[i]
        } /*<<mlString.js 213 0>>*/ }
     /*<<mlString.js 264 0>>*/ function caml_bytes_get(s,i)
     { /*<<mlString.js 265 2>>*/ if(i >>> 0 >= s.l)
        /*<<mlString.js 265 22>>*/ caml_string_bound_error();
       /*<<mlString.js 266 2>>*/ return  /*<<mlString.js 266 9>>*/ caml_bytes_unsafe_get
              (s,i) /*<<mlString.js 267 0>>*/ }
     /*<<ieee_754.js 234 0>>*/ function caml_hypot_float(x,y)
     { /*<<ieee_754.js 235 2>>*/ var
        /*<<ieee_754.js 235 8>>*/ x= /*<<ieee_754.js 235 10>>*/ Math.abs(x),
        /*<<ieee_754.js 235 25>>*/ y= /*<<ieee_754.js 235 27>>*/ Math.abs(y),
        /*<<ieee_754.js 236 8>>*/ a= /*<<ieee_754.js 236 10>>*/ Math.max(x,y),
        /*<<ieee_754.js 236 28>>*/ b=
         /*<<ieee_754.js 236 30>>*/ Math.min(x,y)
        /
        (a?a:1);
       /*<<ieee_754.js 237 2>>*/ return a
             *
              /*<<ieee_754.js 237 14>>*/ Math.sqrt(1 + b * b) /*<<ieee_754.js 238 0>>*/ }
     /*<<ieee_754.js 144 0>>*/ function caml_int32_float_of_bits(x)
     { /*<<ieee_754.js 145 2>>*/  /*<<ieee_754.js 145 13>>*/ var
       int32a=
        new (joo_global_object.Int32Array)(1);
      int32a[0] = x;
       /*<<ieee_754.js 145 2>>*/  /*<<ieee_754.js 147 15>>*/ var
       float32a=
        new (joo_global_object.Float32Array)(int32a.buffer);
       /*<<ieee_754.js 148 2>>*/ return float32a[0] /*<<ieee_754.js 149 0>>*/ }
     /*<<io.js 326 0>>*/ function caml_ml_pos_in_64(chan)
     { /*<<io.js 326 34>>*/ return  /*<<io.js 326 41>>*/ caml_int64_of_float
              (chan.offset) /*<<io.js 326 73>>*/ }
     /*<<jslib_js_of_ocaml.js 54 0>>*/ function caml_js_call(f,o,args)
     { /*<<jslib_js_of_ocaml.js 54 36>>*/ return  /*<<jslib_js_of_ocaml.js 54 43>>*/ f.apply
              (o, /*<<jslib_js_of_ocaml.js 54 54>>*/ caml_js_from_array(args)) /*<<jslib_js_of_ocaml.js 54 81>>*/ }
     /*<<stdlib.js 925 0>>*/ function caml_sys_const_max_wosize()
     { /*<<stdlib.js 925 40>>*/ return 2147483647 / 4 | 0 /*<<stdlib.js 925 66>>*/ }
     /*<<io.js 421 0>>*/ function caml_ml_pos_out(chan)
     { /*<<io.js 421 32>>*/ return chan.offset /*<<io.js 421 50>>*/ }
     /*<<mlString.js 378 0>>*/ function caml_string_equal(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 379 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 380 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 381 2>>*/ return s1.c == s2.c?1:0 /*<<mlString.js 382 0>>*/ }
     /*<<mlString.js 398 0>>*/ function caml_bytes_notequal(s1,s2)
     { /*<<mlString.js 398 39>>*/ return 1
             -
              /*<<mlString.js 398 48>>*/ caml_string_equal(s1,s2) /*<<mlString.js 398 75>>*/ }
     /*<<jslib_js_of_ocaml.js 130 0>>*/ function caml_js_object(a)
     { /*<<jslib_js_of_ocaml.js 131 2>>*/  /*<<jslib_js_of_ocaml.js 131 8>>*/ var
       o=
        {};
       /*<<jslib_js_of_ocaml.js 132 2>>*/ for
       ( /*<<jslib_js_of_ocaml.js 132 13>>*/ var i=1;i < a.length;i++)
        /*<<jslib_js_of_ocaml.js 132 37>>*/ { /*<<jslib_js_of_ocaml.js 133 4>>*/  /*<<jslib_js_of_ocaml.js 133 10>>*/ var
         p=
          a[i];
        o[ /*<<jslib_js_of_ocaml.js 134 6>>*/ p[1].toString()] = p[2]}
       /*<<jslib_js_of_ocaml.js 136 2>>*/ return o /*<<jslib_js_of_ocaml.js 137 0>>*/ }
     /*<<mlString.js 426 0>>*/ function caml_bytes_lessthan(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 427 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 428 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 429 2>>*/ return s1.c < s2.c?1:0 /*<<mlString.js 430 0>>*/ }
     /*<<gc.js 14 0>>*/ function caml_gc_quick_stat()
     { /*<<gc.js 15 2>>*/ return [0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0] /*<<gc.js 16 0>>*/ }
     /*<<io.js 292 0>>*/ function caml_ml_input_int(chan)
     { /*<<io.js 293 2>>*/ var
        /*<<io.js 293 8>>*/ s=chan.file.data,
        /*<<io.js 293 28>>*/ o=chan.offset;
       /*<<io.js 294 2>>*/ while
       (o + 3 >=  /*<<io.js 294 20>>*/ caml_ml_string_length(s))
        /*<<io.js 294 46>>*/ { /*<<io.js 295 4>>*/  /*<<io.js 295 10>>*/ var
         l=
           /*<<io.js 295 12>>*/ caml_ml_refill_input(chan);
         /*<<io.js 296 4>>*/ if(l == 0)
          /*<<io.js 296 16>>*/ caml_raise_end_of_file();
        s = chan.file.data;
        o = chan.offset}
       /*<<io.js 293 2>>*/  /*<<io.js 300 8>>*/ var
       r=
         /*<<io.js 300 11>>*/ caml_string_unsafe_get(s,o)
        <<
        24
        |
         /*<<io.js 300 49>>*/ caml_string_unsafe_get(s,o + 1)
        <<
        16
        |
         /*<<io.js 300 89>>*/ caml_string_unsafe_get(s,o + 2)
        <<
        8
        |
         /*<<io.js 300 128>>*/ caml_string_unsafe_get(s,o + 3);
      chan.offset += 4;
       /*<<io.js 302 2>>*/ return r /*<<io.js 303 0>>*/ }
     /*<<stdlib.js 1102 0>>*/ function caml_bswap16(x)
     { /*<<stdlib.js 1103 2>>*/ return (x & 255) << 8 | (x & 65280) >> 8 /*<<stdlib.js 1105 0>>*/ }
     /*<<io.js 169 0>>*/ function caml_ml_set_binary_mode(chan,mode)
     { /*<<io.js 170 2>>*/  /*<<io.js 170 11>>*/ var
       data=
        caml_global_data.fds[chan.fd];
      data.flags.text = !mode;
      data.flags.binary = mode;
       /*<<io.js 173 2>>*/ return 0 /*<<io.js 174 0>>*/ }
     /*<<stdlib.js 1010 0>>*/ function caml_final_register()
     { /*<<stdlib.js 1010 34>>*/ return 0 /*<<stdlib.js 1010 44>>*/ }
     /*<<stdlib.js 974 0>>*/ function caml_array_blit(a1,i1,a2,i2,len)
     { /*<<stdlib.js 975 2>>*/ if(i2 <= i1)
        /*<<stdlib.js 975 16>>*/ for
        ( /*<<stdlib.js 976 15>>*/ var j=1;j <= len;j++)
        a2[i2 + j] = a1[i1 + j];
      else
        /*<<stdlib.js 977 9>>*/ for
        ( /*<<stdlib.js 978 15>>*/ var j=len;j >= 1;j--)
        a2[i2 + j] = a1[i1 + j];
       /*<<stdlib.js 980 2>>*/ return 0 /*<<stdlib.js 981 0>>*/ }
     /*<<fs.js 77 0>>*/ function caml_sys_getcwd()
     { /*<<fs.js 77 29>>*/ return  /*<<fs.js 77 36>>*/ caml_new_string
              (caml_current_dir) /*<<fs.js 77 71>>*/ }
     /*<<stdlib.js 485 0>>*/ function caml_float_of_string(s)
     { /*<<stdlib.js 486 2>>*/ var res;
      s =  /*<<stdlib.js 487 6>>*/ caml_bytes_of_string(s);
      res = +s;
       /*<<stdlib.js 489 2>>*/ if(s.length > 0 && res === res)
        /*<<stdlib.js 489 39>>*/ return res;
      s =  /*<<stdlib.js 490 6>>*/ s.replace(/_/g,"");
      res = +s;
       /*<<stdlib.js 492 2>>*/ if
       (s.length
        >
        0
        &&
        res
        ===
        res
        ||
         /*<<stdlib.js 492 43>>*/ /^[+-]?nan$/i.test(s))
        /*<<stdlib.js 492 66>>*/ return res;
       /*<<stdlib.js 486 2>>*/  /*<<stdlib.js 493 8>>*/ var
       m=
         /*<<stdlib.js 493 10>>*/ /^ *([+-]?)0x([0-9a-f]+)\.?([0-9a-f]*)p([+-]?[0-9]+)/i.exec
         (s);
       /*<<stdlib.js 495 2>>*/ if(m)
        /*<<stdlib.js 495 7>>*/ { /*<<stdlib.js 496 4>>*/ var
          /*<<stdlib.js 496 11>>*/ m3=
           /*<<stdlib.js 496 13>>*/ m[3].replace(/0+$/,""),
          /*<<stdlib.js 497 17>>*/ mantissa=
           /*<<stdlib.js 497 19>>*/ parseInt(m[1] + m[2] + m3,16),
          /*<<stdlib.js 498 17>>*/ exponent=(m[4] | 0) - 4 * m3.length;
        res = mantissa *  /*<<stdlib.js 499 21>>*/ Math.pow(2,exponent);
         /*<<stdlib.js 500 4>>*/ return res}
       /*<<stdlib.js 502 2>>*/ if
       ( /*<<stdlib.js 502 5>>*/ /^\+?inf(inity)?$/i.test(s))
        /*<<stdlib.js 502 34>>*/ return Infinity;
       /*<<stdlib.js 503 2>>*/ if
       ( /*<<stdlib.js 503 5>>*/ /^-inf(inity)?$/i.test(s))
        /*<<stdlib.js 503 32>>*/ return -Infinity;
       /*<<stdlib.js 504 2>>*/ caml_failwith("float_of_string") /*<<stdlib.js 505 0>>*/ }
     /*<<stdlib.js 916 0>>*/ function caml_sys_const_big_endian()
     { /*<<stdlib.js 916 40>>*/ return 0 /*<<stdlib.js 916 50>>*/ }
     /*<<marshal.js 440 0>>*/ function caml_output_value_to_string(v,_fl)
     { /*<<marshal.js 442 2>>*/ return  /*<<marshal.js 442 9>>*/ caml_string_of_array
              ( /*<<marshal.js 442 31>>*/ caml_output_val(v)) /*<<marshal.js 443 0>>*/ }
     /*<<io.js 400 0>>*/ function caml_output_value(chan,v,_flags)
     { /*<<io.js 401 2>>*/  /*<<io.js 401 8>>*/ var
       s=
         /*<<io.js 401 10>>*/ caml_output_value_to_string(v);
       /*<<io.js 402 2>>*/ caml_ml_output
       (chan,s,0, /*<<io.js 402 26>>*/ caml_ml_string_length(s));
       /*<<io.js 403 2>>*/ return 0 /*<<io.js 404 0>>*/ }
     /*<<stdlib.js 935 0>>*/ function caml_sys_system_command(_cmd)
     { /*<<stdlib.js 936 2>>*/ return 127 /*<<stdlib.js 937 0>>*/ }
     /*<<bigarray.js 541 0>>*/ function caml_ba_get_3(ba,i0,i1,i2)
     { /*<<bigarray.js 542 4>>*/ return  /*<<bigarray.js 542 11>>*/ ba.get
              ([i0,i1,i2]) /*<<bigarray.js 543 0>>*/ }
     /*<<stdlib.js 177 0>>*/ function caml_js_error_of_exception(exn)
     { /*<<stdlib.js 178 2>>*/ if(exn.js_error)
        /*<<stdlib.js 178 19>>*/ return exn.js_error;
       /*<<stdlib.js 179 2>>*/ return null /*<<stdlib.js 180 0>>*/ }
     /*<<stdlib.js 297 0>>*/ function caml_check_bound(array,index)
     { /*<<stdlib.js 298 2>>*/ if(index >>> 0 >= array.length - 1)
        /*<<stdlib.js 298 39>>*/ caml_array_bound_error();
       /*<<stdlib.js 299 2>>*/ return array /*<<stdlib.js 300 0>>*/ }
     /*<<stdlib.js 753 0>>*/ function caml_hash_mix_int64(h,v)
     { /*<<stdlib.js 754 2>>*/ var
        /*<<stdlib.js 754 9>>*/ lo=v[1] | v[2] << 24,
        /*<<stdlib.js 755 9>>*/ hi=v[2] >>> 8 | v[3] << 16;
      h =  /*<<stdlib.js 756 6>>*/ caml_hash_mix_int(h,hi ^ lo);
       /*<<stdlib.js 757 2>>*/ return h /*<<stdlib.js 758 0>>*/ }
     /*<<stdlib.js 810 0>>*/ function caml_hash_mix_string(h,v)
     { /*<<stdlib.js 811 4>>*/ switch(v.t & 6)
       {default: /*<<stdlib.js 813 8>>*/ caml_convert_string_to_bytes(v);case 0:
         h =  /*<<stdlib.js 815 12>>*/ caml_hash_mix_string_str(h,v.c);
          /*<<stdlib.js 816 8>>*/ break;
        case 2:h =  /*<<stdlib.js 818 12>>*/ caml_hash_mix_string_arr(h,v.c)
        }
       /*<<stdlib.js 820 4>>*/ return h /*<<stdlib.js 821 0>>*/ }
     /*<<stdlib.js 828 0>>*/  /*<<stdlib.js 828 20>>*/ var
     HASH_QUEUE_SIZE=
      256;
     /*<<stdlib.js 829 0>>*/ function caml_hash(count,limit,seed,obj)
     { /*<<stdlib.js 830 4>>*/ var queue,rd,wr,sz,num,h,v,i,len;
      sz = limit;
       /*<<stdlib.js 832 4>>*/ if(sz < 0 || sz > HASH_QUEUE_SIZE)
       sz = HASH_QUEUE_SIZE;
      num = count;
      h = seed;
      queue = [obj];
      rd = 0;
      wr = 1;
       /*<<stdlib.js 836 4>>*/ while(rd < wr && num > 0)
        /*<<stdlib.js 836 31>>*/ {v = queue[rd++];
         /*<<stdlib.js 838 8>>*/ if(v instanceof Array && v[0] === (v[0] | 0))
          /*<<stdlib.js 838 53>>*/ switch(v[0])
          {case 248:
            h =  /*<<stdlib.js 842 20>>*/ caml_hash_mix_int(h,v[2]);
            num--;
             /*<<stdlib.js 844 16>>*/ break;
           case 250:queue[--rd] = v[1]; /*<<stdlib.js 848 16>>*/ break;
           case 255:
            h =  /*<<stdlib.js 851 20>>*/ caml_hash_mix_int64(h,v);
            num--;
             /*<<stdlib.js 853 16>>*/ break;
           default:
             /*<<stdlib.js 855 16>>*/  /*<<stdlib.js 855 24>>*/ var
             tag=
              v.length - 1 << 10 | v[0];
            h =  /*<<stdlib.js 856 20>>*/ caml_hash_mix_int(h,tag);
             /*<<stdlib.js 857 16>>*/ for(i = 1,len = v.length;i < len;i++)
              /*<<stdlib.js 857 58>>*/ { /*<<stdlib.js 858 20>>*/ if(wr >= sz)
                /*<<stdlib.js 858 34>>*/ break;
              queue[wr++] = v[i]}
             /*<<stdlib.js 861 16>>*/ break}
        else
          /*<<stdlib.js 863 15>>*/ if(v instanceof MlString)
           /*<<stdlib.js 863 42>>*/ {h
           =
            /*<<stdlib.js 864 16>>*/ caml_hash_mix_string(h,v);
           num--}
         else
           /*<<stdlib.js 866 15>>*/ if(v === (v | 0))
            /*<<stdlib.js 866 32>>*/ {h
            =
             /*<<stdlib.js 868 16>>*/ caml_hash_mix_int(h,v + v + 1);
            num--}
          else
            /*<<stdlib.js 870 15>>*/ if(v === +v)
             /*<<stdlib.js 870 29>>*/ {h
             =
              /*<<stdlib.js 872 16>>*/ caml_hash_mix_float(h,v);
             num--}}
      h =  /*<<stdlib.js 876 8>>*/ caml_hash_mix_final(h);
       /*<<stdlib.js 877 4>>*/ return h & 1073741823 /*<<stdlib.js 878 0>>*/ }
     /*<<bigstring.js 44 0>>*/ function bigstring_memcmp_stub
     (v_s1,v_s1_pos,v_s2,v_s2_pos,v_len)
     { /*<<bigstring.js 45 2>>*/ for
       ( /*<<bigstring.js 45 13>>*/ var i=0;i < v_len;i++)
        /*<<bigstring.js 45 34>>*/ { /*<<bigstring.js 46 4>>*/ var
          /*<<bigstring.js 46 10>>*/ a=
           /*<<bigstring.js 46 12>>*/ caml_ba_get_1(v_s1,v_s1_pos + i),
          /*<<bigstring.js 47 10>>*/ b=
           /*<<bigstring.js 47 12>>*/ caml_ba_get_1(v_s2,v_s2_pos + i);
         /*<<bigstring.js 48 4>>*/ if(a < b)
          /*<<bigstring.js 48 15>>*/ return -1;
         /*<<bigstring.js 49 4>>*/ if(a > b)
          /*<<bigstring.js 49 15>>*/ return 1}
       /*<<bigstring.js 51 2>>*/ return 0 /*<<bigstring.js 52 0>>*/ }
     /*<<stdlib.js 223 0>>*/ function caml_obj_tag(x)
     { /*<<stdlib.js 223 28>>*/ return x instanceof Array
              ?x[0]
              :x instanceof MlString?252:1e3 /*<<stdlib.js 223 95>>*/ }
     /*<<jslib_js_of_ocaml.js 141 0>>*/ function caml_js_export_var()
     { /*<<jslib_js_of_ocaml.js 142 2>>*/ return typeof module
              !==
              "undefined"
              &&
              module
              &&
              module.exports
              ?module.exports
              :joo_global_object /*<<jslib_js_of_ocaml.js 146 0>>*/ }
     /*<<io.js 387 0>>*/  /*<<io.js 387 25>>*/ var
     caml_ml_output_bytes=
      caml_ml_output;
     /*<<jslib.js 91 0>>*/ function js_print_stdout(s)
     { /*<<jslib.js 92 2>>*/  /*<<jslib.js 92 8>>*/ var g=joo_global_object;
       /*<<jslib.js 93 2>>*/ if
       (g.process && g.process.stdout && g.process.stdout.write)
        /*<<jslib.js 93 63>>*/  /*<<jslib.js 94 4>>*/ g.process.stdout.write
        (s);
      else
        /*<<jslib.js 95 9>>*/ { /*<<jslib.js 98 2>>*/ if
         ( /*<<jslib.js 98 5>>*/ s.charCodeAt(s.length - 1) == 10)
         s =  /*<<jslib.js 99 8>>*/ s.substr(0,s.length - 1);
         /*<<jslib.js 100 2>>*/  /*<<jslib.js 100 8>>*/ var v=g.console;
        v && v.log &&  /*<<jslib.js 101 17>>*/ v.log(s)} /*<<jslib.js 103 0>>*/ }
     /*<<ieee_754.js 193 0>>*/ function caml_frexp_float(x)
     { /*<<ieee_754.js 194 2>>*/ if
       (x == 0 || ! /*<<ieee_754.js 194 19>>*/ isFinite(x))
        /*<<ieee_754.js 194 32>>*/ return [0,x,0];
       /*<<ieee_754.js 195 2>>*/  /*<<ieee_754.js 195 10>>*/ var neg=x < 0;
       /*<<ieee_754.js 196 2>>*/ if(neg)x = -x;
       /*<<ieee_754.js 195 2>>*/  /*<<ieee_754.js 197 10>>*/ var
       exp=
         /*<<ieee_754.js 197 12>>*/ jsoo_floor_log2(x) + 1;
      x *=  /*<<ieee_754.js 198 7>>*/ Math.pow(2,-exp);
       /*<<ieee_754.js 199 2>>*/ if(x < 0.5)
        /*<<ieee_754.js 199 15>>*/ {x *= 2;exp -= 1}
       /*<<ieee_754.js 200 2>>*/ if(neg)x = -x;
       /*<<ieee_754.js 201 2>>*/ return [0,x,exp] /*<<ieee_754.js 202 0>>*/ }
     /*<<ieee_754.js 215 0>>*/ function caml_copysign_float(x,y)
     { /*<<ieee_754.js 216 2>>*/ if(y == 0)y = 1 / y;
      x =  /*<<ieee_754.js 217 6>>*/ Math.abs(x);
       /*<<ieee_754.js 218 2>>*/ return y < 0?-x:x /*<<ieee_754.js 219 0>>*/ }
     /*<<bigarray.js 547 0>>*/ function caml_ba_set_generic(ba,index,v)
     { /*<<bigarray.js 548 4>>*/ return  /*<<bigarray.js 548 11>>*/ ba.set
              ( /*<<bigarray.js 548 18>>*/ caml_js_from_array(index),v) /*<<bigarray.js 549 0>>*/ }
     /*<<io.js 425 0>>*/ function caml_ml_pos_out_64(chan)
     { /*<<io.js 426 2>>*/ return  /*<<io.js 426 9>>*/ caml_int64_of_float
              (chan.offset) /*<<io.js 427 0>>*/ }
     /*<<mlString.js 402 0>>*/ function caml_string_lessequal(s1,s2)
     {s1.t
      &
      6
      &&
       /*<<mlString.js 403 16>>*/ caml_convert_string_to_bytes(s1);
      s2.t
      &
      6
      &&
       /*<<mlString.js 404 16>>*/ caml_convert_string_to_bytes(s2);
       /*<<mlString.js 405 2>>*/ return s1.c <= s2.c?1:0 /*<<mlString.js 406 0>>*/ }
     /*<<mlString.js 434 0>>*/ function caml_string_greaterequal(s1,s2)
     { /*<<mlString.js 435 2>>*/ return  /*<<mlString.js 435 9>>*/ caml_string_lessequal
              (s2,s1) /*<<mlString.js 436 0>>*/ }
     /*<<io.js 322 0>>*/ function caml_ml_pos_in(chan)
     { /*<<io.js 322 31>>*/ return chan.offset /*<<io.js 322 49>>*/ }
     /*<<int64.js 105 0>>*/ function caml_int64_and(x,y)
     { /*<<int64.js 106 2>>*/ return [255,x[1] & y[1],x[2] & y[2],x[3] & y[3]] /*<<int64.js 107 0>>*/ }
     /*<<stdlib.js 918 0>>*/ function caml_sys_const_word_size()
     { /*<<stdlib.js 918 39>>*/ return 32 /*<<stdlib.js 918 50>>*/ }
     /*<<jslib_js_of_ocaml.js 66 0>>*/ function caml_js_new(c,a)
     { /*<<jslib_js_of_ocaml.js 67 2>>*/ switch(a.length)
       {case 1: /*<<jslib_js_of_ocaml.js 68 10>>*/ return new c();
        case 2: /*<<jslib_js_of_ocaml.js 69 10>>*/ return new c(a[1]);
        case 3: /*<<jslib_js_of_ocaml.js 70 10>>*/ return new c(a[1],a[2]);
        case 4:
          /*<<jslib_js_of_ocaml.js 71 10>>*/ return new c(a[1],a[2],a[3]);
        case 5:
          /*<<jslib_js_of_ocaml.js 72 10>>*/ return new c(a[1],a[2],a[3],a[4]);
        case 6:
          /*<<jslib_js_of_ocaml.js 73 10>>*/ return new
                 c
                 (a[1],a[2],a[3],a[4],a[5]);
        case 7:
          /*<<jslib_js_of_ocaml.js 74 10>>*/ return new
                 c
                 (a[1],a[2],a[3],a[4],a[5],a[6]);
        case 8:
          /*<<jslib_js_of_ocaml.js 75 10>>*/ return new
                 c
                 (a[1],a[2],a[3],a[4],a[5],a[6],a[7])
        }
       /*<<jslib_js_of_ocaml.js 77 2>>*/ function F()
       { /*<<jslib_js_of_ocaml.js 77 17>>*/ return  /*<<jslib_js_of_ocaml.js 77 24>>*/ c.apply
                (this,
                  /*<<jslib_js_of_ocaml.js 77 38>>*/ caml_js_from_array(a)) /*<<jslib_js_of_ocaml.js 77 62>>*/ }
      F.prototype = c.prototype;
       /*<<jslib_js_of_ocaml.js 79 2>>*/ return new F() /*<<jslib_js_of_ocaml.js 80 0>>*/ }
     /*<<stdlib.js 599 0>>*/ function caml_format_int(fmt,i)
     { /*<<stdlib.js 600 2>>*/ if
       ( /*<<stdlib.js 600 6>>*/ caml_bytes_of_string(fmt) == "%d")
        /*<<stdlib.js 600 41>>*/ return  /*<<stdlib.js 600 48>>*/ caml_new_string
               ("" + i);
       /*<<stdlib.js 601 2>>*/  /*<<stdlib.js 601 8>>*/ var
       f=
         /*<<stdlib.js 601 10>>*/ caml_parse_format(fmt);
       /*<<stdlib.js 602 2>>*/ if(i < 0)
        /*<<stdlib.js 602 13>>*/ if(f.signedconv)
         /*<<stdlib.js 602 33>>*/ {f.sign = -1;i = -i}
       else
        i >>>= 0;
       /*<<stdlib.js 601 2>>*/  /*<<stdlib.js 603 8>>*/ var
       s=
         /*<<stdlib.js 603 10>>*/ i.toString(f.base);
       /*<<stdlib.js 604 2>>*/ if(f.prec >= 0)
        /*<<stdlib.js 604 19>>*/ {f.filler = " ";
         /*<<stdlib.js 606 4>>*/  /*<<stdlib.js 606 10>>*/ var
         n=
          f.prec - s.length;
         /*<<stdlib.js 607 4>>*/ if(n > 0)
         s =  /*<<stdlib.js 607 19>>*/ caml_str_repeat(n,"0") + s}
       /*<<stdlib.js 609 2>>*/ return  /*<<stdlib.js 609 9>>*/ caml_finish_formatting
              (f,s) /*<<stdlib.js 610 0>>*/ }
     /*<<mlString.js 347 0>>*/ function caml_create_bytes(len)
     { /*<<mlString.js 348 2>>*/ if(len < 0)
        /*<<mlString.js 348 15>>*/ caml_invalid_argument("Bytes.create");
       /*<<mlString.js 349 2>>*/ return new MlString(len?2:9,"",len) /*<<mlString.js 350 0>>*/ }
     /*<<jslib_js_of_ocaml.js 32 0>>*/ function caml_js_from_string(s)
     { /*<<jslib_js_of_ocaml.js 32 34>>*/ return  /*<<jslib_js_of_ocaml.js 32 41>>*/ s.toString
              () /*<<jslib_js_of_ocaml.js 32 55>>*/ }
     /*<<stdlib.js 242 0>>*/ function caml_obj_truncate(x,s)
     { /*<<stdlib.js 243 2>>*/ if(s <= 0 || s + 1 > x.length)
        /*<<stdlib.js 244 4>>*/ caml_invalid_argument("Obj.truncate");
       /*<<stdlib.js 245 2>>*/ if(x.length != s + 1)x.length = s + 1;
       /*<<stdlib.js 246 2>>*/ return 0 /*<<stdlib.js 247 0>>*/ }
     /*<<bigarray.js 608 0>>*/ function caml_ba_sub(ba,ofs,len)
     { /*<<bigarray.js 609 4>>*/ return  /*<<bigarray.js 609 11>>*/ ba.sub
              (ofs,len) /*<<bigarray.js 610 0>>*/ }
     /*<<gc.js 8 0>>*/ function caml_gc_full_major()
     { /*<<gc.js 8 31>>*/ return 0 /*<<gc.js 8 39>>*/ }
     /*<<int64.js 100 0>>*/ function caml_int64_is_minus_one(x)
     { /*<<int64.js 101 2>>*/ return x[3]
             ==
             65535
             &&
             (x[1] & x[2])
             ==
             16777215 /*<<int64.js 102 0>>*/ }
     /*<<io.js 113 0>>*/ function caml_std_output(chan,s)
     { /*<<io.js 114 2>>*/ var
        /*<<io.js 114 10>>*/ str= /*<<io.js 114 12>>*/ caml_new_string(s),
        /*<<io.js 115 11>>*/ slen=
         /*<<io.js 115 13>>*/ caml_ml_string_length(str),
        /*<<io.js 116 11>>*/ clen=
         /*<<io.js 116 13>>*/ caml_ml_string_length(chan.file.data),
        /*<<io.js 117 13>>*/ offset=chan.offset;
       /*<<io.js 118 2>>*/ if(offset + slen >= clen)
        /*<<io.js 118 28>>*/ { /*<<io.js 119 4>>*/  /*<<io.js 119 16>>*/ var
         new_str=
           /*<<io.js 119 18>>*/ caml_create_string(offset + slen);
         /*<<io.js 120 4>>*/ caml_blit_string(chan.file.data,0,new_str,0,clen);
         /*<<io.js 121 4>>*/ caml_blit_string(str,0,new_str,offset,slen);
        chan.file.data = new_str}
      chan.offset += slen;
       /*<<io.js 125 2>>*/ chan.file.modified();
       /*<<io.js 126 2>>*/ return 0 /*<<io.js 127 0>>*/ }
     /*<<io.js 129 0>>*/ function caml_ml_open_descriptor_out(fd)
     { /*<<io.js 130 2>>*/ var output;
       /*<<io.js 131 2>>*/ switch(fd)
       {case 1:output = js_print_stdout; /*<<io.js 132 35>>*/ break;
        case 2:output = js_print_stderr; /*<<io.js 133 35>>*/ break;
        default:output = caml_std_output}
       /*<<io.js 130 2>>*/  /*<<io.js 136 11>>*/ var
       data=
        caml_global_data.fds[fd];
       /*<<io.js 137 2>>*/ if(data.flags.rdonly)
        /*<<io.js 137 24>>*/ caml_raise_sys_error("fd " + fd + " is readonly");
       /*<<io.js 130 2>>*/  /*<<io.js 138 14>>*/ var
       channel=
        {file:data.file,
         offset:data.offset,
         fd:fd,
         opened:true,
         buffer:"",
         output:output};
      caml_ml_out_channels[channel.fd] = channel;
       /*<<io.js 148 2>>*/ return channel /*<<io.js 149 0>>*/ }
     /*<<stdlib.js 963 0>>*/ function caml_array_concat(l)
     { /*<<stdlib.js 964 2>>*/  /*<<stdlib.js 964 8>>*/ var a=[0];
       /*<<stdlib.js 965 2>>*/ while(l !== 0)
        /*<<stdlib.js 965 18>>*/ { /*<<stdlib.js 966 4>>*/  /*<<stdlib.js 966 10>>*/ var
         b=
          l[1];
         /*<<stdlib.js 967 4>>*/ for
         ( /*<<stdlib.js 967 15>>*/ var i=1;i < b.length;i++)
          /*<<stdlib.js 967 39>>*/ a.push(b[i]);
        l = l[2]}
       /*<<stdlib.js 970 2>>*/ return a /*<<stdlib.js 971 0>>*/ }
     /*<<bigarray.js 559 0>>*/ function caml_ba_uint8_set32(ba,i0,v)
     { /*<<bigarray.js 560 4>>*/ ba.set1(i0,v & 255);
       /*<<bigarray.js 561 4>>*/ ba.set1(i0 + 1,v >>> 8 & 255);
       /*<<bigarray.js 562 4>>*/ ba.set1(i0 + 2,v >>> 16 & 255);
       /*<<bigarray.js 563 4>>*/ ba.set1(i0 + 3,v >>> 24 & 255);
       /*<<bigarray.js 564 4>>*/ return 0 /*<<bigarray.js 565 0>>*/ }
     /*<<stdlib.js 930 0>>*/ function caml_sys_const_ostype_unix()
     { /*<<stdlib.js 930 41>>*/ return 1 /*<<stdlib.js 930 51>>*/ }
     /*<<mlString.js 510 0>>*/  /*<<mlString.js 510 20>>*/ var
     caml_blit_bytes=
      caml_blit_string;
     /*<<bigstring.js 79 0>>*/ function bigstring_marshal_data_size_stub
     (s,ofs)
     { /*<<bigstring.js 80 2>>*/ if
       ( /*<<bigstring.js 80 6>>*/ caml_ba_uint8_get32(s,ofs)
        !=
        (2224400062 | 0))
        /*<<bigstring.js 81 4>>*/ caml_failwith
        ("Marshal.data_size: bad object");
       /*<<bigstring.js 82 2>>*/ return  /*<<bigstring.js 82 10>>*/ caml_ba_uint8_get32
              (s,ofs + 4) /*<<bigstring.js 83 0>>*/ }
     /*<<stdlib.js 312 0>>*/ function caml_make_float_vect(len)
     { /*<<stdlib.js 313 2>>*/ var
        /*<<stdlib.js 313 10>>*/ len=len + 1 | 0,
        /*<<stdlib.js 314 8>>*/ b=new Array(len);
      b[0] = 254;
       /*<<stdlib.js 316 2>>*/ for
       ( /*<<stdlib.js 316 13>>*/ var i=1;i < len;i++)
       b[i] = 0;
       /*<<stdlib.js 317 2>>*/ return b /*<<stdlib.js 318 0>>*/ }
     /*<<io.js 408 0>>*/ function caml_ml_seek_out(chan,pos)
     {chan.offset = pos; /*<<io.js 410 2>>*/ return 0 /*<<io.js 411 0>>*/ }
     /*<<stdlib.js 419 0>>*/ function caml_greaterequal(x,y)
     { /*<<stdlib.js 419 36>>*/ return +( /*<<stdlib.js 419 45>>*/ caml_compare_val
               (x,y,false)
              >=
              0) /*<<stdlib.js 419 80>>*/ }
     /*<<jslib.js 36 0>>*/ function caml_js_typeof(o)
     { /*<<jslib.js 36 29>>*/ return typeof o /*<<jslib.js 36 46>>*/ }
     /*<<jslib_js_of_ocaml.js 101 0>>*/ function
     caml_js_wrap_meth_callback_unsafe
     (f)
     { /*<<jslib_js_of_ocaml.js 102 2>>*/ return function()
       { /*<<jslib_js_of_ocaml.js 102 23>>*/ f.apply
         (null,
           /*<<jslib_js_of_ocaml.js 102 37>>*/ raw_array_cons(arguments,this)) /*<<jslib_js_of_ocaml.js 102 9>>*/ } /*<<jslib_js_of_ocaml.js 103 0>>*/ }
     /*<<bigarray.js 491 0>>*/ function caml_ba_dim_3(ba)
     { /*<<bigarray.js 492 4>>*/ return  /*<<bigarray.js 492 11>>*/ ba.nth_dim
              (2) /*<<bigarray.js 493 0>>*/ }
     /*<<stdlib.js 1018 0>>*/ function caml_get_exception_raw_backtrace()
     { /*<<stdlib.js 1018 47>>*/ return [0] /*<<stdlib.js 1018 59>>*/ }
     /*<<ieee_754.js 228 0>>*/ function caml_log1p_float(x)
     { /*<<ieee_754.js 229 2>>*/ var
        /*<<ieee_754.js 229 8>>*/ y=1 + x,
        /*<<ieee_754.js 229 19>>*/ z=y - 1;
       /*<<ieee_754.js 230 2>>*/ return z == 0
              ?x
              :x *  /*<<ieee_754.js 230 19>>*/ Math.log(y) / z /*<<ieee_754.js 231 0>>*/ }
     /*<<int64.js 110 0>>*/ function caml_int64_or(x,y)
     { /*<<int64.js 111 2>>*/ return [255,x[1] | y[1],x[2] | y[2],x[3] | y[3]] /*<<int64.js 112 0>>*/ }
     /*<<jslib_js_of_ocaml.js 23 0>>*/ function caml_js_from_bool(x)
     { /*<<jslib_js_of_ocaml.js 23 32>>*/ return !!x /*<<jslib_js_of_ocaml.js 23 44>>*/ }
     /*<<io.js 90 0>>*/ function caml_ml_set_channel_name()
     { /*<<io.js 91 2>>*/ return 0 /*<<io.js 92 0>>*/ }
     /*<<stdlib.js 250 0>>*/ function caml_lazy_make_forward(v)
     { /*<<stdlib.js 250 38>>*/ return [250,v] /*<<stdlib.js 250 55>>*/ }
     /*<<jslib.js 39 0>>*/ function caml_js_on_ie()
     { /*<<jslib.js 40 2>>*/  /*<<jslib.js 40 9>>*/ var
       ua=
        joo_global_object.navigator?joo_global_object.navigator.userAgent:"";
       /*<<jslib.js 42 2>>*/ return  /*<<jslib.js 42 9>>*/ ua.indexOf("MSIE")
             !=
             -1
             &&
              /*<<jslib.js 42 37>>*/ ua.indexOf("Opera")
             !=
             0 /*<<jslib.js 43 0>>*/ }
     /*<<bigarray.js 466 0>>*/ function caml_ba_layout(ba)
     { /*<<bigarray.js 467 4>>*/ return ba.layout /*<<bigarray.js 468 0>>*/ }
     /*<<md5.js 32 0>>*/  /*<<md5.js 32 20>>*/ var
     caml_md5_string=
       /*<<md5.js 33 0>>*/ function()
        { /*<<md5.js 34 2>>*/ function add(x,y)
          { /*<<md5.js 34 24>>*/ return x + y | 0 /*<<md5.js 34 44>>*/ }
          /*<<md5.js 35 2>>*/ function xx(q,a,b,x,s,t)
          {a
           =
            /*<<md5.js 36 8>>*/ add
            ( /*<<md5.js 36 12>>*/ add(a,q), /*<<md5.js 36 23>>*/ add(x,t));
            /*<<md5.js 37 4>>*/ return  /*<<md5.js 37 11>>*/ add
                   (a << s | a >>> 32 - s,b) /*<<md5.js 38 2>>*/ }
          /*<<md5.js 39 2>>*/ function ff(a,b,c,d,x,s,t)
          { /*<<md5.js 40 4>>*/ return  /*<<md5.js 40 11>>*/ xx
                   (b & c | ~b & d,a,b,x,s,t) /*<<md5.js 41 2>>*/ }
          /*<<md5.js 42 2>>*/ function gg(a,b,c,d,x,s,t)
          { /*<<md5.js 43 4>>*/ return  /*<<md5.js 43 11>>*/ xx
                   (b & d | c & ~d,a,b,x,s,t) /*<<md5.js 44 2>>*/ }
          /*<<md5.js 45 2>>*/ function hh(a,b,c,d,x,s,t)
          { /*<<md5.js 45 31>>*/ return  /*<<md5.js 45 38>>*/ xx
                   (b ^ c ^ d,a,b,x,s,t) /*<<md5.js 45 68>>*/ }
          /*<<md5.js 46 2>>*/ function ii(a,b,c,d,x,s,t)
          { /*<<md5.js 46 31>>*/ return  /*<<md5.js 46 38>>*/ xx
                   (c ^ (b | ~d),a,b,x,s,t) /*<<md5.js 46 73>>*/ }
          /*<<md5.js 48 2>>*/ function md5(buffer,length)
          { /*<<md5.js 49 4>>*/  /*<<md5.js 49 10>>*/ var i=length;
           buffer[i >> 2] |= 128 << 8 * (i & 3);
            /*<<md5.js 51 4>>*/ for(i = (i & ~3) + 8;(i & 63) < 60;i += 4)
            buffer[(i >> 2) - 1] = 0;
           buffer[(i >> 2) - 1] = length << 3;
           buffer[i >> 2] = length >> 29 & 536870911;
            /*<<md5.js 49 4>>*/  /*<<md5.js 56 10>>*/ var
            w=
             [1732584193,4023233417,2562383102,271733878];
            /*<<md5.js 58 4>>*/ for(i = 0;i < buffer.length;i += 16)
             /*<<md5.js 58 43>>*/ { /*<<md5.js 59 6>>*/ var
               /*<<md5.js 59 12>>*/ a=w[0],
               /*<<md5.js 59 22>>*/ b=w[1],
               /*<<md5.js 59 32>>*/ c=w[2],
               /*<<md5.js 59 42>>*/ d=w[3];
             a =  /*<<md5.js 61 10>>*/ ff(a,b,c,d,buffer[i + 0],7,3614090360);
             d
             =
              /*<<md5.js 62 10>>*/ ff(d,a,b,c,buffer[i + 1],12,3905402710);
             c =  /*<<md5.js 63 10>>*/ ff(c,d,a,b,buffer[i + 2],17,606105819);
             b
             =
              /*<<md5.js 64 10>>*/ ff(b,c,d,a,buffer[i + 3],22,3250441966);
             a =  /*<<md5.js 65 10>>*/ ff(a,b,c,d,buffer[i + 4],7,4118548399);
             d
             =
              /*<<md5.js 66 10>>*/ ff(d,a,b,c,buffer[i + 5],12,1200080426);
             c
             =
              /*<<md5.js 67 10>>*/ ff(c,d,a,b,buffer[i + 6],17,2821735955);
             b
             =
              /*<<md5.js 68 10>>*/ ff(b,c,d,a,buffer[i + 7],22,4249261313);
             a =  /*<<md5.js 69 10>>*/ ff(a,b,c,d,buffer[i + 8],7,1770035416);
             d
             =
              /*<<md5.js 70 10>>*/ ff(d,a,b,c,buffer[i + 9],12,2336552879);
             c
             =
              /*<<md5.js 71 10>>*/ ff(c,d,a,b,buffer[i + 10],17,4294925233);
             b
             =
              /*<<md5.js 72 10>>*/ ff(b,c,d,a,buffer[i + 11],22,2304563134);
             a
             =
              /*<<md5.js 73 10>>*/ ff(a,b,c,d,buffer[i + 12],7,1804603682);
             d
             =
              /*<<md5.js 74 10>>*/ ff(d,a,b,c,buffer[i + 13],12,4254626195);
             c
             =
              /*<<md5.js 75 10>>*/ ff(c,d,a,b,buffer[i + 14],17,2792965006);
             b
             =
              /*<<md5.js 76 10>>*/ ff(b,c,d,a,buffer[i + 15],22,1236535329);
             a =  /*<<md5.js 78 10>>*/ gg(a,b,c,d,buffer[i + 1],5,4129170786);
             d =  /*<<md5.js 79 10>>*/ gg(d,a,b,c,buffer[i + 6],9,3225465664);
             c
             =
              /*<<md5.js 80 10>>*/ gg(c,d,a,b,buffer[i + 11],14,643717713);
             b
             =
              /*<<md5.js 81 10>>*/ gg(b,c,d,a,buffer[i + 0],20,3921069994);
             a =  /*<<md5.js 82 10>>*/ gg(a,b,c,d,buffer[i + 5],5,3593408605);
             d =  /*<<md5.js 83 10>>*/ gg(d,a,b,c,buffer[i + 10],9,38016083);
             c
             =
              /*<<md5.js 84 10>>*/ gg(c,d,a,b,buffer[i + 15],14,3634488961);
             b
             =
              /*<<md5.js 85 10>>*/ gg(b,c,d,a,buffer[i + 4],20,3889429448);
             a =  /*<<md5.js 86 10>>*/ gg(a,b,c,d,buffer[i + 9],5,568446438);
             d
             =
              /*<<md5.js 87 10>>*/ gg(d,a,b,c,buffer[i + 14],9,3275163606);
             c
             =
              /*<<md5.js 88 10>>*/ gg(c,d,a,b,buffer[i + 3],14,4107603335);
             b
             =
              /*<<md5.js 89 10>>*/ gg(b,c,d,a,buffer[i + 8],20,1163531501);
             a
             =
              /*<<md5.js 90 10>>*/ gg(a,b,c,d,buffer[i + 13],5,2850285829);
             d =  /*<<md5.js 91 10>>*/ gg(d,a,b,c,buffer[i + 2],9,4243563512);
             c
             =
              /*<<md5.js 92 10>>*/ gg(c,d,a,b,buffer[i + 7],14,1735328473);
             b
             =
              /*<<md5.js 93 10>>*/ gg(b,c,d,a,buffer[i + 12],20,2368359562);
             a =  /*<<md5.js 95 10>>*/ hh(a,b,c,d,buffer[i + 5],4,4294588738);
             d
             =
              /*<<md5.js 96 10>>*/ hh(d,a,b,c,buffer[i + 8],11,2272392833);
             c
             =
              /*<<md5.js 97 10>>*/ hh(c,d,a,b,buffer[i + 11],16,1839030562);
             b
             =
              /*<<md5.js 98 10>>*/ hh(b,c,d,a,buffer[i + 14],23,4259657740);
             a =  /*<<md5.js 99 10>>*/ hh(a,b,c,d,buffer[i + 1],4,2763975236);
             d
             =
              /*<<md5.js 100 10>>*/ hh(d,a,b,c,buffer[i + 4],11,1272893353);
             c
             =
              /*<<md5.js 101 10>>*/ hh(c,d,a,b,buffer[i + 7],16,4139469664);
             b
             =
              /*<<md5.js 102 10>>*/ hh(b,c,d,a,buffer[i + 10],23,3200236656);
             a
             =
              /*<<md5.js 103 10>>*/ hh(a,b,c,d,buffer[i + 13],4,681279174);
             d
             =
              /*<<md5.js 104 10>>*/ hh(d,a,b,c,buffer[i + 0],11,3936430074);
             c
             =
              /*<<md5.js 105 10>>*/ hh(c,d,a,b,buffer[i + 3],16,3572445317);
             b =  /*<<md5.js 106 10>>*/ hh(b,c,d,a,buffer[i + 6],23,76029189);
             a
             =
              /*<<md5.js 107 10>>*/ hh(a,b,c,d,buffer[i + 9],4,3654602809);
             d
             =
              /*<<md5.js 108 10>>*/ hh(d,a,b,c,buffer[i + 12],11,3873151461);
             c
             =
              /*<<md5.js 109 10>>*/ hh(c,d,a,b,buffer[i + 15],16,530742520);
             b
             =
              /*<<md5.js 110 10>>*/ hh(b,c,d,a,buffer[i + 2],23,3299628645);
             a
             =
              /*<<md5.js 112 10>>*/ ii(a,b,c,d,buffer[i + 0],6,4096336452);
             d
             =
              /*<<md5.js 113 10>>*/ ii(d,a,b,c,buffer[i + 7],10,1126891415);
             c
             =
              /*<<md5.js 114 10>>*/ ii(c,d,a,b,buffer[i + 14],15,2878612391);
             b
             =
              /*<<md5.js 115 10>>*/ ii(b,c,d,a,buffer[i + 5],21,4237533241);
             a
             =
              /*<<md5.js 116 10>>*/ ii(a,b,c,d,buffer[i + 12],6,1700485571);
             d
             =
              /*<<md5.js 117 10>>*/ ii(d,a,b,c,buffer[i + 3],10,2399980690);
             c
             =
              /*<<md5.js 118 10>>*/ ii(c,d,a,b,buffer[i + 10],15,4293915773);
             b
             =
              /*<<md5.js 119 10>>*/ ii(b,c,d,a,buffer[i + 1],21,2240044497);
             a
             =
              /*<<md5.js 120 10>>*/ ii(a,b,c,d,buffer[i + 8],6,1873313359);
             d
             =
              /*<<md5.js 121 10>>*/ ii(d,a,b,c,buffer[i + 15],10,4264355552);
             c
             =
              /*<<md5.js 122 10>>*/ ii(c,d,a,b,buffer[i + 6],15,2734768916);
             b
             =
              /*<<md5.js 123 10>>*/ ii(b,c,d,a,buffer[i + 13],21,1309151649);
             a
             =
              /*<<md5.js 124 10>>*/ ii(a,b,c,d,buffer[i + 4],6,4149444226);
             d
             =
              /*<<md5.js 125 10>>*/ ii(d,a,b,c,buffer[i + 11],10,3174756917);
             c
             =
              /*<<md5.js 126 10>>*/ ii(c,d,a,b,buffer[i + 2],15,718787259);
             b
             =
              /*<<md5.js 127 10>>*/ ii(b,c,d,a,buffer[i + 9],21,3951481745);
             w[0] =  /*<<md5.js 129 13>>*/ add(a,w[0]);
             w[1] =  /*<<md5.js 130 13>>*/ add(b,w[1]);
             w[2] =  /*<<md5.js 131 13>>*/ add(c,w[2]);
             w[3] =  /*<<md5.js 132 13>>*/ add(d,w[3])}
            /*<<md5.js 49 4>>*/  /*<<md5.js 135 10>>*/ var t=new Array(16);
            /*<<md5.js 136 4>>*/ for( /*<<md5.js 136 15>>*/ var i=0;i < 4;i++)
             /*<<md5.js 137 6>>*/ for
             ( /*<<md5.js 137 17>>*/ var j=0;j < 4;j++)
             t[i * 4 + j] = w[i] >> 8 * j & 255;
            /*<<md5.js 139 4>>*/ return t /*<<md5.js 140 2>>*/ }
          /*<<md5.js 142 2>>*/ return function(s,ofs,len)
          { /*<<md5.js 145 4>>*/  /*<<md5.js 145 12>>*/ var buf=[];
            /*<<md5.js 146 4>>*/ switch(s.t & 6)
            {default: /*<<md5.js 148 6>>*/ caml_convert_string_to_bytes(s);case 0:
               /*<<md5.js 150 6>>*/  /*<<md5.js 150 12>>*/ var b=s.c;
               /*<<md5.js 151 6>>*/ for
               ( /*<<md5.js 151 17>>*/ var i=0;i < len;i += 4)
                /*<<md5.js 151 37>>*/ { /*<<md5.js 152 8>>*/  /*<<md5.js 152 14>>*/ var
                 j=
                  i + ofs;
                buf[i >> 2]
                =
                 /*<<md5.js 154 10>>*/ b.charCodeAt(j)
                |
                 /*<<md5.js 154 29>>*/ b.charCodeAt(j + 1)
                <<
                8
                |
                 /*<<md5.js 155 11>>*/ b.charCodeAt(j + 2)
                <<
                16
                |
                 /*<<md5.js 155 39>>*/ b.charCodeAt(j + 3)
                <<
                24}
               /*<<md5.js 157 6>>*/ for(;i < len;i++)
               buf[i >> 2]
               |=
                /*<<md5.js 157 40>>*/ b.charCodeAt(i + ofs)
               <<
               8
               *
               (i & 3);
               /*<<md5.js 158 6>>*/ break;
             case 4:
               /*<<md5.js 160 6>>*/  /*<<md5.js 160 12>>*/ var a=s.c;
               /*<<md5.js 161 6>>*/ for
               ( /*<<md5.js 161 17>>*/ var i=0;i < len;i += 4)
                /*<<md5.js 161 37>>*/ { /*<<md5.js 162 8>>*/  /*<<md5.js 162 14>>*/ var
                 j=
                  i + ofs;
                buf[i >> 2]
                =
                a[j]
                |
                a[j + 1]
                <<
                8
                |
                a[j + 2]
                <<
                16
                |
                a[j + 3]
                <<
                24}
               /*<<md5.js 165 6>>*/ for(;i < len;i++)
               buf[i >> 2] |= a[i + ofs] << 8 * (i & 3)
             }
            /*<<md5.js 167 4>>*/ return  /*<<md5.js 167 11>>*/ caml_string_of_array
                   ( /*<<md5.js 167 32>>*/ md5(buf,len)) /*<<md5.js 142 9>>*/ } /*<<md5.js 33 0>>*/ }
       ();
     /*<<md5.js 23 0>>*/ function caml_md5_chan(chan,len)
     { /*<<md5.js 24 2>>*/ if(len < 0)
        /*<<md5.js 24 11>>*/ len
       =
        /*<<md5.js 25 8>>*/ caml_ml_string_length(chan.file.data)
       -
       chan.offset;
       /*<<md5.js 27 2>>*/ return  /*<<md5.js 27 9>>*/ caml_md5_string
              (chan.file.data,chan.offset,len) /*<<md5.js 28 0>>*/ }
     /*<<int64.js 153 0>>*/ function caml_int64_shift_right(x,s)
     {s = s & 63;
       /*<<int64.js 155 2>>*/ if(s == 0) /*<<int64.js 155 14>>*/ return x;
       /*<<int64.js 156 2>>*/  /*<<int64.js 156 8>>*/ var h=x[3] << 16 >> 16;
       /*<<int64.js 157 2>>*/ if(s < 24)
        /*<<int64.js 158 4>>*/ return [255,
               (x[1] >> s | x[2] << 24 - s) & 16777215,
               (x[2] >> s | h << 24 - s) & 16777215,
               x[3] << 16 >> s >>> 16];
       /*<<int64.js 156 2>>*/  /*<<int64.js 162 11>>*/ var
       sign=
        x[3] << 16 >> 31;
       /*<<int64.js 163 2>>*/ if(s < 48)
        /*<<int64.js 164 4>>*/ return [255,
               (x[2] >> s - 24 | x[3] << 48 - s) & 16777215,
               x[3] << 16 >> s - 24 >> 16 & 16777215,
               sign & 65535];
       /*<<int64.js 168 2>>*/ return [255,
              x[3] << 16 >> s - 32 & 16777215,
              sign & 16777215,
              sign & 65535] /*<<int64.js 171 0>>*/ }
     /*<<stdlib.js 1022 0>>*/ function caml_convert_raw_backtrace()
     { /*<<stdlib.js 1022 41>>*/ return 0 /*<<stdlib.js 1022 51>>*/ }
     /*<<stdlib.js 283 0>>*/ function caml_array_set(array,index,newval)
     { /*<<stdlib.js 284 2>>*/ if(index < 0 || index >= array.length - 1)
        /*<<stdlib.js 284 50>>*/ caml_array_bound_error();
      array[index + 1] = newval;
       /*<<stdlib.js 285 25>>*/ return 0 /*<<stdlib.js 286 0>>*/ }
     /*<<mlString.js 439 0>>*/ function caml_bytes_greaterequal(s1,s2)
     { /*<<mlString.js 440 2>>*/ return  /*<<mlString.js 440 9>>*/ caml_bytes_lessequal
              (s2,s1) /*<<mlString.js 441 0>>*/ }
     /*<<stdlib.js 213 0>>*/ function caml_update_dummy(x,y)
     { /*<<stdlib.js 214 2>>*/ if(typeof y === "function")
        /*<<stdlib.js 214 30>>*/ {x.fun = y;
         /*<<stdlib.js 214 43>>*/ return 0}
       /*<<stdlib.js 215 2>>*/ if(y.fun)
        /*<<stdlib.js 215 14>>*/ {x.fun = y.fun;
         /*<<stdlib.js 215 31>>*/ return 0}
       /*<<stdlib.js 216 2>>*/  /*<<stdlib.js 216 8>>*/ var i=y.length;
       /*<<stdlib.js 216 20>>*/ while(i--)x[i] = y[i];
       /*<<stdlib.js 216 45>>*/ return 0 /*<<stdlib.js 217 0>>*/ }
     /*<<internalMod.js 55 0>>*/ function caml_CamlinternalMod_update_mod
     (shape,real,x)
     { /*<<internalMod.js 56 2>>*/ if(typeof shape === "number")
        /*<<internalMod.js 57 4>>*/ switch(shape)
        {case 0:real.fun = x; /*<<internalMod.js 60 6>>*/ break;
         case 1:
         default: /*<<internalMod.js 63 6>>*/ caml_update_dummy(real,x)}
      else
        /*<<internalMod.js 66 4>>*/ switch(shape[0])
        {case 0:
           /*<<internalMod.js 68 6>>*/ for
           ( /*<<internalMod.js 68 15>>*/ var i=1;i < shape[1].length;i++)
            /*<<internalMod.js 69 8>>*/ caml_CamlinternalMod_update_mod
            (shape[1][i],real[i],x[i]);
           /*<<internalMod.js 70 6>>*/ break
         }
       /*<<internalMod.js 74 2>>*/ return 0 /*<<internalMod.js 75 0>>*/ }
     /*<<jslib.js 86 0>>*/ function caml_trampoline_return(f,args)
     { /*<<jslib.js 87 2>>*/ return {joo_tramp:f,joo_args:args} /*<<jslib.js 88 0>>*/ }
     /*<<io.js 432 0>>*/ function caml_ml_output_int(oc,i)
     { /*<<io.js 433 2>>*/ var
        /*<<io.js 433 10>>*/ arr=
        [i >> 24 & 255,i >> 16 & 255,i >> 8 & 255,i & 255],
        /*<<io.js 434 8>>*/ s= /*<<io.js 434 10>>*/ caml_string_of_array(arr);
       /*<<io.js 435 2>>*/ caml_ml_output(oc,s,0,4);
       /*<<io.js 436 2>>*/ return 0 /*<<io.js 437 0>>*/ }
     /*<<fs.js 359 0>>*/ var
      /*<<fs.js 359 15>>*/ unix_lstat=unix_stat,
      /*<<stdlib.js 882 22>>*/ caml_initial_time=new Date() * 0.001;
     /*<<stdlib.js 883 0>>*/ function caml_sys_time()
     { /*<<stdlib.js 883 28>>*/ return new Date() * 0.001 - caml_initial_time /*<<stdlib.js 883 75>>*/ }
     /*<<stdlib.js 951 0>>*/ function caml_array_append(a1,a2)
     { /*<<stdlib.js 952 2>>*/ var
        /*<<stdlib.js 952 9>>*/ l1=a1.length,
        /*<<stdlib.js 952 25>>*/ l2=a2.length,
        /*<<stdlib.js 953 8>>*/ l=l1 + l2 - 1,
        /*<<stdlib.js 954 8>>*/ a=new Array(l);
      a[0] = 0;
       /*<<stdlib.js 952 2>>*/ var
        /*<<stdlib.js 956 8>>*/ i=1,
        /*<<stdlib.js 956 14>>*/ j=1;
       /*<<stdlib.js 957 2>>*/ for(;i < l1;i++)a[i] = a1[i];
       /*<<stdlib.js 958 2>>*/ for(;i < l;i++,j++)a[i] = a2[j];
       /*<<stdlib.js 959 2>>*/ return a /*<<stdlib.js 960 0>>*/ }
     /*<<io.js 208 0>>*/ function caml_ml_set_channel_refill(chan,f)
     {chan.refill = f; /*<<io.js 210 2>>*/ return 0 /*<<io.js 211 0>>*/ }
     /*<<int64.js 95 0>>*/ function caml_int64_is_min_int(x)
     { /*<<int64.js 96 2>>*/ return x[3] == 32768 && (x[1] | x[2]) == 0 /*<<int64.js 97 0>>*/ }
     /*<<ieee_754.js 77 0>>*/ function caml_hexstring_of_float(x,prec,style)
     { /*<<ieee_754.js 78 2>>*/ if(! /*<<ieee_754.js 78 7>>*/ isFinite(x))
        /*<<ieee_754.js 78 20>>*/ { /*<<ieee_754.js 79 4>>*/ if
         ( /*<<ieee_754.js 79 8>>*/ isNaN(x))
          /*<<ieee_754.js 79 18>>*/ return  /*<<ieee_754.js 79 25>>*/ caml_js_to_string
                 ("nan");
         /*<<ieee_754.js 80 4>>*/ return  /*<<ieee_754.js 80 11>>*/ caml_js_to_string
                (x > 0?"infinity":"-infinity")}
       /*<<ieee_754.js 82 2>>*/  /*<<ieee_754.js 82 11>>*/ var
       sign=
        x == 0 && 1 / x == -Infinity?1:x >= 0?0:1;
       /*<<ieee_754.js 83 2>>*/ if(sign)x = -x;
       /*<<ieee_754.js 82 2>>*/  /*<<ieee_754.js 84 10>>*/ var exp=0;
       /*<<ieee_754.js 85 2>>*/ if(x == 0)
        /*<<ieee_754.js 85 14>>*/ ;
      else
        /*<<ieee_754.js 86 7>>*/ if(x < 1)
         /*<<ieee_754.js 86 18>>*/ while(x < 1 && exp > -1022)
          /*<<ieee_754.js 87 34>>*/ {x *= 2;exp--}
       else
         /*<<ieee_754.js 88 9>>*/ while(x >= 2)
          /*<<ieee_754.js 89 19>>*/ {x /= 2;exp++}
       /*<<ieee_754.js 82 2>>*/ var
        /*<<ieee_754.js 91 15>>*/ exp_sign=exp < 0?"":"+",
        /*<<ieee_754.js 92 15>>*/ sign_str="";
       /*<<ieee_754.js 93 2>>*/ if(sign)
       sign_str = "-";
      else
        /*<<ieee_754.js 94 7>>*/ switch(style)
        {case 43:sign_str = "+"; /*<<ieee_754.js 96 39>>*/ break;
         case 32:sign_str = " "; /*<<ieee_754.js 97 39>>*/ break;
         default: /*<<ieee_754.js 98 13>>*/ break}
       /*<<ieee_754.js 101 2>>*/ if(prec >= 0 && prec < 13)
        /*<<ieee_754.js 101 30>>*/ { /*<<ieee_754.js 103 6>>*/  /*<<ieee_754.js 103 14>>*/ var
         cst=
           /*<<ieee_754.js 103 16>>*/ Math.pow(2,prec * 4);
        x =  /*<<ieee_754.js 104 10>>*/ Math.round(x * cst) / cst}
       /*<<ieee_754.js 82 2>>*/  /*<<ieee_754.js 106 12>>*/ var
       x_str=
         /*<<ieee_754.js 106 14>>*/ x.toString(16);
       /*<<ieee_754.js 107 2>>*/ if(prec >= 0)
        /*<<ieee_754.js 107 15>>*/ { /*<<ieee_754.js 108 6>>*/  /*<<ieee_754.js 108 14>>*/ var
         idx=
           /*<<ieee_754.js 108 16>>*/ x_str.indexOf(".");
         /*<<ieee_754.js 109 4>>*/ if(idx < 0)
          /*<<ieee_754.js 109 14>>*/ x_str
         +=
         "."
         +
          /*<<ieee_754.js 110 21>>*/ caml_str_repeat(prec,"0");
        else
          /*<<ieee_754.js 112 9>>*/ { /*<<ieee_754.js 113 6>>*/  /*<<ieee_754.js 113 15>>*/ var
           size=
            idx + 1 + prec;
           /*<<ieee_754.js 114 6>>*/ if(x_str.length < size)
           x_str
           +=
            /*<<ieee_754.js 115 17>>*/ caml_str_repeat
            (size - x_str.length,"0");
          else
           x_str =  /*<<ieee_754.js 117 16>>*/ x_str.substr(0,size)}}
       /*<<ieee_754.js 120 2>>*/ return  /*<<ieee_754.js 120 9>>*/ caml_js_to_string
              (sign_str
               +
               "0x"
               +
               x_str
               +
               "p"
               +
               exp_sign
               +
                /*<<ieee_754.js 120 71>>*/ exp.toString(10)) /*<<ieee_754.js 121 0>>*/ }
     /*<<jslib_js_of_ocaml.js 117 0>>*/ function caml_js_expr(s)
     { /*<<jslib_js_of_ocaml.js 118 2>>*/ js_print_stderr
       ("caml_js_expr: fallback to runtime evaluation");
       /*<<jslib_js_of_ocaml.js 119 2>>*/ return  /*<<jslib_js_of_ocaml.js 119 9>>*/ eval
              ( /*<<jslib_js_of_ocaml.js 119 14>>*/ s.toString()) /*<<jslib_js_of_ocaml.js 119 28>>*/ }
     /*<<mlString.js 477 0>>*/  /*<<mlString.js 477 20>>*/ var
     caml_fill_bytes=
      caml_fill_string;
     /*<<stdlib.js 1149 0>>*/ function caml_ml_runtime_warnings_enabled(_unit)
     { /*<<stdlib.js 1150 2>>*/ return caml_runtime_warnings /*<<stdlib.js 1151 0>>*/ }
     /*<<stdlib.js 1014 0>>*/ function caml_backtrace_status()
     { /*<<stdlib.js 1014 36>>*/ return 0 /*<<stdlib.js 1014 46>>*/ }
     /*<<stdlib.js 1092 0>>*/ function caml_install_signal_handler()
     { /*<<stdlib.js 1092 39>>*/ return 0 /*<<stdlib.js 1092 47>>*/ }
     /*<<bigarray.js 602 0>>*/ function caml_ba_fill(ba,init)
     { /*<<bigarray.js 603 4>>*/ ba.fill(init);
       /*<<bigarray.js 604 4>>*/ return 0 /*<<bigarray.js 605 0>>*/ }
     /*<<gc.js 28 0>>*/ function caml_gc_get()
     { /*<<gc.js 29 2>>*/ return [0,0,0,0,0,0,0,0,0] /*<<gc.js 30 0>>*/ }
     /*<<ieee_754.js 161 0>>*/ function caml_modf_float(x)
     { /*<<ieee_754.js 162 2>>*/ if( /*<<ieee_754.js 162 6>>*/ isFinite(x))
        /*<<ieee_754.js 162 20>>*/ { /*<<ieee_754.js 163 4>>*/  /*<<ieee_754.js 163 12>>*/ var
         neg=
          1 / x < 0;
        x =  /*<<ieee_754.js 164 8>>*/ Math.abs(x);
         /*<<ieee_754.js 163 4>>*/ var
          /*<<ieee_754.js 165 10>>*/ i=
           /*<<ieee_754.js 165 12>>*/ Math.floor(x),
          /*<<ieee_754.js 166 10>>*/ f=x - i;
         /*<<ieee_754.js 167 4>>*/ if(neg)
          /*<<ieee_754.js 167 13>>*/ {i = -i;f = -f}
         /*<<ieee_754.js 168 4>>*/ return [0,f,i]}
       /*<<ieee_754.js 170 2>>*/ if( /*<<ieee_754.js 170 6>>*/ isNaN(x))
        /*<<ieee_754.js 170 17>>*/ return [0,NaN,NaN];
       /*<<ieee_754.js 171 2>>*/ return [0,1 / x,x] /*<<ieee_754.js 172 0>>*/ }
     /*<<stdlib.js 665 0>>*/ function caml_hash_univ_param(count,limit,obj)
     { /*<<stdlib.js 666 2>>*/  /*<<stdlib.js 666 16>>*/ var hash_accu=0;
       /*<<stdlib.js 667 2>>*/ function hash_aux(obj)
       {limit--;
         /*<<stdlib.js 669 4>>*/ if(count < 0 || limit < 0)
          /*<<stdlib.js 669 32>>*/ return;
         /*<<stdlib.js 670 4>>*/ if
         (obj instanceof Array && obj[0] === (obj[0] | 0))
          /*<<stdlib.js 670 55>>*/ switch(obj[0])
          {case 248:
            count--;
            hash_accu = hash_accu * 65599 + obj[2] | 0;
             /*<<stdlib.js 676 8>>*/ break;
           case 250:
            limit++;
             /*<<stdlib.js 679 17>>*/ hash_aux(obj);
             /*<<stdlib.js 679 32>>*/ break;
           case 255:
            count--;
            hash_accu = hash_accu * 65599 + obj[1] + (obj[2] << 24) | 0;
             /*<<stdlib.js 684 8>>*/ break;
           default:
            count--;
            hash_accu = hash_accu * 19 + obj[0] | 0;
             /*<<stdlib.js 688 8>>*/ for
             ( /*<<stdlib.js 688 19>>*/ var i=obj.length - 1;i > 0;i--)
              /*<<stdlib.js 688 49>>*/ hash_aux(obj[i])}
        else
          /*<<stdlib.js 690 11>>*/ if(obj instanceof MlString)
           /*<<stdlib.js 690 40>>*/ {count--;
            /*<<stdlib.js 692 6>>*/ switch(obj.t & 6)
            {default:
               /*<<stdlib.js 694 8>>*/ caml_convert_string_to_bytes(obj);case 0:
               /*<<stdlib.js 696 8>>*/ for
               (var
                  /*<<stdlib.js 696 19>>*/ b=obj.c,
                  /*<<stdlib.js 696 30>>*/ l=obj.l,
                  /*<<stdlib.js 696 41>>*/ i=0;
                i
                <
                l;
                i++)
               hash_accu
               =
               hash_accu
               *
               19
               +
                /*<<stdlib.js 697 40>>*/ b.charCodeAt(i)
               |
               0;
               /*<<stdlib.js 698 8>>*/ break;
             case 2:
               /*<<stdlib.js 700 8>>*/ for
               (var
                  /*<<stdlib.js 700 19>>*/ a=obj.c,
                  /*<<stdlib.js 700 30>>*/ l=obj.l,
                  /*<<stdlib.js 700 41>>*/ i=0;
                i
                <
                l;
                i++)
               hash_accu = hash_accu * 19 + a[i] | 0
             }}
         else
           /*<<stdlib.js 703 11>>*/ if(obj === (obj | 0))
            /*<<stdlib.js 703 32>>*/ {count--;
            hash_accu = hash_accu * 65599 + obj | 0}
          else
            /*<<stdlib.js 707 11>>*/ if(obj === +obj)
             /*<<stdlib.js 707 29>>*/ {count--;
              /*<<stdlib.js 710 6>>*/  /*<<stdlib.js 710 12>>*/ var
              p=
                /*<<stdlib.js 710 14>>*/ caml_int64_to_bytes
                ( /*<<stdlib.js 710 35>>*/ caml_int64_bits_of_float(obj));
              /*<<stdlib.js 711 6>>*/ for
              ( /*<<stdlib.js 711 17>>*/ var i=7;i >= 0;i--)
              hash_accu = hash_accu * 19 + p[i] | 0} /*<<stdlib.js 713 2>>*/ }
       /*<<stdlib.js 714 2>>*/ hash_aux(obj);
       /*<<stdlib.js 715 2>>*/ return hash_accu & 1073741823 /*<<stdlib.js 716 0>>*/ }
     /*<<ieee_754.js 205 0>>*/ function caml_float_compare(x,y)
     { /*<<ieee_754.js 206 2>>*/ if(x === y)
        /*<<ieee_754.js 206 15>>*/ return 0;
       /*<<ieee_754.js 207 2>>*/ if(x < y)
        /*<<ieee_754.js 207 13>>*/ return -1;
       /*<<ieee_754.js 208 2>>*/ if(x > y)
        /*<<ieee_754.js 208 13>>*/ return 1;
       /*<<ieee_754.js 209 2>>*/ if(x === x)
        /*<<ieee_754.js 209 15>>*/ return 1;
       /*<<ieee_754.js 210 2>>*/ if(y === y)
        /*<<ieee_754.js 210 15>>*/ return -1;
       /*<<ieee_754.js 211 2>>*/ return 0 /*<<ieee_754.js 212 0>>*/ }
     /*<<parsing.js 22 0>>*/ function caml_parse_engine(tables,env,cmd,arg)
     { /*<<parsing.js 24 2>>*/ var
        /*<<parsing.js 24 14>>*/ ERRCODE=256,
        /*<<parsing.js 32 11>>*/ loop=6,
        /*<<parsing.js 33 16>>*/ testshift=7,
        /*<<parsing.js 34 12>>*/ shift=8,
        /*<<parsing.js 35 20>>*/ shift_recover=9,
        /*<<parsing.js 36 13>>*/ reduce=10,
        /*<<parsing.js 38 17>>*/ READ_TOKEN=0,
        /*<<parsing.js 39 24>>*/ RAISE_PARSE_ERROR=1,
        /*<<parsing.js 40 20>>*/ GROW_STACKS_1=2,
        /*<<parsing.js 41 20>>*/ GROW_STACKS_2=3,
        /*<<parsing.js 42 30>>*/ COMPUTE_SEMANTIC_ACTION=4,
        /*<<parsing.js 43 26>>*/ CALL_ERROR_FUNCTION=5,
        /*<<parsing.js 45 18>>*/ env_s_stack=1,
        /*<<parsing.js 46 18>>*/ env_v_stack=2,
        /*<<parsing.js 47 27>>*/ env_symb_start_stack=3,
        /*<<parsing.js 48 25>>*/ env_symb_end_stack=4,
        /*<<parsing.js 49 20>>*/ env_stacksize=5,
        /*<<parsing.js 50 20>>*/ env_stackbase=6,
        /*<<parsing.js 51 20>>*/ env_curr_char=7,
        /*<<parsing.js 52 15>>*/ env_lval=8,
        /*<<parsing.js 53 21>>*/ env_symb_start=9,
        /*<<parsing.js 54 19>>*/ env_symb_end=10,
        /*<<parsing.js 55 14>>*/ env_asp=11,
        /*<<parsing.js 56 19>>*/ env_rule_len=12,
        /*<<parsing.js 57 22>>*/ env_rule_number=13,
        /*<<parsing.js 58 13>>*/ env_sp=14,
        /*<<parsing.js 59 16>>*/ env_state=15,
        /*<<parsing.js 60 18>>*/ env_errflag=16,
        /*<<parsing.js 63 23>>*/ tbl_transl_const=2,
        /*<<parsing.js 64 23>>*/ tbl_transl_block=3,
        /*<<parsing.js 65 14>>*/ tbl_lhs=4,
        /*<<parsing.js 66 14>>*/ tbl_len=5,
        /*<<parsing.js 67 17>>*/ tbl_defred=6,
        /*<<parsing.js 68 16>>*/ tbl_dgoto=7,
        /*<<parsing.js 69 17>>*/ tbl_sindex=8,
        /*<<parsing.js 70 17>>*/ tbl_rindex=9,
        /*<<parsing.js 71 17>>*/ tbl_gindex=10,
        /*<<parsing.js 72 20>>*/ tbl_tablesize=11,
        /*<<parsing.js 73 16>>*/ tbl_table=12,
        /*<<parsing.js 74 16>>*/ tbl_check=13;
       /*<<parsing.js 79 2>>*/ if(!tables.dgoto)
        /*<<parsing.js 79 21>>*/ {tables.defred
        =
         /*<<parsing.js 80 20>>*/ caml_lex_array(tables[tbl_defred]);
        tables.sindex
        =
         /*<<parsing.js 81 20>>*/ caml_lex_array(tables[tbl_sindex]);
        tables.check
        =
         /*<<parsing.js 82 20>>*/ caml_lex_array(tables[tbl_check]);
        tables.rindex
        =
         /*<<parsing.js 83 20>>*/ caml_lex_array(tables[tbl_rindex]);
        tables.table
        =
         /*<<parsing.js 84 20>>*/ caml_lex_array(tables[tbl_table]);
        tables.len
        =
         /*<<parsing.js 85 20>>*/ caml_lex_array(tables[tbl_len]);
        tables.lhs
        =
         /*<<parsing.js 86 20>>*/ caml_lex_array(tables[tbl_lhs]);
        tables.gindex
        =
         /*<<parsing.js 87 20>>*/ caml_lex_array(tables[tbl_gindex]);
        tables.dgoto
        =
         /*<<parsing.js 88 20>>*/ caml_lex_array(tables[tbl_dgoto])}
       /*<<parsing.js 24 2>>*/ var
        /*<<parsing.js 91 10>>*/ res=0,
       n,
       n1,
       n2,
       state1,
        /*<<parsing.js 94 9>>*/ sp=env[env_sp],
        /*<<parsing.js 95 12>>*/ state=env[env_state],
        /*<<parsing.js 96 14>>*/ errflag=env[env_errflag];
      exit:
       /*<<parsing.js 98 7>>*/ for(;;)
        /*<<parsing.js 98 16>>*/ switch(cmd)
        {case 0:state = 0;errflag = 0;
         case 6:
          n = tables.defred[state];
           /*<<parsing.js 107 6>>*/ if(n != 0)
            /*<<parsing.js 107 18>>*/ {cmd = reduce;
             /*<<parsing.js 107 34>>*/ break}
           /*<<parsing.js 108 6>>*/ if(env[env_curr_char] >= 0)
            /*<<parsing.js 108 35>>*/ {cmd = testshift;
             /*<<parsing.js 108 54>>*/ break}
          res = READ_TOKEN;
           /*<<parsing.js 110 6>>*/ break exit;
         case 1:
           /*<<parsing.js 114 6>>*/ if(arg instanceof Array)
            /*<<parsing.js 114 32>>*/ {env[env_curr_char]
            =
            tables[tbl_transl_block][arg[0] + 1];
            env[env_lval] = arg[1]}
          else
            /*<<parsing.js 117 13>>*/ {env[env_curr_char]
            =
            tables[tbl_transl_const][arg + 1];
            env[env_lval] = 0}
         case 7:
          n1 = tables.sindex[state];
          n2 = n1 + env[env_curr_char];
           /*<<parsing.js 126 6>>*/ if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
            /*<<parsing.js 127 50>>*/ {cmd = shift;
             /*<<parsing.js 128 21>>*/ break}
          n1 = tables.rindex[state];
          n2 = n1 + env[env_curr_char];
           /*<<parsing.js 132 6>>*/ if
           (n1
            !=
            0
            &&
            n2
            >=
            0
            &&
            n2
            <=
            tables[tbl_tablesize]
            &&
            tables.check[n2]
            ==
            env[env_curr_char])
            /*<<parsing.js 133 50>>*/ {n = tables.table[n2];
            cmd = reduce;
             /*<<parsing.js 135 22>>*/ break}
           /*<<parsing.js 137 6>>*/ if(errflag <= 0)
            /*<<parsing.js 137 24>>*/ {res = CALL_ERROR_FUNCTION;
             /*<<parsing.js 139 8>>*/ break exit}
         case 5:
           /*<<parsing.js 144 6>>*/ if(errflag < 3)
            /*<<parsing.js 144 23>>*/ {errflag = 3;
             /*<<parsing.js 146 8>>*/ for(;;)
              /*<<parsing.js 146 17>>*/ {state1 = env[env_s_stack][sp + 1];
              n1 = tables.sindex[state1];
              n2 = n1 + ERRCODE;
               /*<<parsing.js 150 10>>*/ if
               (n1
                !=
                0
                &&
                n2
                >=
                0
                &&
                n2
                <=
                tables[tbl_tablesize]
                &&
                tables.check[n2]
                ==
                ERRCODE)
                /*<<parsing.js 151 43>>*/ {cmd = shift_recover;
                 /*<<parsing.js 152 33>>*/ break}
              else
                /*<<parsing.js 153 17>>*/ { /*<<parsing.js 154 12>>*/ if
                 (sp <= env[env_stackbase])
                  /*<<parsing.js 154 42>>*/ return RAISE_PARSE_ERROR;
                sp--}}}
          else
            /*<<parsing.js 159 13>>*/ { /*<<parsing.js 160 8>>*/ if
             (env[env_curr_char] == 0)
              /*<<parsing.js 160 37>>*/ return RAISE_PARSE_ERROR;
            env[env_curr_char] = -1;
            cmd = loop;
             /*<<parsing.js 163 20>>*/ break}
         case 8:
          env[env_curr_char] = -1;
           /*<<parsing.js 168 6>>*/ if(errflag > 0)errflag--;
         case 9:
          state = tables.table[n2];
          sp++;
           /*<<parsing.js 173 6>>*/ if(sp >= env[env_stacksize])
            /*<<parsing.js 173 36>>*/ {res = GROW_STACKS_1;
             /*<<parsing.js 175 8>>*/ break exit}
         case 2:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = env[env_lval];
          env[env_symb_start_stack][sp + 1] = env[env_symb_start];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end];
          cmd = loop;
           /*<<parsing.js 185 6>>*/ break;
         case 10:
           /*<<parsing.js 188 6>>*/  /*<<parsing.js 188 12>>*/ var
           m=
            tables.len[n];
          env[env_asp] = sp;
          env[env_rule_number] = n;
          env[env_rule_len] = m;
          sp = sp - m + 1;
          m = tables.lhs[n];
          state1 = env[env_s_stack][sp];
          n1 = tables.gindex[m];
          n2 = n1 + state1;
           /*<<parsing.js 197 6>>*/ state
          =
          n1
           !=
           0
           &&
           n2
           >=
           0
           &&
           n2
           <=
           tables[tbl_tablesize]
           &&
           tables.check[n2]
           ==
           state1
           ?tables.table[n2]
           :tables.dgoto[m];
           /*<<parsing.js 202 6>>*/ if(sp >= env[env_stacksize])
            /*<<parsing.js 202 36>>*/ {res = GROW_STACKS_2;
             /*<<parsing.js 204 8>>*/ break exit}
         case 3:
          res = COMPUTE_SEMANTIC_ACTION; /*<<parsing.js 210 6>>*/ break exit;
         case 4:
          env[env_s_stack][sp + 1] = state;
          env[env_v_stack][sp + 1] = arg;
           /*<<parsing.js 215 6>>*/  /*<<parsing.js 215 14>>*/ var
           asp=
            env[env_asp];
          env[env_symb_end_stack][sp + 1] = env[env_symb_end_stack][asp + 1];
           /*<<parsing.js 217 6>>*/ if(sp > asp)
            /*<<parsing.js 217 20>>*/ env[env_symb_start_stack][sp + 1]
           =
           env[env_symb_end_stack][asp + 1];
          cmd = loop;
           /*<<parsing.js 221 18>>*/ break;
         default: /*<<parsing.js 224 6>>*/ return RAISE_PARSE_ERROR}
      env[env_sp] = sp;
      env[env_state] = state;
      env[env_errflag] = errflag;
       /*<<parsing.js 231 2>>*/ return res /*<<parsing.js 232 0>>*/ }
     /*<<marshal.js 447 0>>*/ function caml_output_value_to_buffer
     (s,ofs,len,v,_fl)
     { /*<<marshal.js 449 2>>*/  /*<<marshal.js 449 8>>*/ var
       t=
         /*<<marshal.js 449 10>>*/ caml_output_val(v);
       /*<<marshal.js 450 2>>*/ if(t.length > len)
        /*<<marshal.js 450 22>>*/ caml_failwith
        ("Marshal.to_buffer: buffer overflow");
       /*<<marshal.js 451 2>>*/ caml_blit_string(t,0,s,ofs,t.length);
       /*<<marshal.js 452 2>>*/ return 0 /*<<marshal.js 453 0>>*/ }
     /*<<jslib_js_of_ocaml.js 124 0>>*/ function caml_pure_js_expr(s)
     { /*<<jslib_js_of_ocaml.js 125 2>>*/ js_print_stderr
       ("caml_pure_js_expr: fallback to runtime evaluation");
       /*<<jslib_js_of_ocaml.js 126 2>>*/ return  /*<<jslib_js_of_ocaml.js 126 9>>*/ eval
              ( /*<<jslib_js_of_ocaml.js 126 14>>*/ s.toString()) /*<<jslib_js_of_ocaml.js 126 28>>*/ }
     /*<<bigstring.js 37 0>>*/ function bigstring_blit_stub(s1,i1,s2,i2,len)
     { /*<<bigstring.js 38 2>>*/ for
       ( /*<<bigstring.js 38 13>>*/ var i=0;i < len;i++)
        /*<<bigstring.js 38 32>>*/ caml_ba_set_1
        (s2,i2 + i, /*<<bigstring.js 38 56>>*/ caml_ba_get_1(s1,i1 + i));
       /*<<bigstring.js 39 2>>*/ return 0 /*<<bigstring.js 40 0>>*/ }
     /*<<mlString.js 394 0>>*/ function caml_string_notequal(s1,s2)
     { /*<<mlString.js 394 40>>*/ return 1
             -
              /*<<mlString.js 394 49>>*/ caml_string_equal(s1,s2) /*<<mlString.js 394 76>>*/ }
     /*<<int64.js 115 0>>*/ function caml_int64_xor(x,y)
     { /*<<int64.js 116 2>>*/ return [255,x[1] ^ y[1],x[2] ^ y[2],x[3] ^ y[3]] /*<<int64.js 117 0>>*/ }
     /*<<mlString.js 451 0>>*/ function caml_bytes_greaterthan(s1,s2)
     { /*<<mlString.js 452 2>>*/ return  /*<<mlString.js 452 9>>*/ caml_bytes_lessthan
              (s2,s1) /*<<mlString.js 453 0>>*/ }
     /*<<io.js 202 0>>*/ function caml_ml_set_channel_output(chan,f)
     {chan.output = f; /*<<io.js 204 2>>*/ return 0 /*<<io.js 205 0>>*/ }
     /*<<jslib_js_of_ocaml.js 29 0>>*/ function caml_js_to_float(x)
     { /*<<jslib_js_of_ocaml.js 29 31>>*/ return x /*<<jslib_js_of_ocaml.js 29 41>>*/ }
     /*<<stdlib.js 80 0>>*/ function caml_register_named_value(nm,v)
     {caml_named_values[ /*<<stdlib.js 81 20>>*/ caml_bytes_of_string(nm)]
      =
      v;
       /*<<stdlib.js 82 2>>*/ return 0 /*<<stdlib.js 83 0>>*/ }
     /*<<bigarray.js 476 0>>*/ function caml_ba_dim(ba,dim)
     { /*<<bigarray.js 477 4>>*/ return  /*<<bigarray.js 477 11>>*/ ba.nth_dim
              (dim) /*<<bigarray.js 478 0>>*/ }
     /*<<?>>*/ function caml_call1(f,a0)
     {return f.length == 1?f(a0):caml_call_gen(f,[a0])}
     /*<<?>>*/ function caml_call2(f,a0,a1)
     {return f.length == 2?f(a0,a1):caml_call_gen(f,[a0,a1])}
     /*<<?>>*/ function caml_call3(f,a0,a1,a2)
     {return f.length == 3?f(a0,a1,a2):caml_call_gen(f,[a0,a1,a2])}
    var
     Out_of_memory=[248,caml_new_string("Out_of_memory"),-1],
     Sys_error=[248,caml_new_string("Sys_error"),-2],
     Failure=[248,caml_new_string("Failure"),-3],
     Invalid_argument=[248,caml_new_string("Invalid_argument"),-4],
     End_of_file=[248,caml_new_string("End_of_file"),-5],
     Division_by_zero=[248,caml_new_string("Division_by_zero"),-6],
     Not_found=[248,caml_new_string("Not_found"),-7],
     Match_failure=[248,caml_new_string("Match_failure"),-8],
     Stack_overflow=[248,caml_new_string("Stack_overflow"),-9],
     Sys_blocked_io=[248,caml_new_string("Sys_blocked_io"),-10],
     Assert_failure=[248,caml_new_string("Assert_failure"),-11],
     Undefined_recursive_module=
      [248,caml_new_string("Undefined_recursive_module"),-12],
     _aX_=[0,caml_new_string("MessageNotProvided"),0,caml_new_string("flame")];
    caml_register_global
     (11,Undefined_recursive_module,"Undefined_recursive_module");
    caml_register_global(10,Assert_failure,"Assert_failure");
    caml_register_global(9,Sys_blocked_io,"Sys_blocked_io");
    caml_register_global(8,Stack_overflow,"Stack_overflow");
    caml_register_global(7,Match_failure,"Match_failure");
    caml_register_global(6,Not_found,"Not_found");
    caml_register_global(5,Division_by_zero,"Division_by_zero");
    caml_register_global(4,End_of_file,"End_of_file");
    caml_register_global(3,Invalid_argument,"Invalid_argument");
    caml_register_global(2,Failure,"Failure");
    caml_register_global(1,Sys_error,"Sys_error");
    caml_register_global(0,Out_of_memory,"Out_of_memory");
    var
     _d_=caml_new_string("input"),
     _a_=caml_new_string("Pervasives.Exit"),
     _k_=caml_new_string("Array.Bottom"),
     _q_=caml_new_string("nth"),
     _r_=caml_new_string("List.nth"),
     _o_=caml_new_string("hd"),
     _K_=caml_new_string("String.contains_from / Bytes.contains_from"),
     _A_=caml_new_string("String.sub / Bytes.sub"),
     _T_=caml_new_string(""),
     _Q_=caml_new_string(""),
     ___=caml_new_string("Sys.Break"),
     _$_=caml_new_string("CamlinternalLazy.Undefined"),
     _ae_=caml_new_string("CamlinternalFormat.Type_mismatch"),
     _ag_=caml_new_string("x"),
     _dW_=caml_new_string("OCAMLRUNPARAM"),
     _dU_=caml_new_string("CAMLRUNPARAM"),
     _ah_=caml_new_string(""),
     _ao_=caml_new_string("-"),
     _aq_=caml_new_string("Scanf.Scan_failure"),
     _at_=caml_new_string("Js.Error"),
     _aw_=caml_new_string("jsError"),
     _a5_=caml_new_string("args"),
     _a6_=caml_new_string("command"),
     _a7_=caml_new_string("options"),
     _a8_=caml_new_string("stdout"),
     _a9_=caml_new_string("stdin"),
     _a__=caml_new_string("exit"),
     _aZ_=caml_new_string("flame"),
     _aB_=caml_new_string("unsafeExtractString: not a string"),
     _aG_=[0,[0,0,0],[0,0,0]],
     _a1_=caml_new_string("."),
     _bi_=caml_new_string("tmp.re"),
     _bg_=caml_new_string("re"),
     _bf_=caml_new_string("rei"),
     _bd_=
      caml_new_string
       ("AtomReasonCommon.extensionWithoutDot: file path doesn't contain an extension."),
     _bE_=caml_new_string("object"),
     _bF_=caml_new_string("string"),
     _bG_=caml_new_string("Not a valid identifier"),
     _bA_=caml_new_string("Full description: "),
     _bp_=caml_new_string("Constructor"),
     _bq_=caml_new_string("Module"),
     _br_=caml_new_string("Type"),
     _bs_=caml_new_string("Value"),
     _bt_=caml_new_string("constructor"),
     _bu_=caml_new_string("module"),
     _bv_=caml_new_string("type"),
     _bw_=caml_new_string("value"),
     _bm_=caml_new_string("Merlin"),
     _bK_=caml_new_string("atom-reason.pathToMerlin"),
     _bL_=caml_new_string("atom-reason.merlinFlags"),
     _bM_=caml_new_string("atom-reason.merlinLogFile"),
     _bN_=caml_new_string(""),
     _bO_=caml_new_string("MERLIN_LOG"),
     _ct_=caml_new_string("Syntax Error"),
     _cr_=caml_new_string("Already Formatted"),
     _cs_=caml_new_string("Format: Success"),
     _cp_=caml_new_string("Syntax Error"),
     _cn_=caml_new_string("Already Formatted"),
     _co_=caml_new_string("Format: Success"),
     _ci_=caml_new_string("Failure!"),
     _b9_=caml_new_string("\n"),
     _b6_=caml_new_string("atom-reason.pathToRefmt"),
     _b7_=
      caml_new_string
       ("You must setup atom-reason.pathToRefmt in your Atom config"),
     _b8_=caml_new_string("atom-reason.printWidth"),
     _cl_=[0,0,0],
     _b__=caml_new_string("-print-width"),
     _b$_=caml_new_string("Reason"),
     _ck_=caml_new_string("re"),
     _ca_=caml_new_string("ml"),
     _cj_=caml_new_string("true"),
     _cb_=caml_new_string("false"),
     _cc_=caml_new_string("-is-interface-pp"),
     _cd_=caml_new_string("-print"),
     _ce_=caml_new_string("-parse"),
     _cf_=caml_new_string("true"),
     _cg_=caml_new_string("-use-stdin"),
     _ch_=caml_new_string("atom-reason could not spawn "),
     _b4_=caml_new_string(""),
     _cX_=caml_new_string("Reason"),
     _cA_=caml_new_string("Constructor"),
     _cB_=caml_new_string("Signature"),
     _cC_=caml_new_string("Value"),
     _cR_=caml_new_string("let"),
     _cS_=caml_new_string("val"),
     _cT_=caml_new_string("module type"),
     _cU_=caml_new_string("ctor"),
     _cD_=caml_new_string("Class"),
     _cE_=caml_new_string("Constructor"),
     _cF_=caml_new_string("Exn"),
     _cG_=caml_new_string("Module"),
     _cH_=caml_new_string("Signature"),
     _cI_=caml_new_string("Type"),
     _cJ_=caml_new_string("Value"),
     _cO_=caml_new_string("method"),
     _cP_=caml_new_string("type"),
     _cK_=caml_new_string("plain"),
     _cQ_=caml_new_string("class-name"),
     _cL_=caml_new_string(" "),
     _cM_=caml_new_string("whitespace"),
     _cN_=caml_new_string("keyword"),
     _c8_=caml_new_string(""),
     _c9_=caml_new_string("text"),
     _c__=caml_new_string("filePath"),
     _c$_=caml_new_string("type"),
     _da_=caml_new_string("providerName"),
     _db_=caml_new_string("scope"),
     _dc_=caml_new_string("html"),
     _dd_=caml_new_string("range"),
     _de_=caml_new_string("trace"),
     _df_=caml_new_string(""),
     _dg_=caml_new_string("text"),
     _dh_=caml_new_string("type"),
     _di_=caml_new_string("providerName"),
     _dj_=caml_new_string("scope"),
     _dk_=caml_new_string("html"),
     _dl_=caml_new_string("range"),
     _dm_=caml_new_string("trace"),
     _c1_=caml_new_string("filePath"),
     _c2_=caml_new_string(""),
     _c3_=caml_new_string("text"),
     _c4_=caml_new_string("type"),
     _c5_=caml_new_string("html"),
     _c6_=caml_new_string("range"),
     _dI_=caml_new_string("mli"),
     _dH_=caml_new_string("ml"),
     _dt_=caml_new_string("getDiagnostics"),
     _dw_=caml_new_string("getEntireFormatting"),
     _dz_=caml_new_string("getPartialFormatting"),
     _dC_=caml_new_string("getNuclideJsAutocompleteSuggestions"),
     _dF_=caml_new_string("getNuclideJsTypeHint"),
     _dK_=caml_new_string("getLocation"),
     _dN_=caml_new_string("selectOccurrences"),
     _dQ_=caml_new_string("getOutline");
     /*<<pervasives.ml 24 44>>*/ function failwith(s)
     { /*<<pervasives.ml 30 17>>*/  /*<<pervasives.ml 30 17>>*/ var
       _l6_=
        [0,Failure,s];
       /*<<pervasives.ml 30 33>>*/ throw _l6_ /*<<pervasives.ml 30 33>>*/ }
     /*<<pervasives.ml 24 44>>*/ function invalid_arg(s)
     { /*<<pervasives.ml 31 20>>*/  /*<<pervasives.ml 31 20>>*/ var
       _l5_=
        [0,Invalid_argument,s];
       /*<<pervasives.ml 31 45>>*/ throw _l5_ /*<<pervasives.ml 31 45>>*/ }
     /*<<pervasives.ml 24 44>>*/  /*<<pervasives.ml 24 44>>*/ caml_set_oo_id
     ([248,_a_,0]);
     /*<<pervasives.ml 24 44>>*/ function max(x,y)
     { /*<<pervasives.ml 63 17>>*/  /*<<pervasives.ml 63 17>>*/ var
       _l4_=
         /*<<pervasives.ml 63 17>>*/ caml_greaterequal(x,y);
       /*<<pervasives.ml 63 23>>*/ return _l4_?x:y /*<<pervasives.ml 63 37>>*/ }
     /*<<pervasives.ml 155 42>>*/ function _b_(s1,s2)
     { /*<<pervasives.ml 178 2>>*/ var
        /*<<pervasives.ml 178 2>>*/ l1=
         /*<<pervasives.ml 178 2>>*/ caml_ml_string_length(s1),
        /*<<pervasives.ml 178 2>>*/ l2=
         /*<<pervasives.ml 178 2>>*/ caml_ml_string_length(s2),
        /*<<pervasives.ml 179 2>>*/ s=
         /*<<pervasives.ml 179 2>>*/ caml_create_string(l1 + l2 | 0);
       /*<<pervasives.ml 180 2>>*/  /*<<pervasives.ml 180 2>>*/ caml_blit_string
       (s1,0,s,0,l1);
       /*<<pervasives.ml 181 2>>*/  /*<<pervasives.ml 181 2>>*/ caml_blit_string
       (s2,0,s,l1,l2);
       /*<<pervasives.ml 181 26>>*/ return s /*<<pervasives.ml 182 26>>*/ }
     /*<<pervasives.ml 155 42>>*/ function string_of_int(n)
     { /*<<pervasives.ml 222 2>>*/ return  /*<<pervasives.ml 222 2>>*/ caml_new_string
              ("" + n) /*<<pervasives.ml 222 19>>*/ }
     /*<<pervasives.ml 155 42>>*/ function _c_(l1,l2)
     { /*<<pervasives.ml 245 2>>*/ if(l1)
       { /*<<pervasives.ml 247 22>>*/ var
         tl=l1[2],
         hd=l1[1],
          /*<<pervasives.ml 247 22>>*/ _l3_=
           /*<<pervasives.ml 247 22>>*/ _c_(tl,l2);
         /*<<pervasives.ml 247 31>>*/ return [0,hd,_l3_]}
       /*<<pervasives.ml 246 10>>*/ return l2 /*<<pervasives.ml 247 31>>*/ }
     /*<<pervasives.ml 258 12>>*/  /*<<pervasives.ml 258 12>>*/ var
     stdin=
       /*<<pervasives.ml 258 12>>*/ caml_ml_open_descriptor_in(0);
     /*<<pervasives.ml 259 13>>*/  /*<<pervasives.ml 259 13>>*/ caml_ml_open_descriptor_out
     (1);
     /*<<pervasives.ml 260 13>>*/  /*<<pervasives.ml 260 13>>*/ caml_ml_open_descriptor_out
     (2);
     /*<<pervasives.ml 260 34>>*/ function flush_all(param)
     { /*<<pervasives.ml 286 2>>*/ function iter(param)
       { /*<<?>>*/ var param$0=param;
         /*<<pervasives.ml 286 17>>*/ for(;;)
         { /*<<pervasives.ml 286 17>>*/ if(param$0)
           {var l=param$0[2],a=param$0[1];
             /*<<pervasives.ml 288 16>>*/ try
             { /*<<pervasives.ml 288 21>>*/  /*<<pervasives.ml 288 21>>*/ caml_ml_flush
               (a)}
            catch(_l2_){}
            var param$0=l;
            continue}
           /*<<pervasives.ml 287 12>>*/ return 0} /*<<pervasives.ml 288 50>>*/ }
       /*<<pervasives.ml 289 10>>*/  /*<<pervasives.ml 289 10>>*/ var
       _l1_=
         /*<<pervasives.ml 289 10>>*/ caml_ml_out_channels_list(0);
       /*<<pervasives.ml 289 32>>*/ return  /*<<pervasives.ml 289 32>>*/ iter
              (_l1_) /*<<pervasives.ml 289 32>>*/ }
     /*<<pervasives.ml 260 34>>*/ function input(ic,s,ofs,len)
     { /*<<pervasives.ml 349 2>>*/ if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_string_length(s) - len | 0) < ofs))
         return  /*<<pervasives.ml 351 7>>*/ caml_ml_input(ic,s,ofs,len);
       /*<<pervasives.ml 350 7>>*/ return  /*<<pervasives.ml 350 7>>*/ invalid_arg
              (_d_) /*<<pervasives.ml 351 32>>*/ }
     /*<<pervasives.ml 260 34>>*/ function do_at_exit(param)
     { /*<<pervasives.ml 484 20>>*/ return  /*<<pervasives.ml 484 20>>*/ flush_all
              (0) /*<<pervasives.ml 484 39>>*/ }
    function _e_(a)
     { /*<<array.ml 52 2>>*/  /*<<array.ml 52 2>>*/ var l=a.length - 1;
       /*<<array.ml 52 22>>*/ return 0 === l
              ?[0]
              : /*<<array.ml 52 46>>*/ caml_array_sub(a,0,l) /*<<array.ml 52 62>>*/ }
    function _f_(a1,a2)
     { /*<<array.ml 55 2>>*/  /*<<array.ml 55 2>>*/ var l1=a1.length - 1;
       /*<<array.ml 56 2>>*/ return 0 === l1
              ? /*<<array.ml 56 17>>*/ _e_(a2)
              :0 === a2.length - 1
                ? /*<<array.ml 57 29>>*/ caml_array_sub(a1,0,l1)
                : /*<<array.ml 58 7>>*/ caml_array_append(a1,a2) /*<<array.ml 58 24>>*/ }
    function _g_(f,a)
     { /*<<array.ml 80 2>>*/  /*<<array.ml 80 2>>*/ var l=a.length - 1;
       /*<<array.ml 81 2>>*/ if(0 === l)return [0];
       /*<<array.ml 80 2>>*/ var
        /*<<array.ml 81 26>>*/ _lU_=a[1],
        /*<<array.ml 82 21>>*/ _lV_= /*<<array.ml 82 21>>*/ caml_call1(f,_lU_),
        /*<<array.ml 82 40>>*/ r=
         /*<<array.ml 82 40>>*/ caml_make_vect(l,_lV_),
        /*<<array.ml 82 40>>*/ _lW_=1,
        /*<<array.ml 83 4>>*/ _lX_=l - 1 | 0;
       /*<<array.ml 83 4>>*/ if(!(_lX_ < 1))
       {var i=_lW_;
         /*<<array.ml 84 6>>*/ for(;;)
         { /*<<array.ml 84 6>>*/ var
            /*<<array.ml 84 6>>*/ _lY_=a[i + 1],
            /*<<array.ml 84 21>>*/ _lZ_=
             /*<<array.ml 84 21>>*/ caml_call1(f,_lY_);
           /*<<array.ml 84 40>>*/ r[i + 1] = _lZ_;
           /*<<array.ml 84 6>>*/  /*<<array.ml 84 40>>*/ var _l0_=i + 1 | 0;
          if(_lX_ !== i){var i=_l0_;continue}
          break}}
       /*<<array.ml 86 4>>*/ return r /*<<array.ml 87 5>>*/ }
    function _h_(a)
     { /*<<array.ml 103 2>>*/ function tolist(i,res)
       {var i$0=i,res$0=res;
         /*<<array.ml 104 4>>*/ for(;;)
         { /*<<array.ml 104 4>>*/ if(0 <= i$0)
           { /*<<array.ml 104 27>>*/ var
              /*<<array.ml 104 27>>*/ res$1=[0,a[i$0 + 1],res$0],
              /*<<array.ml 104 27>>*/ i$1=i$0 - 1 | 0,
             i$0=i$1,
             res$0=res$1;
            continue}
           /*<<array.ml 104 18>>*/ return res$0} /*<<array.ml 104 65>>*/ }
       /*<<array.ml 105 2>>*/ return  /*<<array.ml 105 2>>*/ tolist
              (a.length - 1 - 1 | 0,0) /*<<array.ml 105 26>>*/ }
    function _i_(accu,param)
     {var accu$0=accu,param$0=param;
      for(;;)
       {if(param$0)
         { /*<<array.ml 110 12>>*/ var
            /*<<array.ml 110 12>>*/ t=param$0[2],
            /*<<array.ml 110 12>>*/ accu$1=accu$0 + 1 | 0,
           accu$0=accu$1,
           param$0=t;
          continue}
         /*<<array.ml 109 10>>*/ return accu$0}}
    function _j_(l)
     { /*<<array.ml 113 14>>*/ if(l)
       { /*<<array.ml 116 6>>*/ var
         tl=l[2],
         hd=l[1],
          /*<<array.ml 116 6>>*/ _lS_=0,
          /*<<array.ml 116 21>>*/ _lT_= /*<<array.ml 116 21>>*/ _i_(_lS_,l),
          /*<<array.ml 116 38>>*/ a=
           /*<<array.ml 116 38>>*/ caml_make_vect(_lT_,hd),
          /*<<array.ml 117 6>>*/ fill=
          function(i,param)
           {var i$0=i,param$0=param;
            for(;;)
             {if(param$0)
               {var tl=param$0[2],hd=param$0[1];
                 /*<<array.ml 119 39>>*/ a[i$0 + 1] = hd;
                 /*<<array.ml 119 39>>*/ var
                  /*<<array.ml 119 39>>*/ i$1=i$0 + 1 | 0,
                 i$0=i$1,
                 param$0=tl;
                continue}
               /*<<array.ml 118 16>>*/ return a}};
         /*<<array.ml 120 6>>*/ return  /*<<array.ml 120 6>>*/ fill(1,tl)}
       /*<<array.ml 114 10>>*/ return [0] /*<<array.ml 120 15>>*/ }
    caml_set_oo_id([248,_k_,0]);
    function _l_(len,param)
     {var len$0=len,param$0=param;
      for(;;)
       {if(param$0)
         { /*<<list.ml 18 12>>*/ var
            /*<<list.ml 18 12>>*/ l=param$0[2],
            /*<<list.ml 18 12>>*/ len$1=len$0 + 1 | 0,
           len$0=len$1,
           param$0=l;
          continue}
         /*<<list.ml 17 10>>*/ return len$0}}
    function _m_(l)
     { /*<<list.ml 20 15>>*/ return  /*<<list.ml 20 15>>*/ _l_(0,l) /*<<list.ml 20 29>>*/ }
    function _n_(param)
     { /*<<list.ml 22 9>>*/ if(param)
       { /*<<list.ml 24 12>>*/  /*<<list.ml 24 12>>*/ var a=param[1];
         /*<<list.ml 24 12>>*/ return a}
       /*<<list.ml 23 10>>*/ return  /*<<list.ml 23 10>>*/ failwith(_o_) /*<<list.ml 24 13>>*/ }
    function _p_(l,n)
     { /*<<list.ml 31 2>>*/ if(0 <= n)
       { /*<<list.ml 32 2>>*/  /*<<list.ml 32 2>>*/ var
         nth_aux=
          function(l,n)
           {var l$0=l,n$0=n;
             /*<<list.ml 33 4>>*/ for(;;)
             { /*<<list.ml 33 4>>*/ if(l$0)
               {var l$1=l$0[2],a=l$0[1];
                 /*<<list.ml 35 14>>*/ if(0 === n$0)return a;
                 /*<<list.ml 35 35>>*/ var
                  /*<<list.ml 35 35>>*/ n$1=n$0 - 1 | 0,
                 l$0=l$1,
                 n$0=n$1;
                continue}
               /*<<list.ml 34 12>>*/ return  /*<<list.ml 34 12>>*/ failwith
                      (_q_)} /*<<list.ml 35 50>>*/ };
         /*<<list.ml 36 5>>*/ return  /*<<list.ml 36 5>>*/ nth_aux(l,n)}
       /*<<list.ml 31 16>>*/ return  /*<<list.ml 31 16>>*/ invalid_arg(_r_) /*<<list.ml 36 16>>*/ }
    function _s_(l1,l2)
     {var l1$0=l1,l2$0=l2;
       /*<<list.ml 41 2>>*/ for(;;)
       { /*<<list.ml 41 2>>*/ if(l1$0)
         { /*<<list.ml 43 14>>*/ var
           l=l1$0[2],
           a=l1$0[1],
            /*<<list.ml 43 14>>*/ l2$1=[0,a,l2$0],
           l1$0=l,
           l2$0=l2$1;
          continue}
         /*<<list.ml 42 10>>*/ return l2$0} /*<<list.ml 43 36>>*/ }
    function _t_(l)
     { /*<<list.ml 45 12>>*/ return  /*<<list.ml 45 12>>*/ _s_(l,0) /*<<list.ml 45 27>>*/ }
    function _u_(f,param)
     { /*<<?>>*/ if(param)
       { /*<<list.ml 55 20>>*/ var
         l=param[2],
         a=param[1],
          /*<<list.ml 55 20>>*/ r= /*<<list.ml 55 20>>*/ caml_call1(f,a),
          /*<<list.ml 55 32>>*/ _lR_= /*<<list.ml 55 32>>*/ _u_(f,l);
         /*<<list.ml 55 39>>*/ return [0,r,_lR_]}
       /*<<list.ml 54 10>>*/ return 0}
    function _v_(f,l)
     { /*<<list.ml 64 2>>*/ function rmap_f(accu,param)
       {var accu$0=accu,param$0=param;
        for(;;)
         {if(param$0)
           { /*<<list.ml 66 22>>*/ var
             l=param$0[2],
             a=param$0[1],
              /*<<list.ml 66 22>>*/ _lQ_=
               /*<<list.ml 66 22>>*/ caml_call1(f,a),
              /*<<list.ml 66 25>>*/ accu$1=[0,_lQ_,accu$0],
             accu$0=accu$1,
             param$0=l;
            continue}
           /*<<list.ml 65 12>>*/ return accu$0}}
       /*<<list.ml 68 2>>*/ return  /*<<list.ml 68 2>>*/ rmap_f(0,l) /*<<list.ml 68 13>>*/ }
    function _w_(f,param)
     { /*<<?>>*/ var param$0=param;
      for(;;)
       {if(param$0)
         {var l=param$0[2],a=param$0[1];
           /*<<list.ml 73 12>>*/  /*<<list.ml 73 12>>*/ caml_call1(f,a);
          var param$0=l;
          continue}
         /*<<list.ml 72 10>>*/ return 0}}
    function _x_(c)
     { /*<<char.ml 52 2>>*/  /*<<char.ml 52 2>>*/ var
       switch$0=
        65 <= c?90 < c?0:1:0;
       /*<<camlinternalFormatBasics.ml 502 8>>*/ if(!switch$0)
       {var switch$1=192 <= c?214 < c?0:1:0;
        if(!switch$1)
         {var switch$2=216 <= c?222 < c?1:0:1;if(switch$2)return c}}
       /*<<char.ml 55 7>>*/ return c + 32 | 0 /*<<char.ml 56 8>>*/ }
     /*<<bytes.ml 45 12>>*/  /*<<bytes.ml 45 12>>*/ var
     _y_=
       /*<<bytes.ml 45 12>>*/ caml_create_string(0);
     /*<<bytes.ml 45 20>>*/ function _z_(s,ofs,len)
     { /*<<bytes.ml 57 2>>*/ if(0 <= ofs)
       if(0 <= len)
        if(!((caml_ml_string_length(s) - len | 0) < ofs))
         { /*<<bytes.ml 59 7>>*/  /*<<bytes.ml 59 7>>*/ var
           r=
             /*<<bytes.ml 59 7>>*/ caml_create_string(len);
           /*<<bytes.ml 61 4>>*/  /*<<bytes.ml 61 4>>*/ caml_blit_string
           (s,ofs,r,0,len);
           /*<<bytes.ml 61 29>>*/ return r}
       /*<<bytes.ml 58 7>>*/ return  /*<<bytes.ml 58 7>>*/ invalid_arg(_A_) /*<<bytes.ml 63 5>>*/ }
     /*<<bytes.ml 45 20>>*/ function _B_(param)
     { /*<<bytes.ml 129 15>>*/ var
        /*<<bytes.ml 129 15>>*/ _lP_=param - 9 | 0,
        /*<<bytes.ml 129 15>>*/ switch$0=
        4 < _lP_ >>> 0?23 === _lP_?1:0:2 === _lP_?0:1;
       /*<<camlinternalFormatBasics.ml 502 8>>*/ return switch$0?1:0 /*<<bytes.ml 131 14>>*/ }
     /*<<bytes.ml 45 20>>*/ function _C_(s)
     { /*<<bytes.ml 134 2>>*/ var
        /*<<bytes.ml 134 2>>*/ len=
         /*<<bytes.ml 134 2>>*/ caml_ml_string_length(s),
        /*<<bytes.ml 134 2>>*/ _lK_=0,
        /*<<bytes.ml 135 2>>*/ i=[0,_lK_];
      for(;;)
       {if(i[1] < len)
         { /*<<bytes.ml 136 20>>*/ var
           _lL_=caml_string_unsafe_get(s,i[1]),
            /*<<bytes.ml 136 20>>*/ _lM_= /*<<bytes.ml 136 20>>*/ _B_(_lL_);
           /*<<bytes.ml 136 46>>*/ if(_lM_)
           { /*<<bytes.ml 137 4>>*/ i[1]++;continue}}
         /*<<bytes.ml 139 2>>*/  /*<<bytes.ml 139 2>>*/ var j=[0,len - 1 | 0];
        for(;;)
         {if(i[1] <= j[1])
           { /*<<bytes.ml 140 20>>*/ var
             _lN_=caml_string_unsafe_get(s,j[1]),
              /*<<bytes.ml 140 20>>*/ _lO_= /*<<bytes.ml 140 20>>*/ _B_(_lN_);
             /*<<bytes.ml 140 46>>*/ if(_lO_)
             { /*<<bytes.ml 141 4>>*/ j[1] += -1;continue}}
           /*<<bytes.ml 143 2>>*/ return i[1] <= j[1]
                  ? /*<<bytes.ml 144 4>>*/ _z_
                    (s,i[1],(j[1] - i[1] | 0) + 1 | 0)
                  :_y_}} /*<<bytes.ml 146 9>>*/ }
     /*<<bytes.ml 45 20>>*/ function _D_(f,s)
     { /*<<bytes.ml 191 2>>*/  /*<<bytes.ml 191 2>>*/ var
       l=
         /*<<bytes.ml 191 2>>*/ caml_ml_string_length(s);
       /*<<bytes.ml 192 2>>*/ if(0 === l)return s;
       /*<<bytes.ml 191 2>>*/ var
        /*<<bytes.ml 192 23>>*/ r=
         /*<<bytes.ml 192 23>>*/ caml_create_string(l),
        /*<<bytes.ml 192 23>>*/ _lF_=0,
        /*<<bytes.ml 194 4>>*/ _lG_=l - 1 | 0;
       /*<<bytes.ml 194 4>>*/ if(!(_lG_ < 0))
       {var i=_lF_;
         /*<<bytes.ml 194 26>>*/ for(;;)
         { /*<<bytes.ml 194 26>>*/ var
            /*<<bytes.ml 194 26>>*/ _lH_=
             /*<<bytes.ml 194 26>>*/ caml_string_unsafe_get(s,i),
            /*<<bytes.ml 194 41>>*/ _lI_=
             /*<<bytes.ml 194 41>>*/ caml_call1(f,_lH_);
           /*<<bytes.ml 194 61>>*/  /*<<bytes.ml 194 61>>*/ caml_string_unsafe_set
           (r,i,_lI_);
           /*<<bytes.ml 194 26>>*/  /*<<bytes.ml 194 61>>*/ var
           _lJ_=
            i + 1 | 0;
          if(_lG_ !== i){var i=_lJ_;continue}
          break}}
       /*<<bytes.ml 195 4>>*/ return r /*<<bytes.ml 196 5>>*/ }
     /*<<bytes.ml 45 20>>*/ function _E_(s)
     { /*<<bytes.ml 207 18>>*/ return  /*<<bytes.ml 207 18>>*/ _D_(_x_,s) /*<<bytes.ml 207 38>>*/ }
     /*<<bytes.ml 45 20>>*/ function _F_(s,lim,i,c)
     { /*<<?>>*/ var i$0=i;
       /*<<bytes.ml 220 2>>*/ for(;;)
       { /*<<bytes.ml 220 2>>*/ if(lim <= i$0)throw Not_found;
         /*<<bytes.ml 221 2>>*/ if
         ( /*<<bytes.ml 221 2>>*/ caml_string_unsafe_get(s,i$0) === c)
         return i$0;
         /*<<bytes.ml 221 36>>*/ var
          /*<<bytes.ml 221 36>>*/ i$1=i$0 + 1 | 0,
         i$0=i$1;
        continue} /*<<bytes.ml 221 61>>*/ }
     /*<<bytes.ml 45 20>>*/ function _G_(s,c)
     { /*<<bytes.ml 223 16>>*/ return  /*<<bytes.ml 223 16>>*/ _F_
              (s, /*<<bytes.ml 223 16>>*/ caml_ml_string_length(s),0,c) /*<<bytes.ml 223 42>>*/ }
     /*<<bytes.ml 45 20>>*/ function _H_(s,i,c)
     { /*<<?>>*/ var i$0=i;
       /*<<bytes.ml 231 2>>*/ for(;;)
       { /*<<bytes.ml 231 2>>*/ if(0 <= i$0)
         { /*<<bytes.ml 232 2>>*/ if
           ( /*<<bytes.ml 232 2>>*/ caml_string_unsafe_get(s,i$0) === c)
           return i$0;
           /*<<bytes.ml 232 36>>*/ var
            /*<<bytes.ml 232 36>>*/ i$1=i$0 - 1 | 0,
           i$0=i$1;
          continue}
         /*<<bytes.ml 231 31>>*/ throw Not_found} /*<<bytes.ml 232 58>>*/ }
     /*<<bytes.ml 45 20>>*/ function _I_(s,c)
     { /*<<bytes.ml 234 17>>*/ return  /*<<bytes.ml 234 17>>*/ _H_
              (s, /*<<bytes.ml 234 17>>*/ caml_ml_string_length(s) - 1 | 0,c) /*<<bytes.ml 234 46>>*/ }
     /*<<bytes.ml 45 20>>*/ function _J_(s,i,c)
     { /*<<bytes.ml 244 2>>*/  /*<<bytes.ml 244 2>>*/ var
       l=
         /*<<bytes.ml 244 2>>*/ caml_ml_string_length(s);
       /*<<bytes.ml 245 2>>*/ if(0 <= i)
       if(!(l < i))
         /*<<bytes.ml 248 4>>*/ try
         { /*<<bytes.ml 248 15>>*/  /*<<bytes.ml 248 15>>*/ _F_(s,l,i,c);
           /*<<bytes.ml 248 36>>*/  /*<<bytes.ml 248 36>>*/ var _lD_=1;
          return _lD_}
        catch(_lE_)
         {_lE_ = caml_wrap_exception(_lE_);
          if(_lE_ === Not_found)return 0;
          throw _lE_}
       /*<<bytes.ml 246 4>>*/ return  /*<<bytes.ml 246 4>>*/ invalid_arg(_K_) /*<<bytes.ml 248 64>>*/ }
     /*<<bytes.ml 45 20>>*/ function _L_(s,c)
     { /*<<bytes.ml 251 19>>*/ return  /*<<bytes.ml 251 19>>*/ _J_(s,0,c) /*<<bytes.ml 251 38>>*/ }
     /*<<bytes.ml 45 20>>*/ function _M_(_lC_){ /*<<?>>*/ return _lC_}
     /*<<bytes.ml 45 20>>*/ function _N_(_lB_){ /*<<?>>*/ return _lB_}
    function _O_(s,ofs,len)
     { /*<<string.ml 39 8>>*/ var
        /*<<string.ml 39 8>>*/ _lz_= /*<<string.ml 39 8>>*/ _M_(s),
        /*<<string.ml 39 2>>*/ _lA_= /*<<string.ml 39 2>>*/ _z_(_lz_,ofs,len);
       /*<<string.ml 39 23>>*/ return  /*<<string.ml 39 23>>*/ _N_(_lA_) /*<<string.ml 39 30>>*/ }
    function _P_(sep,l)
     { /*<<string.ml 46 2>>*/ if(l)
       { /*<<string.ml 49 6>>*/ var
         tl=l[2],
         hd=l[1],
         _lr_=0,
          /*<<string.ml 49 6>>*/ num=[0,_lr_],
          /*<<string.ml 49 6>>*/ len=[0,0],
          /*<<string.ml 50 6>>*/ _ls_=
          function(s)
           { /*<<string.ml 50 26>>*/ num[1]++;
             /*<<string.ml 50 36>>*/ len[1]
            =
            len[1]
            +
             /*<<string.ml 50 36>>*/ caml_ml_string_length(s)
            |
            0;
             /*<<string.ml 50 36>>*/ return 0 /*<<string.ml 50 58>>*/ };
         /*<<string.ml 50 6>>*/  /*<<string.ml 50 6>>*/ _w_(_ls_,l);
         /*<<string.ml 49 6>>*/ var
          /*<<string.ml 50 61>>*/ r=
           /*<<string.ml 50 61>>*/ caml_create_string
           (len[1]
            +
             /*<<string.ml 50 61>>*/ caml_mul
             ( /*<<string.ml 50 61>>*/ caml_ml_string_length(sep),
              num[1] - 1 | 0)
            |
            0),
          /*<<string.ml 52 6>>*/ _lt_=
           /*<<string.ml 52 6>>*/ caml_ml_string_length(hd);
         /*<<string.ml 52 6>>*/  /*<<string.ml 52 6>>*/ caml_blit_string
         (hd,0,r,0,_lt_);
         /*<<string.ml 49 6>>*/ var
          /*<<string.ml 52 38>>*/ pos=
          [0, /*<<string.ml 52 38>>*/ caml_ml_string_length(hd)],
          /*<<string.ml 54 6>>*/ _lu_=
          function(s)
           { /*<<string.ml 56 10>>*/ var
              /*<<string.ml 56 10>>*/ _lv_=
               /*<<string.ml 56 10>>*/ caml_ml_string_length(sep),
              /*<<string.ml 56 10>>*/ _lw_=pos[1];
             /*<<string.ml 56 10>>*/  /*<<string.ml 56 10>>*/ caml_blit_string
             (sep,0,r,_lw_,_lv_);
             /*<<string.ml 56 47>>*/ pos[1]
            =
            pos[1]
            +
             /*<<string.ml 56 47>>*/ caml_ml_string_length(sep)
            |
            0;
             /*<<string.ml 56 10>>*/ var
              /*<<string.ml 58 10>>*/ _lx_=
               /*<<string.ml 58 10>>*/ caml_ml_string_length(s),
              /*<<string.ml 58 10>>*/ _ly_=pos[1];
             /*<<string.ml 58 10>>*/  /*<<string.ml 58 10>>*/ caml_blit_string
             (s,0,r,_ly_,_lx_);
             /*<<string.ml 58 43>>*/ pos[1]
            =
            pos[1]
            +
             /*<<string.ml 58 43>>*/ caml_ml_string_length(s)
            |
            0;
             /*<<string.ml 58 43>>*/ return 0 /*<<string.ml 59 32>>*/ };
         /*<<string.ml 54 6>>*/  /*<<string.ml 54 6>>*/ _w_(_lu_,tl);
         /*<<string.ml 60 10>>*/ return  /*<<string.ml 60 10>>*/ _N_(r)}
       /*<<string.ml 47 10>>*/ return _Q_ /*<<string.ml 61 30>>*/ }
    function _R_(param)
     { /*<<string.ml 78 15>>*/ var
        /*<<string.ml 78 15>>*/ _lq_=param - 9 | 0,
        /*<<string.ml 78 15>>*/ switch$0=
        4 < _lq_ >>> 0?23 === _lq_?1:0:2 === _lq_?0:1;
       /*<<camlinternalFormatBasics.ml 502 8>>*/ return switch$0?1:0 /*<<string.ml 80 14>>*/ }
    function _S_(s)
     { /*<<string.ml 83 5>>*/  /*<<string.ml 83 5>>*/ var
       _lj_=
         /*<<string.ml 83 5>>*/ caml_string_equal(s,_T_);
       /*<<string.ml 83 11>>*/ if(_lj_)return s;
       /*<<string.ml 83 5>>*/ var
        /*<<string.ml 84 7>>*/ _lk_=
         /*<<string.ml 84 7>>*/ caml_string_unsafe_get(s,0),
        /*<<string.ml 84 10>>*/ _ll_= /*<<string.ml 84 10>>*/ _R_(_lk_);
       /*<<string.ml 84 35>>*/ if(!_ll_)
       { /*<<string.ml 84 39>>*/ var
         _lo_=caml_string_unsafe_get(s,caml_ml_string_length(s) - 1 | 0),
          /*<<string.ml 84 39>>*/ _lp_= /*<<string.ml 84 39>>*/ _R_(_lo_);
         /*<<string.ml 84 77>>*/ if(!_lp_)return s}
       /*<<string.ml 83 5>>*/ var
        /*<<string.ml 85 21>>*/ _lm_= /*<<string.ml 85 21>>*/ _M_(s),
        /*<<string.ml 85 13>>*/ _ln_= /*<<string.ml 85 13>>*/ _C_(_lm_);
       /*<<string.ml 85 29>>*/ return  /*<<string.ml 85 29>>*/ _N_(_ln_) /*<<string.ml 86 8>>*/ }
    function _U_(s,c)
     { /*<<string.ml 102 10>>*/  /*<<string.ml 102 10>>*/ var
       _li_=
         /*<<string.ml 102 10>>*/ _M_(s);
       /*<<string.ml 102 17>>*/ return  /*<<string.ml 102 17>>*/ _G_(_li_,c) /*<<string.ml 102 19>>*/ }
    function _V_(s,c)
     { /*<<string.ml 104 11>>*/  /*<<string.ml 104 11>>*/ var
       _lh_=
         /*<<string.ml 104 11>>*/ _M_(s);
       /*<<string.ml 104 18>>*/ return  /*<<string.ml 104 18>>*/ _I_(_lh_,c) /*<<string.ml 104 20>>*/ }
    function _W_(s,c)
     { /*<<string.ml 110 13>>*/  /*<<string.ml 110 13>>*/ var
       _lg_=
         /*<<string.ml 110 13>>*/ _M_(s);
       /*<<string.ml 110 20>>*/ return  /*<<string.ml 110 20>>*/ _L_(_lg_,c) /*<<string.ml 110 22>>*/ }
    function _X_(s)
     { /*<<string.ml 118 14>>*/ var
        /*<<string.ml 118 14>>*/ _le_= /*<<string.ml 118 14>>*/ _M_(s),
        /*<<string.ml 118 2>>*/ _lf_= /*<<string.ml 118 2>>*/ _E_(_le_);
       /*<<string.ml 118 21>>*/ return  /*<<string.ml 118 21>>*/ _N_(_lf_) /*<<string.ml 118 28>>*/ }
    function _Y_(x,y)
     { /*<<string.ml 126 28>>*/ return  /*<<string.ml 126 28>>*/ caml_string_compare
              (x,y) /*<<string.ml 126 50>>*/ }
     /*<<sys.ml 29 34>>*/  /*<<sys.ml 29 34>>*/ caml_set_oo_id([248,___,0]);
     /*<<sys.ml 29 34>>*/ var
      /*<<sys.ml 29 34>>*/ _Z_=16777211,
     _aa_=caml_set_oo_id([248,_$_,0]);
    function _ab_(param)
     { /*<<camlinternalLazy.ml 18 57>>*/ throw _aa_ /*<<camlinternalLazy.ml 18 57>>*/ }
    function _ac_(blk)
     { /*<<camlinternalLazy.ml 22 2>>*/ var
        /*<<camlinternalLazy.ml 22 2>>*/ closure=blk[1],
        /*<<camlinternalLazy.ml 23 2>>*/ _k$_=0;
       /*<<camlinternalLazy.ml 24 2>>*/ blk[_k$_ + 1] = _ab_;
       /*<<camlinternalLazy.ml 24 2>>*/ try
       { /*<<camlinternalLazy.ml 25 17>>*/ var
          /*<<camlinternalLazy.ml 25 17>>*/ _lc_=0,
          /*<<camlinternalLazy.ml 25 17>>*/ result=
           /*<<camlinternalLazy.ml 25 17>>*/ caml_call1(closure,_lc_),
          /*<<camlinternalLazy.ml 27 4>>*/ _ld_=0;
         /*<<camlinternalLazy.ml 28 4>>*/ blk[_ld_ + 1] = result;
         /*<<camlinternalLazy.ml 28 4>>*/  /*<<camlinternalLazy.ml 28 4>>*/ caml_obj_set_tag
         (blk,250);
         /*<<camlinternalLazy.ml 31 4>>*/ return result}
      catch(e)
       {e = caml_wrap_exception(e);
         /*<<camlinternalLazy.ml 31 4>>*/ var
          /*<<camlinternalLazy.ml 31 4>>*/ _la_=
          function(param)
           { /*<<camlinternalLazy.ml 31 63>>*/ throw e /*<<camlinternalLazy.ml 31 63>>*/ },
          /*<<camlinternalLazy.ml 31 4>>*/ _lb_=0;
         /*<<camlinternalLazy.ml 32 4>>*/ blk[_lb_ + 1] = _la_;
         /*<<camlinternalLazy.ml 32 11>>*/ throw e} /*<<camlinternalLazy.ml 32 11>>*/ }
    function _ad_(n)
     { /*<<buffer.ml 23 1>>*/ var
        /*<<buffer.ml 23 1>>*/ n$0=1 <= n?n:1,
        /*<<buffer.ml 24 1>>*/ n$1=16777211 < n$0?_Z_:n$0,
        /*<<buffer.ml 25 1>>*/ s=
         /*<<buffer.ml 25 1>>*/ caml_create_string(n$1);
       /*<<buffer.ml 26 1>>*/ return [0,s,0,n$1,s] /*<<buffer.ml 26 59>>*/ }
    caml_set_oo_id([248,_ae_,0]);
    var printers=[0,0];
    function register_printer(fn)
     { /*<<printexc.ml 220 2>>*/ printers[1] = [0,fn,printers[1]];
       /*<<printexc.ml 220 2>>*/ return 0 /*<<printexc.ml 220 29>>*/ }
    function _af_(str)
     { /*<<digest.ml 24 2>>*/ return  /*<<digest.ml 24 2>>*/ caml_md5_string
              (str,0, /*<<digest.ml 24 2>>*/ caml_ml_string_length(str)) /*<<digest.ml 24 41>>*/ }
    function new_state(param)
     { /*<<random.ml 32 21>>*/ var
        /*<<random.ml 32 21>>*/ _k9_=0,
        /*<<random.ml 32 28>>*/ _k__=
         /*<<random.ml 32 28>>*/ caml_make_vect(55,0);
       /*<<random.ml 32 43>>*/ return [0,_k__,_k9_] /*<<random.ml 32 54>>*/ }
    function full_init(s,seed)
     { /*<<random.ml 39 4>>*/ function combine(accu,x)
       { /*<<random.ml 39 47>>*/ var
          /*<<random.ml 39 47>>*/ _k7_=
           /*<<random.ml 39 47>>*/ string_of_int(x),
          /*<<random.ml 39 39>>*/ _k8_= /*<<random.ml 39 39>>*/ _b_(accu,_k7_);
         /*<<random.ml 39 63>>*/ return  /*<<random.ml 39 63>>*/ _af_(_k8_) /*<<random.ml 39 63>>*/ }
       /*<<random.ml 40 4>>*/ function extract(d)
       { /*<<random.ml 42 19>>*/ var
          /*<<random.ml 42 19>>*/ _k0_=
           /*<<random.ml 42 19>>*/ caml_string_get(d,3),
          /*<<random.ml 42 24>>*/ _k1_=_k0_ << 24,
          /*<<random.ml 41 61>>*/ _k2_=
           /*<<random.ml 41 61>>*/ caml_string_get(d,2),
          /*<<random.ml 41 66>>*/ _k3_=_k2_ << 16,
          /*<<random.ml 41 35>>*/ _k4_=
           /*<<random.ml 41 35>>*/ caml_string_get(d,1),
          /*<<random.ml 41 40>>*/ _k5_=_k4_ << 8,
          /*<<random.ml 41 16>>*/ _k6_=
           /*<<random.ml 41 16>>*/ caml_string_get(d,0);
         /*<<random.ml 41 21>>*/ return ((_k6_ + _k5_ | 0) + _k3_ | 0)
               +
               _k1_
               |
               0 /*<<random.ml 42 32>>*/ }
       /*<<random.ml 44 4>>*/ var
        /*<<random.ml 44 4>>*/ seed$0=0 === seed.length - 1?[0,0]:seed,
        /*<<random.ml 45 4>>*/ l=seed$0.length - 1,
        /*<<random.ml 45 4>>*/ _kJ_=0,
       i$0=_kJ_;
       /*<<random.ml 47 6>>*/ for(;;)
       { /*<<random.ml 47 6>>*/  /*<<random.ml 47 6>>*/ var _kY_=s[1];
         /*<<random.ml 47 6>>*/  /*<<random.ml 47 6>>*/ caml_check_bound
          (_kY_,i$0)
         [i$0 + 1]
        =
        i$0;
         /*<<random.ml 47 6>>*/  /*<<random.ml 47 20>>*/ var _kZ_=i$0 + 1 | 0;
        if(54 !== i$0){var i$0=_kZ_;continue}
         /*<<random.ml 47 6>>*/ var
          /*<<random.ml 49 4>>*/ accu=[0,_ag_],
          /*<<random.ml 49 4>>*/ _kK_=0,
          /*<<random.ml 50 4>>*/ _kL_=55,
          /*<<random.ml 50 22>>*/ _kM_= /*<<random.ml 50 22>>*/ max(_kL_,l),
          /*<<random.ml 50 30>>*/ _kN_=54 + _kM_ | 0;
         /*<<random.ml 50 30>>*/ if(!(_kN_ < 0))
         {var i=_kK_;
           /*<<random.ml 51 6>>*/ for(;;)
           { /*<<random.ml 51 6>>*/ var
              /*<<random.ml 51 6>>*/ j=i % 55 | 0,
              /*<<random.ml 52 6>>*/ k= /*<<random.ml 52 6>>*/ caml_mod(i,l),
              /*<<random.ml 53 28>>*/ _kO_=
               /*<<random.ml 53 28>>*/ caml_check_bound(seed$0,k)[k + 1],
              /*<<random.ml 53 36>>*/ _kP_=accu[1],
              /*<<random.ml 53 14>>*/ _kQ_=
               /*<<random.ml 53 14>>*/ combine(_kP_,_kO_);
             /*<<random.ml 53 36>>*/ accu[1] = _kQ_;
             /*<<random.ml 51 6>>*/ var
              /*<<random.ml 54 6>>*/ _kR_=accu[1],
              /*<<random.ml 54 33>>*/ _kS_=
               /*<<random.ml 54 33>>*/ extract(_kR_),
              /*<<random.ml 54 46>>*/ _kT_=s[1],
              /*<<random.ml 54 19>>*/ _kU_=
               /*<<random.ml 54 19>>*/ caml_check_bound(_kT_,j)[j + 1],
              /*<<random.ml 54 27>>*/ _kV_=(_kU_ ^ _kS_) & 1073741823,
              /*<<random.ml 54 27>>*/ _kW_=s[1];
             /*<<random.ml 54 6>>*/  /*<<random.ml 54 6>>*/ caml_check_bound
              (_kW_,j)
             [j + 1]
            =
            _kV_;
             /*<<random.ml 51 6>>*/  /*<<random.ml 54 64>>*/ var
             _kX_=
              i + 1 | 0;
            if(_kN_ !== i){var i=_kX_;continue}
            break}}
         /*<<random.ml 56 4>>*/ s[2] = 0;
         /*<<random.ml 56 4>>*/ return 0} /*<<random.ml 56 15>>*/ }
    function make(seed)
     { /*<<random.ml 60 4>>*/ var
        /*<<random.ml 60 4>>*/ _kI_=0,
        /*<<random.ml 60 17>>*/ result=
         /*<<random.ml 60 17>>*/ new_state(_kI_);
       /*<<random.ml 61 4>>*/  /*<<random.ml 61 4>>*/ full_init(result,seed);
       /*<<random.ml 61 25>>*/ return result /*<<random.ml 62 10>>*/ }
    function make_self_init(param)
     { /*<<random.ml 65 31>>*/  /*<<random.ml 65 31>>*/ var
       _kH_=
         /*<<random.ml 65 31>>*/ caml_sys_random_seed(0);
       /*<<random.ml 65 47>>*/ return  /*<<random.ml 65 47>>*/ make(_kH_) /*<<random.ml 65 47>>*/ }
    function bits(s)
     { /*<<random.ml 75 4>>*/ s[2] = (s[2] + 1 | 0) % 55 | 0;
       /*<<random.ml 76 4>>*/ var
        /*<<random.ml 76 4>>*/ _kA_=s[2],
        /*<<random.ml 76 4>>*/ curval=
         /*<<random.ml 76 4>>*/ caml_check_bound(s[1],_kA_)[_kA_ + 1],
        /*<<random.ml 77 4>>*/ _kC_=(s[2] + 24 | 0) % 55 | 0,
        /*<<random.ml 77 4>>*/ _kB_=curval ^ (curval >>> 25 | 0) & 31,
        /*<<random.ml 77 4>>*/ _kD_=s[1],
        /*<<random.ml 77 17>>*/ _kE_=
         /*<<random.ml 77 17>>*/ caml_check_bound(_kD_,_kC_)[_kC_ + 1],
        /*<<random.ml 77 43>>*/ newval=_kE_ + _kB_ | 0,
        /*<<random.ml 79 4>>*/ newval30=newval & 1073741823,
        /*<<random.ml 80 4>>*/ _kF_=s[2],
        /*<<random.ml 80 4>>*/ _kG_=s[1];
       /*<<random.ml 80 4>>*/  /*<<random.ml 80 4>>*/ caml_check_bound
        (_kG_,_kF_)
       [_kF_ + 1]
      =
      newval30;
       /*<<random.ml 80 28>>*/ return newval30 /*<<random.ml 81 12>>*/ }
    try
     { /*<<hashtbl.ml 43 8>>*/ var
        /*<<hashtbl.ml 43 8>>*/ _dX_=
         /*<<hashtbl.ml 43 8>>*/ caml_sys_getenv(_dW_),
       params=_dX_}
    catch(_ky_)
     {_ky_ = caml_wrap_exception(_ky_);
      if(_ky_ !== Not_found)throw _ky_;
       /*<<hashtbl.ml 44 4>>*/ try
       { /*<<hashtbl.ml 44 8>>*/ var
          /*<<hashtbl.ml 44 8>>*/ _dV_=
           /*<<hashtbl.ml 44 8>>*/ caml_sys_getenv(_dU_),
         _ai_=_dV_}
      catch(_kz_)
       {_kz_ = caml_wrap_exception(_kz_);
        if(_kz_ !== Not_found)throw _kz_;
        var _ai_=_ah_}
      var params=_ai_}
     /*<<hashtbl.ml 45 2>>*/ var
      /*<<hashtbl.ml 45 2>>*/ _aj_=82,
      /*<<hashtbl.ml 45 2>>*/ _ak_= /*<<hashtbl.ml 45 2>>*/ _W_(params,_aj_),
      /*<<hashtbl.ml 45 28>>*/ _al_=
      [246,function(_kx_){ /*<<?>>*/ return make_self_init(0)}];
     /*<<hashtbl.ml 45 28>>*/ function _am_(x,n)
     { /*<<?>>*/ var x$0=x;
       /*<<hashtbl.ml 56 2>>*/ for(;;)
       { /*<<hashtbl.ml 56 2>>*/ if(n <= x$0)return x$0;
         /*<<hashtbl.ml 57 7>>*/ if(4194303 < (x$0 * 2 | 0))return x$0;
         /*<<hashtbl.ml 58 7>>*/ var
          /*<<hashtbl.ml 58 7>>*/ x$1=x$0 * 2 | 0,
         x$0=x$1;
        continue} /*<<hashtbl.ml 58 30>>*/ }
     /*<<hashtbl.ml 45 28>>*/ function _an_(opt,initial_size)
     { /*<<hashtbl.ml 61 2>>*/ if(opt)
        /*<<hashtbl.ml 60 22>>*/ var
         /*<<hashtbl.ml 60 22>>*/ sth=opt[1],
        random=sth;
      else
       var random=_ak_;
       /*<<hashtbl.ml 61 2>>*/ var
        /*<<hashtbl.ml 61 2>>*/ _ks_=16,
        /*<<hashtbl.ml 61 10>>*/ s=
         /*<<hashtbl.ml 61 10>>*/ _am_(_ks_,initial_size);
       /*<<hashtbl.ml 62 2>>*/ if(random)
        /*<<hashtbl.ml 62 28>>*/ var
         /*<<hashtbl.ml 62 28>>*/ _kt_=
          /*<<hashtbl.ml 62 28>>*/ caml_obj_tag(_al_),
         /*<<hashtbl.ml 62 28>>*/ _ku_=
         250 === _kt_?_al_[1]:246 === _kt_?_ac_(_al_):_al_,
         /*<<hashtbl.ml 62 28>>*/ _kv_= /*<<hashtbl.ml 62 28>>*/ bits(_ku_),
        seed=_kv_;
      else
       var seed=0;
       /*<<hashtbl.ml 61 2>>*/  /*<<hashtbl.ml 63 52>>*/ var
       _kw_=
         /*<<hashtbl.ml 63 52>>*/ caml_make_vect(s,0);
       /*<<hashtbl.ml 63 70>>*/ return [0,0,_kw_,seed,s] /*<<hashtbl.ml 63 72>>*/ }
    var null_char=0,default_token_buffer_size=1024;
    function create(iname,next)
     { /*<<scanf.ml 250 13>>*/  /*<<scanf.ml 250 13>>*/ var
       _kr_=
         /*<<scanf.ml 250 13>>*/ _ad_(default_token_buffer_size);
       /*<<scanf.ml 250 52>>*/ return [0,0,null_char,0,0,0,0,next,_kr_,iname] /*<<scanf.ml 252 3>>*/ }
     /*<<scanf.ml 266 42>>*/  /*<<scanf.ml 266 42>>*/ var len=1024;
     /*<<scanf.ml 266 42>>*/ function scan_raise_at_end(ic)
     { /*<<scanf.ml 330 47>>*/ throw End_of_file /*<<scanf.ml 330 47>>*/ }
     /*<<scanf.ml 266 42>>*/ function from_ic(scan_close_ic,iname,ic)
     { /*<<scanf.ml 334 4>>*/ var
        /*<<scanf.ml 334 4>>*/ buf=
         /*<<scanf.ml 334 4>>*/ caml_create_string(1024),
        /*<<scanf.ml 334 4>>*/ _km_=0,
        /*<<scanf.ml 335 4>>*/ i=[0,_km_],
        /*<<scanf.ml 335 4>>*/ _kn_=0,
        /*<<scanf.ml 336 4>>*/ lim=[0,_kn_],
        /*<<scanf.ml 336 4>>*/ _ko_=0,
        /*<<scanf.ml 337 4>>*/ eof=[0,_ko_];
       /*<<scanf.ml 338 4>>*/ function next(param)
       { /*<<scanf.ml 339 6>>*/ if(i[1] < lim[1])
         { /*<<scanf.ml 339 24>>*/  /*<<scanf.ml 339 24>>*/ var
           c=
             /*<<scanf.ml 339 24>>*/ caml_string_get(buf,i[1]);
           /*<<scanf.ml 339 58>>*/ i[1]++;
           /*<<scanf.ml 339 66>>*/ return c}
         /*<<scanf.ml 340 6>>*/ if(eof[1])throw End_of_file;
         /*<<scanf.ml 340 42>>*/ var
          /*<<scanf.ml 340 42>>*/ _kp_=0,
          /*<<scanf.ml 341 15>>*/ _kq_=
           /*<<scanf.ml 341 15>>*/ input(ic,buf,_kp_,len);
         /*<<scanf.ml 341 33>>*/ lim[1] = _kq_;
         /*<<scanf.ml 342 8>>*/ return 0 === lim[1]
                ?(eof[1]
                  =
                  1,
                   /*<<scanf.ml 342 44>>*/ caml_call1(scan_close_ic,ic))
                :(i[1] = 1, /*<<scanf.ml 344 10>>*/ caml_string_get(buf,0)) /*<<scanf.ml 346 9>>*/ }
       /*<<scanf.ml 347 4>>*/ return  /*<<scanf.ml 347 4>>*/ create
              (iname,next) /*<<scanf.ml 347 21>>*/ }
     /*<<scanf.ml 350 54>>*/  /*<<scanf.ml 350 54>>*/ var _ap_=[0,_ao_,stdin];
     /*<<scanf.ml 367 4>>*/  /*<<scanf.ml 367 4>>*/ from_ic
     (scan_raise_at_end,_ap_,stdin);
     /*<<scanf.ml 402 51>>*/  /*<<scanf.ml 402 51>>*/ caml_set_oo_id
     ([248,_aq_,0]);
    function _ar_(name,exn)
     { /*<<callback.ml 24 16>>*/ var
        /*<<callback.ml 24 16>>*/ _kl_=
         /*<<callback.ml 24 16>>*/ caml_obj_tag(exn),
        /*<<callback.ml 24 27>>*/ slot=_kl_ === 248?exn:exn[1];
       /*<<callback.ml 25 2>>*/ return  /*<<callback.ml 25 2>>*/ caml_register_named_value
              (name,slot) /*<<callback.ml 25 32>>*/ }
     /*<<js.ml 50 15>>*/ var
      /*<<js.ml 50 15>>*/ jsoo_obj=joo_global_object,
      /*<<js.ml 66 20>>*/ null$0=null,
      /*<<js.ml 69 28>>*/ undefined$0=undefined;
     /*<<js.ml 69 59>>*/ function _as_(x)
     { /*<<js.ml 92 20>>*/  /*<<js.ml 92 20>>*/ var _kk_=x == null$0?1:0;
       /*<<js.ml 92 40>>*/ return 1 - _kk_ /*<<js.ml 92 41>>*/ }
     /*<<js.ml 245 24>>*/ var
      /*<<js.ml 245 24>>*/ array_length=jsoo_obj.Array,
      /*<<js.ml 392 11>>*/ Error$0=
       /*<<js.ml 392 11>>*/ caml_set_oo_id([248,_at_,0]),
      /*<<js.ml 404 54>>*/ _au_={},
      /*<<js.ml 404 69>>*/ _av_=[0,Error$0,_au_];
     /*<<js.ml 404 8>>*/  /*<<js.ml 404 8>>*/ _ar_(_aw_,_av_);
     /*<<js.ml 406 23>>*/ (function(exn)
      { /*<<js.ml 406 41>>*/ throw exn /*<<js.ml 406 24>>*/ });
     /*<<js.ml 413 21>>*/ function _ax_(param)
     { /*<<js.ml 458 5>>*/ if(param[1] === Error$0)
       { /*<<js.ml 458 25>>*/ var
          /*<<js.ml 458 25>>*/ e=param[2],
          /*<<js.ml 458 42>>*/ jsoo_res= /*<<js.ml 458 42>>*/ e.toString(),
          /*<<js.ml 458 31>>*/ _kj_=
           /*<<js.ml 458 31>>*/ caml_js_to_string(jsoo_res);
         /*<<js.ml 458 57>>*/ return [0,_kj_]}
       /*<<js.ml 458 66>>*/ return 0 /*<<js.ml 458 70>>*/ }
     /*<<js.ml 457 2>>*/  /*<<js.ml 457 2>>*/ register_printer(_ax_);
     /*<<js.ml 458 71>>*/ function _ay_(jsoo_self)
     { /*<<js.ml 463 10>>*/  /*<<js.ml 463 10>>*/ var
       _kh_=
        jsoo_self instanceof array_length?1:0;
       /*<<js.ml 463 40>>*/ if(_kh_)return 0;
       /*<<js.ml 463 10>>*/ var
        /*<<js.ml 464 29>>*/ jsoo_res=
         /*<<js.ml 464 29>>*/ jsoo_self.toString(),
        /*<<js.ml 464 18>>*/ _ki_=
         /*<<js.ml 464 18>>*/ caml_js_to_string(jsoo_res);
       /*<<js.ml 464 43>>*/ return [0,_ki_] /*<<js.ml 464 44>>*/ }
     /*<<js.ml 460 2>>*/  /*<<js.ml 460 2>>*/ register_printer(_ay_);
     /*<<src/Atom.re 9 21>>*/ (function(s)
      { /*<<src/Atom.re 9 34>>*/ return  /*<<src/Atom.re 9 41>>*/  /*<<src/Atom.re 9 41>>*/  /*<<src/Atom.re 9 41>>*/ s.split
                 ("\n").map
                (function(ss)
                  { /*<<src/Atom.re 9 73>>*/ return  /*<<src/Atom.re 9 80>>*/ ss.trimRight
                           () /*<<src/Atom.re 9 59>>*/ }).join
               ("\n") /*<<src/Atom.re 9 21>>*/ });
     /*<<src/Atom.re 11 17>>*/ var
      /*<<src/Atom.re 11 17>>*/ atomGlobal=atom,
      /*<<src/Atom.re 13 16>>*/ atomPoint=
       /*<<src/Atom.re 13 16>>*/ require("atom").Point,
      /*<<src/Atom.re 15 16>>*/ atomRange=
       /*<<src/Atom.re 15 16>>*/ require("atom").Range,
      /*<<src/Atom.re 17 22>>*/ bufferedProcess=
       /*<<src/Atom.re 17 22>>*/ require("atom").BufferedProcess;
     /*<<src/Atom.re 20 16>>*/ function isString(s)
     { /*<<src/Atom.re 20 29>>*/ return typeof s
             ===
             "string"
             ||
             s instanceof String /*<<src/Atom.re 20 16>>*/ }
     /*<<src/Atom.re 22 16>>*/ function isNumber(n)
     { /*<<src/Atom.re 22 29>>*/ return typeof n === "number" /*<<src/Atom.re 22 16>>*/ }
     /*<<src/Atom.re 24 19>>*/ (function(n)
      { /*<<src/Atom.re 24 32>>*/ return typeof n === "undefined" /*<<src/Atom.re 24 19>>*/ });
     /*<<src/Atom.re 26 14>>*/ function isNull(n)
     { /*<<src/Atom.re 26 27>>*/ return n === null /*<<src/Atom.re 26 14>>*/ }
     /*<<src/Atom.re 28 14>>*/ function isBool(n)
     { /*<<src/Atom.re 28 27>>*/ return typeof n === "boolean" /*<<src/Atom.re 28 14>>*/ }
     /*<<src/Atom.re 30 20>>*/ var
      /*<<src/Atom.re 30 20>>*/ arrayIsArray=Array.isArray,
      /*<<src/Atom.re 32 14>>*/ promise=Promise,
      /*<<src/Atom.re 34 15>>*/ fixedEnv=
       /*<<src/Atom.re 34 15>>*/ require("../lib/fixedEnv");
     /*<<src/Atom.re 34 61>>*/ function _az_(fieldVal)
     { /*<<src/Atom.re 71 7>>*/  /*<<src/Atom.re 71 7>>*/ var
       _j$_=
         /*<<src/Atom.re 71 7>>*/ arrayIsArray(fieldVal);
       /*<<src/Atom.re 71 71>>*/ if(_j$_)
       { /*<<src/Atom.re 72 37>>*/ var
          /*<<src/Atom.re 72 37>>*/ _ka_=
           /*<<src/Atom.re 72 37>>*/ caml_js_to_array(fieldVal),
          /*<<src/Atom.re 72 20>>*/ jsArray=
           /*<<src/Atom.re 72 20>>*/ _g_(_az_,_ka_);
         /*<<src/Atom.re 73 6>>*/ return [3,jsArray]}
       /*<<src/Atom.re 71 7>>*/  /*<<src/Atom.re 74 14>>*/ var
       _kb_=
         /*<<src/Atom.re 74 14>>*/ isString(fieldVal);
       /*<<src/Atom.re 76 5>>*/ if(_kb_)
       { /*<<src/Atom.re 77 17>>*/  /*<<src/Atom.re 77 17>>*/ var
         _kc_=
           /*<<src/Atom.re 77 17>>*/ caml_js_to_string(fieldVal);
         /*<<src/Atom.re 77 40>>*/ return [0,_kc_]}
       /*<<src/Atom.re 71 7>>*/  /*<<src/Atom.re 78 14>>*/ var
       _kd_=
         /*<<src/Atom.re 78 14>>*/ isBool(fieldVal);
       /*<<src/Atom.re 80 5>>*/ if(_kd_)
       { /*<<src/Atom.re 81 15>>*/  /*<<src/Atom.re 81 15>>*/ var
         _ke_=
          fieldVal | 0;
         /*<<src/Atom.re 81 55>>*/ return [2,_ke_]}
       /*<<src/Atom.re 71 7>>*/  /*<<src/Atom.re 82 14>>*/ var
       _kf_=
         /*<<src/Atom.re 82 14>>*/ isNumber(fieldVal);
       /*<<src/Atom.re 84 5>>*/ if(_kf_)return [1,fieldVal];
       /*<<src/Atom.re 71 7>>*/  /*<<src/Atom.re 86 14>>*/ var
       _kg_=
         /*<<src/Atom.re 86 14>>*/ isNull(fieldVal);
       /*<<src/Atom.re 88 5>>*/ return _kg_?0:1 /*<<src/Atom.re 92 5>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aA_(o)
     { /*<<src/Atom.re 102 4>>*/ if(typeof o !== "number" && 0 === o[0])
       { /*<<src/Atom.re 103 31>>*/  /*<<src/Atom.re 103 31>>*/ var s=o[1];
         /*<<src/Atom.re 103 31>>*/ return s}
       /*<<src/Atom.re 104 11>>*/  /*<<src/Atom.re 104 11>>*/ var
       _j__=
        [0,Invalid_argument,_aB_];
       /*<<src/Atom.re 104 71>>*/ throw _j__ /*<<src/Atom.re 105 5>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aC_(envVar,strVal)
     { /*<<src/Atom.re 111 78>>*/ var
        /*<<src/Atom.re 111 78>>*/ _j6_=
         /*<<src/Atom.re 111 78>>*/ strVal.toString(),
        /*<<src/Atom.re 111 21>>*/ _j7_=jsoo_obj.process,
        /*<<src/Atom.re 111 63>>*/ _j8_=_j7_.env;
       /*<<src/Atom.re 111 70>>*/ _j8_[envVar] = _j6_;
       /*<<src/Atom.re 111 78>>*/  /*<<src/Atom.re 112 34>>*/ var
       _j9_=
         /*<<src/Atom.re 112 34>>*/ strVal.toString();
       /*<<src/Atom.re 112 52>>*/ return fixedEnv[envVar] = _j9_ /*<<src/Atom.re 113 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aD_(configKey)
     { /*<<src/Atom.re 117 35>>*/ var
        /*<<src/Atom.re 117 35>>*/ config=atomGlobal.config,
        /*<<src/Atom.re 119 4>>*/ _j4_=
         /*<<src/Atom.re 119 4>>*/ configKey.toString(),
        /*<<src/Atom.re 119 21>>*/ _j5_=
         /*<<src/Atom.re 119 21>>*/ config.get(_j4_);
       /*<<src/Atom.re 119 98>>*/ return  /*<<src/Atom.re 119 98>>*/ _az_
              (_j5_) /*<<src/Atom.re 120 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aE_(param)
     {var column=param[2],row=param[1];
       /*<<src/Atom.re 132 4>>*/ return new atomPoint(row,column)}
     /*<<src/Atom.re 34 61>>*/ function _aF_(jsP)
     { /*<<src/Atom.re 134 7>>*/  /*<<src/Atom.re 134 7>>*/ var
       _jZ_=
         /*<<src/Atom.re 134 7>>*/ arrayIsArray(jsP);
       /*<<src/Atom.re 134 66>>*/ if(_jZ_)
       { /*<<src/Atom.re 134 67>>*/ var
          /*<<src/Atom.re 134 67>>*/ arr=
           /*<<src/Atom.re 134 67>>*/ caml_js_to_array(jsP),
          /*<<src/Atom.re 134 67>>*/ _j0_=1,
          /*<<src/Atom.re 136 16>>*/ _j1_=
           /*<<src/Atom.re 136 16>>*/ caml_check_bound(arr,1)[_j0_ + 1],
          /*<<src/Atom.re 136 23>>*/ _j2_=0,
          /*<<src/Atom.re 136 7>>*/ _j3_=
           /*<<src/Atom.re 136 7>>*/ caml_check_bound(arr,0)[_j2_ + 1];
         /*<<src/Atom.re 136 14>>*/ return [0,_j3_,_j1_]}
       /*<<src/Atom.re 134 7>>*/ var
        /*<<src/Atom.re 137 11>>*/ row=jsP.row,
        /*<<src/Atom.re 139 6>>*/ col=jsP.column;
       /*<<src/Atom.re 140 6>>*/ return [0,row,col] /*<<src/Atom.re 141 5>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aH_(param)
     { /*<<src/Atom.re 151 61>>*/ var
       endRowColumn=param[2],
       startRowColumn=param[1],
        /*<<src/Atom.re 151 61>>*/ _jX_=
         /*<<src/Atom.re 151 61>>*/ _aE_(endRowColumn),
        /*<<src/Atom.re 151 34>>*/ _jY_=
         /*<<src/Atom.re 151 34>>*/ _aE_(startRowColumn);
       /*<<src/Atom.re 151 59>>*/ return new atomRange(_jY_,_jX_)}
     /*<<src/Atom.re 34 61>>*/ function _aI_(jsRange)
     { /*<<src/Atom.re 153 7>>*/  /*<<src/Atom.re 153 7>>*/ var
       _jH_=
         /*<<src/Atom.re 153 7>>*/ arrayIsArray(jsRange);
       /*<<src/Atom.re 153 70>>*/ if(_jH_)
       { /*<<src/Atom.re 153 71>>*/ var
          /*<<src/Atom.re 153 71>>*/ arr=
           /*<<src/Atom.re 153 71>>*/ caml_js_to_array(jsRange),
          /*<<src/Atom.re 153 71>>*/ _jI_=0,
          /*<<src/Atom.re 155 35>>*/ _jJ_=
           /*<<src/Atom.re 155 35>>*/ caml_check_bound(arr,0)[_jI_ + 1],
          /*<<src/Atom.re 155 42>>*/ startPoint=
           /*<<src/Atom.re 155 42>>*/ caml_js_to_array(_jJ_),
          /*<<src/Atom.re 155 42>>*/ _jK_=1,
          /*<<src/Atom.re 156 33>>*/ _jL_=
           /*<<src/Atom.re 156 33>>*/ caml_check_bound(arr,1)[_jK_ + 1],
          /*<<src/Atom.re 156 40>>*/ endPoint=
           /*<<src/Atom.re 156 40>>*/ caml_js_to_array(_jL_),
          /*<<src/Atom.re 156 40>>*/ _jM_=1,
          /*<<src/Atom.re 157 56>>*/ _jN_=
           /*<<src/Atom.re 157 56>>*/ caml_check_bound(endPoint,1)[_jM_ + 1],
          /*<<src/Atom.re 157 68>>*/ _jO_=0,
          /*<<src/Atom.re 157 42>>*/ _jP_=
           /*<<src/Atom.re 157 42>>*/ caml_check_bound(endPoint,0)[_jO_ + 1],
          /*<<src/Atom.re 157 54>>*/ _jQ_=[0,_jP_,_jN_],
          /*<<src/Atom.re 157 54>>*/ _jR_=1,
          /*<<src/Atom.re 157 24>>*/ _jS_=
           /*<<src/Atom.re 157 24>>*/ caml_check_bound(startPoint,1)[_jR_ + 1],
          /*<<src/Atom.re 157 38>>*/ _jT_=0,
          /*<<src/Atom.re 157 8>>*/ _jU_=
           /*<<src/Atom.re 157 8>>*/ caml_check_bound(startPoint,0)[_jT_ + 1];
         /*<<src/Atom.re 157 22>>*/ return [0,[0,_jU_,_jS_],_jQ_]}
       /*<<src/Atom.re 153 7>>*/ var
        /*<<src/Atom.re 158 11>>*/ startPoint$0=jsRange.start,
        /*<<src/Atom.re 160 6>>*/ endPoint$0=jsRange.end,
        /*<<src/Atom.re 161 32>>*/ _jV_=
         /*<<src/Atom.re 161 32>>*/ _aF_(endPoint$0),
        /*<<src/Atom.re 161 7>>*/ _jW_=
         /*<<src/Atom.re 161 7>>*/ _aF_(startPoint$0);
       /*<<src/Atom.re 161 30>>*/ return [0,_jW_,_jV_] /*<<src/Atom.re 162 5>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aJ_(buffer)
     { /*<<src/Atom.re 172 50>>*/  /*<<src/Atom.re 172 50>>*/ var
       _jG_=
         /*<<src/Atom.re 172 50>>*/ buffer.getText();
       /*<<src/Atom.re 172 98>>*/ return  /*<<src/Atom.re 172 98>>*/ caml_js_to_string
              (_jG_) /*<<src/Atom.re 172 98>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aK_(buffer,range)
     { /*<<src/Atom.re 174 50>>*/ var
        /*<<src/Atom.re 174 50>>*/ _jE_=
         /*<<src/Atom.re 174 50>>*/ _aH_(range),
        /*<<src/Atom.re 173 74>>*/ _jF_=
         /*<<src/Atom.re 173 74>>*/ buffer.getTextInRange(_jE_);
       /*<<src/Atom.re 175 3>>*/ return  /*<<src/Atom.re 175 3>>*/ caml_js_to_string
              (_jF_) /*<<src/Atom.re 175 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aL_(cursor)
     { /*<<src/Atom.re 182 52>>*/  /*<<src/Atom.re 182 52>>*/ var
       _jD_=
         /*<<src/Atom.re 182 52>>*/ cursor.getBufferPosition();
       /*<<src/Atom.re 184 3>>*/ return  /*<<src/Atom.re 184 3>>*/ _aF_(_jD_) /*<<src/Atom.re 184 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aM_(jsCursor)
     { /*<<src/Atom.re 190 25>>*/ return jsCursor /*<<src/Atom.re 190 33>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aN_(grammar)
     { /*<<src/Atom.re 195 35>>*/  /*<<src/Atom.re 195 35>>*/ var
       _jC_=
        grammar.name;
       /*<<src/Atom.re 195 65>>*/ return  /*<<src/Atom.re 195 65>>*/ caml_js_to_string
              (_jC_) /*<<src/Atom.re 195 65>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aO_(jsEditor)
     { /*<<src/Atom.re 200 28>>*/ return jsEditor /*<<src/Atom.re 200 36>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aP_(editor,bufferRow)
     { /*<<src/Atom.re 202 65>>*/  /*<<src/Atom.re 202 65>>*/ var
       _jB_=
         /*<<src/Atom.re 202 65>>*/ editor.lineTextForBufferRow(bufferRow);
       /*<<src/Atom.re 204 3>>*/ return  /*<<src/Atom.re 204 3>>*/ caml_js_to_string
              (_jB_) /*<<src/Atom.re 204 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aQ_(editor)
     { /*<<src/Atom.re 205 36>>*/ return  /*<<src/Atom.re 205 36>>*/ editor.getBuffer
              () /*<<src/Atom.re 205 84>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aR_(editor)
     { /*<<src/Atom.re 206 24>>*/ var
        /*<<src/Atom.re 206 24>>*/ path=
         /*<<src/Atom.re 206 24>>*/ editor.getPath(),
        /*<<src/Atom.re 208 4>>*/ match= /*<<src/Atom.re 208 4>>*/ _as_(path);
       /*<<src/Atom.re 208 20>>*/ if(0 === match)return 0;
       /*<<src/Atom.re 206 24>>*/  /*<<src/Atom.re 208 28>>*/ var
       _jA_=
         /*<<src/Atom.re 208 28>>*/ caml_js_to_string(path);
       /*<<src/Atom.re 208 47>>*/ return [0,_jA_] /*<<src/Atom.re 209 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aS_(editor)
     { /*<<src/Atom.re 212 43>>*/ var
        /*<<src/Atom.re 212 43>>*/ _jy_=
         /*<<src/Atom.re 212 43>>*/ editor.getCursors(),
        /*<<src/Atom.re 212 94>>*/ _jz_=
         /*<<src/Atom.re 212 94>>*/ caml_js_to_array(_jy_),
        /*<<src/Atom.re 212 6>>*/ arr=
         /*<<src/Atom.re 212 6>>*/ _g_(_aM_,_jz_);
       /*<<src/Atom.re 213 4>>*/ return  /*<<src/Atom.re 213 4>>*/ _h_(arr) /*<<src/Atom.re 214 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aT_(editor)
     { /*<<src/Atom.re 215 38>>*/ return  /*<<src/Atom.re 215 38>>*/ editor.getGrammar
              () /*<<src/Atom.re 215 87>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aU_(editor,bufferRanges)
     { /*<<src/Atom.re 217 14>>*/ var
        /*<<src/Atom.re 217 14>>*/ _jw_=
         /*<<src/Atom.re 217 14>>*/ _g_(_aH_,bufferRanges),
        /*<<src/Atom.re 217 47>>*/ arr=
         /*<<src/Atom.re 217 47>>*/ function(_jx_)
          { /*<<?>>*/ return caml_js_from_array(_jx_)}
         (_jw_);
       /*<<src/Atom.re 218 4>>*/ return  /*<<src/Atom.re 218 4>>*/ editor.setSelectedBufferRanges
              (arr) /*<<src/Atom.re 219 3>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aV_(executor)
     { /*<<src/Atom.re 249 49>>*/  /*<<src/Atom.re 249 49>>*/ var
       _jv_=
         /*<<src/Atom.re 249 49>>*/ caml_js_wrap_callback(executor);
       /*<<src/Atom.re 249 76>>*/ return new promise(_jv_) /*<<src/Atom.re 249 78>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aW_(opts)
     { /*<<src/Atom.re 261 26>>*/ var
        /*<<src/Atom.re 261 26>>*/ _jp_=opts[3],
        /*<<src/Atom.re 264 30>>*/ _jq_=
         /*<<src/Atom.re 264 30>>*/ _jp_.toString(),
        /*<<src/Atom.re 264 51>>*/ _jr_=opts[2],
        /*<<src/Atom.re 263 37>>*/ _js_=!!_jr_,
        /*<<src/Atom.re 263 63>>*/ _jt_=opts[1],
        /*<<src/Atom.re 262 32>>*/ _ju_=
         /*<<src/Atom.re 262 32>>*/ _jt_.toString();
       /*<<src/Atom.re 262 55>>*/ return {"detail":_ju_,
              "dismissable":_js_,
              "icon":_jq_} /*<<src/Atom.re 265 4>>*/ }
     /*<<src/Atom.re 34 61>>*/ function _aY_(opt,title)
     { /*<<src/Atom.re 268 4>>*/ if(opt)
        /*<<src/Atom.re 267 29>>*/ var
         /*<<src/Atom.re 267 29>>*/ sth=opt[1],
        opts=sth;
      else
       var opts=[0,_aX_[1],_aX_[2],_aZ_];
       /*<<src/Atom.re 271 44>>*/ var
        /*<<src/Atom.re 271 44>>*/ _jm_= /*<<src/Atom.re 271 44>>*/ _aW_(opts),
        /*<<src/Atom.re 271 25>>*/ _jn_=
         /*<<src/Atom.re 271 25>>*/ title.toString(),
        /*<<src/Atom.re 269 6>>*/ _jo_=atomGlobal.notifications;
       /*<<src/Atom.re 269 48>>*/ return  /*<<src/Atom.re 269 48>>*/ _jo_.addError
              (_jn_,_jm_) /*<<src/Atom.re 271 62>>*/ }
     /*<<src/Atom.re 34 61>>*/  /*<<src/Atom.re 34 61>>*/ var _a0_=0;
     /*<<src/Atom.re 296 39>>*/ ({});
     /*<<src/Atom.re 296 57>>*/ function _a2_(process,str)
     { /*<<src/Atom.re 303 65>>*/ var
        /*<<src/Atom.re 303 65>>*/ _jk_=
         /*<<src/Atom.re 303 65>>*/ str.toString(),
        /*<<src/Atom.re 303 6>>*/ _jl_=process.stdin;
       /*<<src/Atom.re 303 37>>*/ return  /*<<src/Atom.re 303 37>>*/ _jl_.write
              (_jk_) /*<<src/Atom.re 303 82>>*/ }
     /*<<src/Atom.re 296 57>>*/ function _a3_(process)
     { /*<<src/Atom.re 304 51>>*/  /*<<src/Atom.re 304 51>>*/ var
       _jj_=
        process.stdin;
       /*<<src/Atom.re 304 82>>*/ return  /*<<src/Atom.re 304 82>>*/ _jj_.end
              () /*<<src/Atom.re 304 98>>*/ }
     /*<<src/Atom.re 296 57>>*/ function _a4_
     (opts,stdOut,stdErr,exit,cmd,args)
     { /*<<src/Atom.re 325 63>>*/  /*<<src/Atom.re 325 63>>*/ var
       _iY_=
         /*<<src/Atom.re 325 63>>*/ _j_(args);
       /*<<src/Atom.re 325 83>>*/ function _iZ_(_ji_)
       { /*<<?>>*/ return _ji_.toString()}
       /*<<src/Atom.re 325 42>>*/ var
        /*<<src/Atom.re 325 42>>*/ _i0_=
         /*<<src/Atom.re 325 42>>*/ _g_(_iZ_,_iY_),
        /*<<src/Atom.re 325 84>>*/ _i1_=
         /*<<src/Atom.re 325 84>>*/ caml_js_from_array(_i0_),
        /*<<src/Atom.re 325 85>>*/ _i2_=[0,_a5_,_i1_],
        /*<<src/Atom.re 324 35>>*/ _i3_=
         /*<<src/Atom.re 324 35>>*/ cmd.toString(),
        /*<<src/Atom.re 324 50>>*/ fields=[0,[0,_a6_,_i3_],_i2_];
       /*<<src/Atom.re 327 4>>*/ if(opts)
        /*<<src/Atom.re 331 8>>*/ var
         /*<<src/Atom.re 331 8>>*/ opts$0=opts[1],
         /*<<src/Atom.re 331 8>>*/ _i4_=opts$0[3],
         /*<<src/Atom.re 334 40>>*/ _i5_=!!_i4_,
         /*<<src/Atom.re 334 63>>*/ jsOptions=
         {"cwd":opts$0[1],"env":opts$0[2],"detached":_i5_},
         /*<<src/Atom.re 336 8>>*/ _i6_=[0,[0,_a7_,jsOptions]],
         /*<<src/Atom.re 336 8>>*/ _i7_=
          /*<<src/Atom.re 336 8>>*/ _f_(fields,_i6_),
        fields$0=_i7_;
      else
       var fields$0=fields;
       /*<<src/Atom.re 338 4>>*/ if(stdOut)
        /*<<src/Atom.re 342 8>>*/ var
         /*<<src/Atom.re 342 8>>*/ so=stdOut[1],
         /*<<src/Atom.re 342 8>>*/ cb=
         function(jsStr)
          { /*<<src/Atom.re 342 27>>*/  /*<<src/Atom.re 342 27>>*/ var
            _jh_=
              /*<<src/Atom.re 342 27>>*/ caml_js_to_string(jsStr);
            /*<<src/Atom.re 342 47>>*/ return  /*<<src/Atom.re 342 47>>*/ caml_call1
                   (so,_jh_) /*<<src/Atom.re 342 47>>*/ },
         /*<<src/Atom.re 343 8>>*/ _i8_=
          /*<<src/Atom.re 343 8>>*/ caml_js_wrap_callback(cb),
         /*<<src/Atom.re 343 79>>*/ _i9_=[0,[0,_a8_,_i8_]],
         /*<<src/Atom.re 343 8>>*/ _i__=
          /*<<src/Atom.re 343 8>>*/ _f_(fields$0,_i9_),
        fields$1=_i__;
      else
       var fields$1=fields$0;
       /*<<src/Atom.re 345 4>>*/ if(stdErr)
        /*<<src/Atom.re 349 8>>*/ var
         /*<<src/Atom.re 349 8>>*/ si=stdErr[1],
         /*<<src/Atom.re 349 8>>*/ cb$0=
         function(jsStr)
          { /*<<src/Atom.re 349 27>>*/  /*<<src/Atom.re 349 27>>*/ var
            _jg_=
              /*<<src/Atom.re 349 27>>*/ caml_js_to_string(jsStr);
            /*<<src/Atom.re 349 47>>*/ return  /*<<src/Atom.re 349 47>>*/ caml_call1
                   (si,_jg_) /*<<src/Atom.re 349 47>>*/ },
         /*<<src/Atom.re 350 8>>*/ _i$_=
          /*<<src/Atom.re 350 8>>*/ caml_js_wrap_callback(cb$0),
         /*<<src/Atom.re 350 78>>*/ _ja_=[0,[0,_a9_,_i$_]],
         /*<<src/Atom.re 350 8>>*/ _jb_=
          /*<<src/Atom.re 350 8>>*/ _f_(fields$1,_ja_),
        fields$2=_jb_;
      else
       var fields$2=fields$1;
       /*<<src/Atom.re 352 4>>*/ if(exit)
        /*<<src/Atom.re 356 8>>*/ var
         /*<<src/Atom.re 356 8>>*/ e=exit[1],
         /*<<src/Atom.re 356 8>>*/ cb$1=
         function(eCode)
          { /*<<src/Atom.re 356 24>>*/ return  /*<<src/Atom.re 356 24>>*/ caml_call1
                   (e,eCode) /*<<src/Atom.re 356 45>>*/ },
         /*<<src/Atom.re 357 8>>*/ _jc_=
          /*<<src/Atom.re 357 8>>*/ caml_js_wrap_callback(cb$1),
         /*<<src/Atom.re 357 77>>*/ _jd_=[0,[0,_a__,_jc_]],
         /*<<src/Atom.re 357 8>>*/ _je_=
          /*<<src/Atom.re 357 8>>*/ _f_(fields$2,_jd_),
        fields$3=_je_;
      else
       var fields$3=fields$2;
       /*<<src/Atom.re 325 42>>*/  /*<<src/Atom.re 359 4>>*/ var
       _jf_=
         /*<<src/Atom.re 359 4>>*/ caml_js_object(fields$3);
       /*<<src/Atom.re 359 60>>*/ return new bufferedProcess(_jf_) /*<<src/Atom.re 360 3>>*/ }
     /*<<src/Atom.re 296 57>>*/ function _a$_(buffProcess,fn)
     { /*<<src/Atom.re 361 47>>*/  /*<<src/Atom.re 361 47>>*/ var
       wrappedCb=
         /*<<src/Atom.re 361 47>>*/ caml_js_wrap_callback
         (function(jsErrHandle)
           { /*<<src/Atom.re 364 47>>*/ var
              /*<<src/Atom.re 364 47>>*/ _iW_=jsErrHandle.handle,
              /*<<src/Atom.re 364 11>>*/ _iX_=jsErrHandle.error;
             /*<<src/Atom.re 364 46>>*/ return  /*<<src/Atom.re 364 46>>*/ caml_call2
                    (fn,_iX_,_iW_) /*<<src/Atom.re 364 83>>*/ });
       /*<<src/Atom.re 366 4>>*/ return  /*<<src/Atom.re 366 4>>*/ buffProcess.onWillThrowError
              (wrappedCb) /*<<src/Atom.re 367 3>>*/ }
     /*<<src/Atom.re 296 57>>*/ function _ba_(bufferedProcess)
     { /*<<src/Atom.re 368 38>>*/ return bufferedProcess.process /*<<src/Atom.re 368 77>>*/ }
    function _bb_(s,itm)
     { /*<<src/AtomReasonCommon.re 11 34>>*/  /*<<src/AtomReasonCommon.re 11 34>>*/ var
       _iV_=
        exports;
       /*<<src/AtomReasonCommon.re 11 63>>*/ return _iV_[s] = itm /*<<src/AtomReasonCommon.re 11 69>>*/ }
    function _bc_(filePath)
     { /*<<src/AtomReasonCommon.re 17 36>>*/ try
       { /*<<src/AtomReasonCommon.re 19 9>>*/ var
         _iS_=46,
          /*<<src/AtomReasonCommon.re 19 9>>*/ _iT_=
           /*<<src/AtomReasonCommon.re 19 9>>*/ _V_(filePath,_iS_),
          /*<<src/AtomReasonCommon.re 19 35>>*/ indexAfterlastDot=_iT_ + 1 | 0}
      catch(_iU_)
       {_iU_ = caml_wrap_exception(_iU_);
        if(_iU_ === Not_found)
         { /*<<src/AtomReasonCommon.re 21 6>>*/  /*<<src/AtomReasonCommon.re 21 6>>*/ var
           _iR_=
            [0,Invalid_argument,_bd_];
           /*<<src/AtomReasonCommon.re 23 7>>*/ throw _iR_}
        throw _iU_}
       /*<<src/AtomReasonCommon.re 25 2>>*/ return  /*<<src/AtomReasonCommon.re 25 2>>*/ _O_
              (filePath,
               indexAfterlastDot,
                /*<<src/AtomReasonCommon.re 25 2>>*/ caml_ml_string_length
                (filePath)
               -
               indexAfterlastDot
               |
               0) /*<<src/AtomReasonCommon.re 26 1>>*/ }
    function _be_(maybeFilePath)
     { /*<<src/AtomReasonCommon.re 28 33>>*/ if(maybeFilePath)
        /*<<src/AtomReasonCommon.re 31 23>>*/ var
         /*<<src/AtomReasonCommon.re 31 23>>*/ filePath=maybeFilePath[1],
         /*<<src/AtomReasonCommon.re 31 23>>*/ _iP_=
          /*<<src/AtomReasonCommon.re 31 23>>*/ _bc_(filePath),
        ext=_iP_;
      else
       var ext=_bg_;
       /*<<src/AtomReasonCommon.re 34 2>>*/  /*<<src/AtomReasonCommon.re 34 2>>*/ var
       _iQ_=
         /*<<src/AtomReasonCommon.re 34 2>>*/ _Y_(_bf_,ext);
       /*<<src/AtomReasonCommon.re 34 26>>*/ return 0 === _iQ_?1:0 /*<<src/AtomReasonCommon.re 35 1>>*/ }
    function _bh_(editor)
     { /*<<src/AtomReasonCommon.re 43 9>>*/  /*<<src/AtomReasonCommon.re 43 9>>*/ var
       match=
         /*<<src/AtomReasonCommon.re 43 9>>*/ _aR_(editor);
       /*<<src/AtomReasonCommon.re 43 37>>*/ if(match)
       { /*<<src/AtomReasonCommon.re 45 17>>*/  /*<<src/AtomReasonCommon.re 45 17>>*/ var
         path=
          match[1];
         /*<<src/AtomReasonCommon.re 45 17>>*/ return path}
       /*<<src/AtomReasonCommon.re 44 12>>*/ return _bi_ /*<<src/AtomReasonCommon.re 46 3>>*/ }
    function _bj_(point)
     { /*<<src/MerlinServiceConvert.re 11 2>>*/ var
        /*<<src/MerlinServiceConvert.re 11 2>>*/ _iN_=point.col,
        /*<<src/MerlinServiceConvert.re 10 2>>*/ _iO_=point.line;
       /*<<src/MerlinServiceConvert.re 10 28>>*/ return [0,_iO_ - 1 | 0,_iN_] /*<<src/MerlinServiceConvert.re 12 1>>*/ }
    function _bk_(position)
     { /*<<src/MerlinServiceConvert.re 14 44>>*/ var
        /*<<src/MerlinServiceConvert.re 14 44>>*/ merlinStart=position.start,
        /*<<src/MerlinServiceConvert.re 16 2>>*/ merlinEnd=position.end,
        /*<<src/MerlinServiceConvert.re 17 2>>*/ _iJ_=
        undefined$0 === merlinStart?1:0,
        /*<<src/MerlinServiceConvert.re 17 2>>*/ _iK_=
        _iJ_
        ||
        (undefined$0 === merlinEnd?1:0);
      if(0 === _iK_)
        /*<<src/MerlinServiceConvert.re 20 45>>*/ var
         /*<<src/MerlinServiceConvert.re 20 45>>*/ _iL_=
          /*<<src/MerlinServiceConvert.re 20 45>>*/ _bj_(merlinEnd),
         /*<<src/MerlinServiceConvert.re 20 7>>*/ _iM_=
          /*<<src/MerlinServiceConvert.re 20 7>>*/ _bj_(merlinStart),
        range=[0,_iM_,_iL_];
      else
       var range=_aG_;
       /*<<src/MerlinServiceConvert.re 21 2>>*/ return range /*<<src/MerlinServiceConvert.re 22 1>>*/ }
    function _bl_(filePath,jsMerlinError)
     { /*<<src/MerlinServiceConvert.re 24 63>>*/ var
        /*<<src/MerlinServiceConvert.re 24 63>>*/ message=
        jsMerlinError.message,
        /*<<src/MerlinServiceConvert.re 27 2>>*/ merlinType=jsMerlinError.type,
        /*<<src/MerlinServiceConvert.re 29 4>>*/ _iG_="warning",
        /*<<src/MerlinServiceConvert.re 29 23>>*/ match=
        _iG_ === merlinType?1:0,
        /*<<src/MerlinServiceConvert.re 29 23>>*/ diagnosticType=
        0 === match?0:1,
        /*<<src/MerlinServiceConvert.re 30 2>>*/ _iH_=0,
        /*<<src/MerlinServiceConvert.re 37 16>>*/ _iI_=
         /*<<src/MerlinServiceConvert.re 37 16>>*/ _bk_(jsMerlinError);
       /*<<src/MerlinServiceConvert.re 37 59>>*/ return [0,
              [0,
               -1011102084,
               _bm_,
               diagnosticType,
               filePath,
               [0,message],
               0,
               [0,_iI_],
               _iH_]] /*<<src/MerlinServiceConvert.re 40 1>>*/ }
    function _bn_(filePath,errors)
     { /*<<src/MerlinServiceConvert.re 43 56>>*/  /*<<src/MerlinServiceConvert.re 43 56>>*/ var
       _iD_=
         /*<<src/MerlinServiceConvert.re 43 56>>*/ caml_js_to_array(errors);
       /*<<src/MerlinServiceConvert.re 43 12>>*/ function _iE_(_iF_)
       { /*<<?>>*/ return _bl_(filePath,_iF_)}
       /*<<src/MerlinServiceConvert.re 43 55>>*/ return  /*<<src/MerlinServiceConvert.re 43 55>>*/ _g_
              (_iE_,_iD_) /*<<src/MerlinServiceConvert.re 43 76>>*/ }
    function _bo_(s)
     { /*<<src/MerlinServiceConvert.re 46 2>>*/ return  /*<<src/MerlinServiceConvert.re 46 2>>*/ caml_string_notequal
               (s,_bp_)
              ?caml_string_notequal(s,_bq_)
                ?caml_string_notequal(s,_br_)
                  ?caml_string_notequal(s,_bs_)
                    ?caml_string_notequal(s,_bt_)
                      ?caml_string_notequal(s,_bu_)
                        ?caml_string_notequal(s,_bv_)
                          ?caml_string_notequal(s,_bw_)?0:0
                          :6
                        :4
                      :2
                    :0
                  :6
                :4
              :2 /*<<src/MerlinServiceConvert.re 56 3>>*/ }
    function _bx_(k)
     { /*<<src/MerlinServiceConvert.re 59 2>>*/ switch(k)
       {case 0: /*<<src/MerlinServiceConvert.re 61 20>>*/ return 3;
        case 2: /*<<src/MerlinServiceConvert.re 63 26>>*/ return 6;
        case 4: /*<<src/MerlinServiceConvert.re 62 21>>*/ return 7;
        case 6: /*<<src/MerlinServiceConvert.re 60 19>>*/ return 8;
        default: /*<<src/MerlinServiceConvert.re 64 9>>*/ return 3} /*<<src/MerlinServiceConvert.re 65 3>>*/ }
    function _by_(o)
     { /*<<src/MerlinServiceConvert.re 71 21>>*/ var
        /*<<src/MerlinServiceConvert.re 71 21>>*/ _iu_=o.name,
        /*<<src/MerlinServiceConvert.re 71 45>>*/ _iv_=
         /*<<src/MerlinServiceConvert.re 71 45>>*/ caml_js_to_string(_iu_),
        /*<<src/MerlinServiceConvert.re 70 56>>*/ _iw_=o.kind,
        /*<<src/MerlinServiceConvert.re 70 80>>*/ _ix_=
         /*<<src/MerlinServiceConvert.re 70 80>>*/ caml_js_to_string(_iw_),
        /*<<src/MerlinServiceConvert.re 70 8>>*/ _iy_=
         /*<<src/MerlinServiceConvert.re 70 8>>*/ _bo_(_ix_),
        /*<<src/MerlinServiceConvert.re 69 21>>*/ _iz_=o.info,
        /*<<src/MerlinServiceConvert.re 69 45>>*/ _iA_=
         /*<<src/MerlinServiceConvert.re 69 45>>*/ caml_js_to_string(_iz_),
        /*<<src/MerlinServiceConvert.re 68 28>>*/ _iB_=o.desc,
        /*<<src/MerlinServiceConvert.re 68 52>>*/ _iC_=
         /*<<src/MerlinServiceConvert.re 68 52>>*/ caml_js_to_string(_iB_);
       /*<<src/MerlinServiceConvert.re 68 52>>*/ return [0,
              _iC_,
              _iA_,
              _iy_,
              _iv_] /*<<src/MerlinServiceConvert.re 72 1>>*/ }
    function _bz_(replacementPrefix,e)
     { /*<<src/MerlinServiceConvert.re 74 58>>*/ var
        /*<<src/MerlinServiceConvert.re 74 58>>*/ _io_=e[1],
        /*<<src/MerlinServiceConvert.re 85 24>>*/ _ip_=
         /*<<src/MerlinServiceConvert.re 85 24>>*/ _b_(_bA_,_io_),
        /*<<src/MerlinServiceConvert.re 85 53>>*/ _iq_=e[2],
        /*<<src/MerlinServiceConvert.re 85 15>>*/ _ir_=
         /*<<src/MerlinServiceConvert.re 85 15>>*/ _b_(_iq_,_ip_),
        /*<<src/MerlinServiceConvert.re 85 53>>*/ _is_=e[3],
        /*<<src/MerlinServiceConvert.re 82 9>>*/ _it_=
         /*<<src/MerlinServiceConvert.re 82 9>>*/ _bx_(_is_);
       /*<<src/MerlinServiceConvert.re 82 50>>*/ return [0,
              e[1],
              e[4],
              e[4],
              _it_,
              _ir_,
              replacementPrefix] /*<<src/MerlinServiceConvert.re 87 1>>*/ }
    function _bB_(arr)
     { /*<<src/MerlinServiceConvert.re 89 42>>*/  /*<<src/MerlinServiceConvert.re 89 42>>*/ var
       length=
        arr.length;
       /*<<src/MerlinServiceConvert.re 91 2>>*/ if(0 === length)
       return undefined$0;
       /*<<src/MerlinServiceConvert.re 89 42>>*/ var
        /*<<src/MerlinServiceConvert.re 93 9>>*/ firstType=
        arr[caml_new_string("0")],
        /*<<src/MerlinServiceConvert.re 96 34>>*/ _ik_=firstType.type,
        /*<<src/MerlinServiceConvert.re 96 66>>*/ reasonHint=
         /*<<src/MerlinServiceConvert.re 96 66>>*/ caml_js_to_string(_ik_),
        /*<<src/MerlinServiceConvert.re 99 50>>*/ _il_=
         /*<<src/MerlinServiceConvert.re 99 50>>*/ _bk_(firstType),
        /*<<src/MerlinServiceConvert.re 99 33>>*/ _im_=
         /*<<src/MerlinServiceConvert.re 99 33>>*/ _aH_(_il_),
        /*<<src/MerlinServiceConvert.re 98 32>>*/ _in_=
         /*<<src/MerlinServiceConvert.re 98 32>>*/ reasonHint.toString();
       /*<<src/MerlinServiceConvert.re 98 54>>*/ return {"hint":_in_,
              "range":_im_} /*<<src/MerlinServiceConvert.re 102 1>>*/ }
    function _bC_(arr)
     { /*<<src/MerlinServiceConvert.re 104 37>>*/  /*<<src/MerlinServiceConvert.re 104 37>>*/ var
       _ij_=
         /*<<src/MerlinServiceConvert.re 104 37>>*/ caml_js_to_array(arr);
       /*<<src/MerlinServiceConvert.re 104 52>>*/ return  /*<<src/MerlinServiceConvert.re 104 52>>*/ _g_
              (_bk_,_ij_) /*<<src/MerlinServiceConvert.re 104 93>>*/ }
    function _bD_(jsResult)
     { /*<<src/MerlinServiceConvert.re 107 23>>*/ var
        /*<<src/MerlinServiceConvert.re 107 23>>*/ _id_=typeof jsResult,
        /*<<src/MerlinServiceConvert.re 107 43>>*/ match=
         /*<<src/MerlinServiceConvert.re 107 43>>*/ caml_js_to_string(_id_);
       /*<<src/MerlinServiceConvert.re 107 44>>*/ if
       ( /*<<src/MerlinServiceConvert.re 107 44>>*/ caml_string_notequal
         (match,_bE_))
       {if(caml_string_notequal(match,_bF_))throw Not_found;
         /*<<src/MerlinServiceConvert.re 110 4>>*/  /*<<src/MerlinServiceConvert.re 110 4>>*/ var
         result=
           /*<<src/MerlinServiceConvert.re 110 4>>*/ caml_js_to_string
           (jsResult);
         /*<<src/MerlinServiceConvert.re 111 4>>*/ return  /*<<src/MerlinServiceConvert.re 111 4>>*/ caml_string_notequal
                 (result,_bG_)
                ?[0,result]
                :0}
       /*<<src/MerlinServiceConvert.re 107 23>>*/ var
        /*<<src/MerlinServiceConvert.re 116 4>>*/ fileValue=jsResult.file,
        /*<<src/MerlinServiceConvert.re 117 7>>*/ _ie_=
         /*<<src/MerlinServiceConvert.re 117 7>>*/ caml_equal
         (fileValue,null$0);
       /*<<src/MerlinServiceConvert.re 117 29>>*/ if(_ie_)
       { /*<<src/MerlinServiceConvert.re 119 18>>*/  /*<<src/MerlinServiceConvert.re 119 18>>*/ var
         _if_=
          jsResult.pos;
         /*<<src/MerlinServiceConvert.re 119 46>>*/ return [1,
                [0,
                  /*<<src/MerlinServiceConvert.re 119 46>>*/ _bk_
                  ( /*<<src/MerlinServiceConvert.re 119 46>>*/ function(_ii_)
                     { /*<<?>>*/ return caml_js_to_string(_ii_)}
                    (_if_))]]}
       /*<<src/MerlinServiceConvert.re 107 23>>*/  /*<<src/MerlinServiceConvert.re 124 18>>*/ var
       _ig_=
        jsResult.pos;
       /*<<src/MerlinServiceConvert.re 124 46>>*/ return [2,
              [0,
                /*<<src/MerlinServiceConvert.re 124 46>>*/ _bk_
                ( /*<<src/MerlinServiceConvert.re 124 46>>*/ function(_ih_)
                   { /*<<?>>*/ return caml_js_to_string(_ih_)}
                  (_ig_)),
               fileValue]] /*<<src/MerlinServiceConvert.re 128 3>>*/ }
     /*<<src/SuperMerlin.re 10 15>>*/ var
     startedMerlin=[0,0],
      /*<<src/SuperMerlin.re 10 15>>*/ fixedEnv$0=
       /*<<src/SuperMerlin.re 10 15>>*/ require("../lib/fixedEnv");
     /*<<src/SuperMerlin.re 13 29>>*/ function findNearestMerlinFile
     (beginAtFilePath)
     { /*<<src/SuperMerlin.re 15 33>>*/ var
        /*<<src/SuperMerlin.re 15 42>>*/ path=
         /*<<src/SuperMerlin.re 15 44>>*/ require("path"),
        /*<<src/SuperMerlin.re 16 40>>*/ fs=
         /*<<src/SuperMerlin.re 16 42>>*/ require("fs"),
        /*<<src/SuperMerlin.re 17 45>>*/ fileDir=
         /*<<src/SuperMerlin.re 17 47>>*/ path.dirname(beginAtFilePath),
        /*<<src/SuperMerlin.re 18 49>>*/ currentPath=
         /*<<src/SuperMerlin.re 18 51>>*/ path.resolve(fileDir);
       /*<<src/SuperMerlin.re 19 33>>*/ do
        /*<<src/SuperMerlin.re 19 36>>*/ { /*<<src/SuperMerlin.re 20 35>>*/ var
          /*<<src/SuperMerlin.re 20 50>>*/ fileToFind=
           /*<<src/SuperMerlin.re 20 52>>*/ path.join(currentPath,".merlin"),
          /*<<src/SuperMerlin.re 21 47>>*/ hasFile=
           /*<<src/SuperMerlin.re 21 49>>*/ fs.existsSync(fileToFind);
         /*<<src/SuperMerlin.re 22 35>>*/ if(hasFile)
          /*<<src/SuperMerlin.re 22 48>>*/ return  /*<<src/SuperMerlin.re 23 44>>*/ path.dirname
                 (currentPath);
         /*<<src/SuperMerlin.re 26 35>>*/ if
         ( /*<<src/SuperMerlin.re 26 39>>*/ path.dirname(currentPath)
          ===
          currentPath)
          /*<<src/SuperMerlin.re 26 82>>*/ return ".";
        currentPath
        =
         /*<<src/SuperMerlin.re 30 49>>*/ path.dirname(currentPath)}
      while
       (true) /*<<src/SuperMerlin.re 14 31>>*/ }
     /*<<src/SuperMerlin.re 33 2>>*/ function findNearestMerlinFile$0(path)
     { /*<<src/SuperMerlin.re 36 76>>*/ var
        /*<<src/SuperMerlin.re 36 76>>*/ _ic_=
         /*<<src/SuperMerlin.re 36 76>>*/ path.toString(),
        /*<<src/SuperMerlin.re 36 92>>*/ result=
         /*<<src/SuperMerlin.re 36 92>>*/ findNearestMerlinFile(_ic_);
       /*<<src/SuperMerlin.re 37 2>>*/ return  /*<<src/SuperMerlin.re 37 2>>*/ caml_js_to_string
              (result) /*<<src/SuperMerlin.re 38 1>>*/ }
     /*<<src/SuperMerlin.re 40 32>>*/ function _bH_
     (ocamlMerlinPath,ocamlMerlinFlags,dotMerlinDir,fixedEnv)
     { /*<<src/SuperMerlin.re 42 36>>*/ var
        /*<<src/SuperMerlin.re 42 46>>*/ spawn=
         /*<<src/SuperMerlin.re 42 48>>*/ require("child_process").spawn,
        /*<<src/SuperMerlin.re 45 46>>*/ items=
        ocamlMerlinFlags === ""
         ?[]
         : /*<<src/SuperMerlin.re 45 79>>*/ ocamlMerlinFlags.split(/\s+/),
        /*<<src/SuperMerlin.re 46 54>>*/ merlinProcess=
         /*<<src/SuperMerlin.re 46 56>>*/ spawn
         (ocamlMerlinPath,items,{cwd:dotMerlinDir,env:fixedEnv});
       /*<<src/SuperMerlin.re 47 36>>*/ merlinProcess.stderr.on
       ("data",
        function(d)
         { /*<<src/SuperMerlin.re 48 38>>*/ console.error
           ("Ocamlmerlin: something wrong happened:");
           /*<<src/SuperMerlin.re 49 38>>*/ console.error
           ( /*<<src/SuperMerlin.re 49 52>>*/ d.toString()) /*<<src/SuperMerlin.re 47 68>>*/ });
       /*<<src/SuperMerlin.re 52 36>>*/ merlinProcess.stdout.on
       ("close",
        function(d)
         { /*<<src/SuperMerlin.re 53 38>>*/ console.error
           ("Ocamlmerlin: closed.") /*<<src/SuperMerlin.re 52 69>>*/ });
       /*<<src/SuperMerlin.re 42 36>>*/ var
        /*<<src/SuperMerlin.re 56 49>>*/ cmdQueue=[],
        /*<<src/SuperMerlin.re 57 58>>*/ hasStartedReading=false,
        /*<<src/SuperMerlin.re 59 49>>*/ readline=
         /*<<src/SuperMerlin.re 59 51>>*/ require("readline"),
        /*<<src/SuperMerlin.re 60 47>>*/ reader=
         /*<<src/SuperMerlin.re 60 49>>*/ readline.createInterface
         ({input:merlinProcess.stdout,terminal:false});
       /*<<src/SuperMerlin.re 65 36>>*/ return function(cmd,resolve,reject)
       { /*<<src/SuperMerlin.re 66 38>>*/ cmdQueue.push([resolve,reject]);
         /*<<src/SuperMerlin.re 68 38>>*/ if(!hasStartedReading)
          /*<<src/SuperMerlin.re 68 62>>*/ {hasStartedReading = true;
           /*<<src/SuperMerlin.re 70 40>>*/ reader.on
           ("line",
            function(line)
             { /*<<src/SuperMerlin.re 71 42>>*/ var response;
               /*<<src/SuperMerlin.re 72 42>>*/ try
               {response =  /*<<src/SuperMerlin.re 73 55>>*/ JSON.parse(line)}
              catch(err){response = null}
               /*<<src/SuperMerlin.re 71 42>>*/ var
                /*<<src/SuperMerlin.re 77 60>>*/ resolveReject=
                 /*<<src/SuperMerlin.re 77 62>>*/ cmdQueue.shift(),
                /*<<src/SuperMerlin.re 78 54>>*/ resolve=resolveReject[0],
                /*<<src/SuperMerlin.re 79 53>>*/ reject=resolveReject[1];
               /*<<src/SuperMerlin.re 81 42>>*/ if
               (!response
                ||
                ! /*<<src/SuperMerlin.re 81 60>>*/ Array.isArray(response)
                ||
                response.length
                !==
                2)
                /*<<src/SuperMerlin.re 81 110>>*/ { /*<<src/SuperMerlin.re 82 44>>*/ reject
                 (new Error("Unexpected ocamlmerlin output format: " + line));
                 /*<<src/SuperMerlin.re 83 44>>*/ return}
               /*<<src/SuperMerlin.re 71 42>>*/ var
                /*<<src/SuperMerlin.re 86 53>>*/ status=response[0],
                /*<<src/SuperMerlin.re 87 54>>*/ content=response[1],
                /*<<src/SuperMerlin.re 89 61>>*/ errorResponses=
                {"failure":true,"error":true,"exception":true};
               /*<<src/SuperMerlin.re 95 42>>*/ if(errorResponses[status])
                /*<<src/SuperMerlin.re 95 70>>*/ { /*<<src/SuperMerlin.re 96 44>>*/ reject
                 (new Error("Ocamlmerlin returned an error: " + line));
                 /*<<src/SuperMerlin.re 97 44>>*/ return}
               /*<<src/SuperMerlin.re 100 42>>*/ resolve(content) /*<<src/SuperMerlin.re 70 58>>*/ })}
         /*<<src/SuperMerlin.re 104 38>>*/ merlinProcess.stdin.write
         ( /*<<src/SuperMerlin.re 104 64>>*/ JSON.stringify(cmd)) /*<<src/SuperMerlin.re 65 43>>*/ } /*<<src/SuperMerlin.re 41 34>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bI_
     (pathToMerlin,merlinFlags,dotMerlinPath)
     { /*<<src/SuperMerlin.re 118 23>>*/ var
        /*<<src/SuperMerlin.re 118 23>>*/ _h$_=
         /*<<src/SuperMerlin.re 118 23>>*/ dotMerlinPath.toString(),
        /*<<src/SuperMerlin.re 117 23>>*/ _ia_=
         /*<<src/SuperMerlin.re 117 23>>*/ merlinFlags.toString(),
        /*<<src/SuperMerlin.re 116 23>>*/ _ib_=
         /*<<src/SuperMerlin.re 116 23>>*/ pathToMerlin.toString();
       /*<<src/SuperMerlin.re 116 47>>*/ return  /*<<src/SuperMerlin.re 116 47>>*/ _bH_
              (_ib_,_ia_,_h$_,fixedEnv$0) /*<<src/SuperMerlin.re 120 6>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bJ_(path)
     { /*<<src/SuperMerlin.re 123 2>>*/ if(startedMerlin[1])return 0;
       /*<<src/SuperMerlin.re 126 33>>*/ var
        /*<<src/SuperMerlin.re 126 33>>*/ atomReasonPathToMerlin=
         /*<<src/SuperMerlin.re 126 33>>*/ _aD_(_bK_),
        /*<<src/SuperMerlin.re 127 32>>*/ atomReasonMerlinFlags=
         /*<<src/SuperMerlin.re 127 32>>*/ _aD_(_bL_),
        /*<<src/SuperMerlin.re 128 34>>*/ atomReasonMerlinLogFile=
         /*<<src/SuperMerlin.re 128 34>>*/ _aD_(_bM_);
       /*<<src/SuperMerlin.re 129 4>>*/ if
       (typeof atomReasonMerlinLogFile === "number")
       var switch$0=0;
      else
        /*<<src/SuperMerlin.re 129 4>>*/ if(0 === atomReasonMerlinLogFile[0])
        {var _h__=atomReasonMerlinLogFile[1];
         if(caml_string_notequal(_h__,_bN_))
           /*<<src/SuperMerlin.re 131 22>>*/ _aC_(_bO_,_h__);
         var switch$0=1}
       else
        var switch$0=0;
       /*<<src/SuperMerlin.re 126 33>>*/ var
        /*<<src/SuperMerlin.re 138 23>>*/ _h7_=
         /*<<src/SuperMerlin.re 138 23>>*/ findNearestMerlinFile$0(path),
        /*<<src/SuperMerlin.re 137 21>>*/ _h8_=
         /*<<src/SuperMerlin.re 137 21>>*/ _aA_(atomReasonMerlinFlags),
        /*<<src/SuperMerlin.re 136 22>>*/ _h9_=
         /*<<src/SuperMerlin.re 136 22>>*/ _aA_(atomReasonPathToMerlin),
        /*<<src/SuperMerlin.re 135 6>>*/ readerFn=
         /*<<src/SuperMerlin.re 135 6>>*/ _bI_(_h9_,_h8_,_h7_);
       /*<<src/SuperMerlin.re 139 4>>*/ startedMerlin[1] = [0,readerFn];
       /*<<src/SuperMerlin.re 139 4>>*/ return 0 /*<<src/SuperMerlin.re 140 3>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bP_(cmd,resolve,reject)
     { /*<<src/SuperMerlin.re 143 2>>*/  /*<<src/SuperMerlin.re 143 2>>*/ var
       _h4_=
        startedMerlin[1];
       /*<<src/SuperMerlin.re 143 2>>*/ if(_h4_)
       { /*<<src/SuperMerlin.re 146 4>>*/ var
          /*<<src/SuperMerlin.re 146 4>>*/ readerFn=_h4_[1],
          /*<<src/SuperMerlin.re 146 4>>*/ _h5_=
           /*<<src/SuperMerlin.re 146 4>>*/ caml_js_wrap_callback(reject),
          /*<<src/SuperMerlin.re 150 25>>*/ _h6_=
           /*<<src/SuperMerlin.re 150 25>>*/ caml_js_wrap_callback(resolve);
         /*<<src/SuperMerlin.re 150 51>>*/ return  /*<<src/SuperMerlin.re 150 51>>*/ readerFn
                (cmd,_h6_,_h5_)}
       /*<<src/SuperMerlin.re 144 27>>*/ throw Not_found /*<<src/SuperMerlin.re 153 3>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bQ_(query,path)
     { /*<<src/SuperMerlin.re 159 61>>*/ var
        /*<<src/SuperMerlin.re 159 61>>*/ _h0_=
         /*<<src/SuperMerlin.re 159 61>>*/ path.toString(),
        /*<<src/SuperMerlin.re 159 43>>*/ _h1_="auto",
        /*<<src/SuperMerlin.re 159 59>>*/ _h2_=[0,_h1_,_h0_],
        /*<<src/SuperMerlin.re 159 31>>*/ _h3_=
         /*<<src/SuperMerlin.re 159 31>>*/ caml_js_from_array(_h2_);
       /*<<src/SuperMerlin.re 159 78>>*/ return {"query":query,"context":_h3_} /*<<src/SuperMerlin.re 160 2>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bR_
     (text,path,query,resolve,reject)
     { /*<<src/SuperMerlin.re 163 2>>*/  /*<<src/SuperMerlin.re 163 2>>*/ _bJ_
       (path);
       /*<<src/SuperMerlin.re 163 25>>*/ function _hK_(param)
       { /*<<src/SuperMerlin.re 180 8>>*/ function _hR_(param)
         { /*<<src/SuperMerlin.re 189 37>>*/  /*<<src/SuperMerlin.re 189 37>>*/ var
           _hZ_=
             /*<<src/SuperMerlin.re 189 37>>*/ _bQ_(query,path);
           /*<<src/SuperMerlin.re 189 73>>*/ return  /*<<src/SuperMerlin.re 189 73>>*/ _bP_
                  (_hZ_,resolve,reject) /*<<src/SuperMerlin.re 189 88>>*/ }
         /*<<src/SuperMerlin.re 185 81>>*/ var
          /*<<src/SuperMerlin.re 185 81>>*/ _hS_=
           /*<<src/SuperMerlin.re 185 81>>*/ text.toString(),
          /*<<src/SuperMerlin.re 185 64>>*/ _hT_="end",
          /*<<src/SuperMerlin.re 185 45>>*/ _hU_="start",
          /*<<src/SuperMerlin.re 185 27>>*/ _hV_="tell",
          /*<<src/SuperMerlin.re 185 43>>*/ _hW_=[0,_hV_,_hU_,_hT_,_hS_],
          /*<<src/SuperMerlin.re 184 21>>*/ _hX_=
           /*<<src/SuperMerlin.re 184 21>>*/ caml_js_from_array(_hW_),
          /*<<src/SuperMerlin.re 181 15>>*/ _hY_=
           /*<<src/SuperMerlin.re 181 15>>*/ _bQ_(_hX_,path);
         /*<<src/SuperMerlin.re 188 11>>*/ return  /*<<src/SuperMerlin.re 188 11>>*/ _bP_
                (_hY_,_hR_,reject) /*<<src/SuperMerlin.re 190 16>>*/ }
       /*<<src/SuperMerlin.re 163 25>>*/ var
        /*<<src/SuperMerlin.re 163 25>>*/ _hL_=2,
        /*<<src/SuperMerlin.re 172 29>>*/ _hM_="version",
        /*<<src/SuperMerlin.re 171 29>>*/ _hN_="protocol",
        /*<<src/SuperMerlin.re 171 51>>*/ _hO_=[0,_hN_,_hM_,_hL_],
        /*<<src/SuperMerlin.re 169 15>>*/ _hP_=
         /*<<src/SuperMerlin.re 169 15>>*/ caml_js_from_array(_hO_),
        /*<<src/SuperMerlin.re 166 9>>*/ _hQ_=
         /*<<src/SuperMerlin.re 166 9>>*/ _bQ_(_hP_,path);
       /*<<src/SuperMerlin.re 177 5>>*/ return  /*<<src/SuperMerlin.re 177 5>>*/ _bP_
              (_hQ_,_hK_,reject) /*<<src/SuperMerlin.re 193 1>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bS_(param)
     { /*<<src/SuperMerlin.re 198 66>>*/ var
       col=param[2],
       line=param[1],
        /*<<src/SuperMerlin.re 198 66>>*/ _hJ_=line + 1 | 0;
       /*<<src/SuperMerlin.re 197 74>>*/ return {"line":_hJ_,"col":col}}
     /*<<src/SuperMerlin.re 107 2>>*/ function _bT_
     (path,text,position,resolve,reject)
     { /*<<src/SuperMerlin.re 211 25>>*/ var
        /*<<src/SuperMerlin.re 211 25>>*/ _hD_=
         /*<<src/SuperMerlin.re 211 25>>*/ _bS_(position),
        /*<<src/SuperMerlin.re 210 25>>*/ _hE_="at",
        /*<<src/SuperMerlin.re 209 25>>*/ _hF_="enclosing",
        /*<<src/SuperMerlin.re 208 25>>*/ _hG_="type",
        /*<<src/SuperMerlin.re 208 43>>*/ _hH_=[0,_hG_,_hF_,_hE_,_hD_],
        /*<<src/SuperMerlin.re 206 11>>*/ _hI_=
         /*<<src/SuperMerlin.re 206 11>>*/ caml_js_from_array(_hH_);
       /*<<src/SuperMerlin.re 213 5>>*/ return  /*<<src/SuperMerlin.re 213 5>>*/ _bR_
              (text,path,_hI_,resolve,reject) /*<<src/SuperMerlin.re 215 10>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bU_
     (path,text,position,prefix,resolve,reject)
     { /*<<src/SuperMerlin.re 235 25>>*/ var
        /*<<src/SuperMerlin.re 235 25>>*/ _hu_="doc",
        /*<<src/SuperMerlin.re 234 25>>*/ _hv_="with",
        /*<<src/SuperMerlin.re 233 25>>*/ _hw_=
         /*<<src/SuperMerlin.re 233 25>>*/ _bS_(position),
        /*<<src/SuperMerlin.re 232 25>>*/ _hx_="at",
        /*<<src/SuperMerlin.re 231 25>>*/ _hy_=
         /*<<src/SuperMerlin.re 231 25>>*/ prefix.toString(),
        /*<<src/SuperMerlin.re 230 25>>*/ _hz_="prefix",
        /*<<src/SuperMerlin.re 229 25>>*/ _hA_="complete",
        /*<<src/SuperMerlin.re 229 47>>*/ _hB_=
        [0,_hA_,_hz_,_hy_,_hx_,_hw_,_hv_,_hu_],
        /*<<src/SuperMerlin.re 227 11>>*/ _hC_=
         /*<<src/SuperMerlin.re 227 11>>*/ caml_js_from_array(_hB_);
       /*<<src/SuperMerlin.re 237 5>>*/ return  /*<<src/SuperMerlin.re 237 5>>*/ _bR_
              (text,path,_hC_,resolve,reject) /*<<src/SuperMerlin.re 239 10>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bV_(path,text,resolve,reject)
     { /*<<src/SuperMerlin.re 245 40>>*/ var
        /*<<src/SuperMerlin.re 245 40>>*/ _hr_="errors",
        /*<<src/SuperMerlin.re 245 60>>*/ _hs_=[0,_hr_],
        /*<<src/SuperMerlin.re 245 11>>*/ _ht_=
         /*<<src/SuperMerlin.re 245 11>>*/ caml_js_from_array(_hs_);
       /*<<src/SuperMerlin.re 245 63>>*/ return  /*<<src/SuperMerlin.re 245 63>>*/ _bR_
              (text,path,_ht_,resolve,reject) /*<<src/SuperMerlin.re 247 10>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bW_
     (path,text,extension,position,resolve,reject)
     { /*<<src/SuperMerlin.re 265 25>>*/ var
        /*<<src/SuperMerlin.re 265 25>>*/ _hk_=
         /*<<src/SuperMerlin.re 265 25>>*/ _bS_(position),
        /*<<src/SuperMerlin.re 264 25>>*/ _hl_="at",
        /*<<src/SuperMerlin.re 263 25>>*/ _hm_=
         /*<<src/SuperMerlin.re 263 25>>*/ extension.toString(),
        /*<<src/SuperMerlin.re 262 25>>*/ _hn_="",
        /*<<src/SuperMerlin.re 261 25>>*/ _ho_="locate",
        /*<<src/SuperMerlin.re 261 45>>*/ _hp_=[0,_ho_,_hn_,_hm_,_hl_,_hk_],
        /*<<src/SuperMerlin.re 259 11>>*/ _hq_=
         /*<<src/SuperMerlin.re 259 11>>*/ caml_js_from_array(_hp_);
       /*<<src/SuperMerlin.re 267 5>>*/ return  /*<<src/SuperMerlin.re 267 5>>*/ _bR_
              (text,path,_hq_,resolve,reject) /*<<src/SuperMerlin.re 269 10>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bX_
     (path,text,position,resolve,reject)
     { /*<<src/SuperMerlin.re 281 25>>*/ var
        /*<<src/SuperMerlin.re 281 25>>*/ _he_=
         /*<<src/SuperMerlin.re 281 25>>*/ _bS_(position),
        /*<<src/SuperMerlin.re 280 25>>*/ _hf_="at",
        /*<<src/SuperMerlin.re 279 25>>*/ _hg_="ident",
        /*<<src/SuperMerlin.re 278 25>>*/ _hh_="occurrences",
        /*<<src/SuperMerlin.re 278 50>>*/ _hi_=[0,_hh_,_hg_,_hf_,_he_],
        /*<<src/SuperMerlin.re 276 11>>*/ _hj_=
         /*<<src/SuperMerlin.re 276 11>>*/ caml_js_from_array(_hi_);
       /*<<src/SuperMerlin.re 283 5>>*/ return  /*<<src/SuperMerlin.re 283 5>>*/ _bR_
              (text,path,_hj_,resolve,reject) /*<<src/SuperMerlin.re 285 10>>*/ }
     /*<<src/SuperMerlin.re 107 2>>*/ function _bY_(path,text,resolve,reject)
     { /*<<src/SuperMerlin.re 291 40>>*/ var
        /*<<src/SuperMerlin.re 291 40>>*/ _hb_="outline",
        /*<<src/SuperMerlin.re 291 61>>*/ _hc_=[0,_hb_],
        /*<<src/SuperMerlin.re 291 11>>*/ _hd_=
         /*<<src/SuperMerlin.re 291 11>>*/ caml_js_from_array(_hc_);
       /*<<src/SuperMerlin.re 291 64>>*/ return  /*<<src/SuperMerlin.re 291 64>>*/ _bR_
              (text,path,_hd_,resolve,reject) /*<<src/SuperMerlin.re 293 10>>*/ }
    function _bZ_(editor,resolve,reject)
     { /*<<src/AtomReasonDiagnostics.re 52 33>>*/ var
        /*<<src/AtomReasonDiagnostics.re 52 33>>*/ _g$_=
         /*<<src/AtomReasonDiagnostics.re 52 33>>*/ _aQ_(editor),
        /*<<src/AtomReasonDiagnostics.re 52 13>>*/ text=
         /*<<src/AtomReasonDiagnostics.re 52 13>>*/ _aJ_(_g$_),
        /*<<src/AtomReasonDiagnostics.re 53 13>>*/ path=
         /*<<src/AtomReasonDiagnostics.re 53 13>>*/ _bh_(editor);
       /*<<src/AtomReasonDiagnostics.re 54 2>>*/ return  /*<<src/AtomReasonDiagnostics.re 54 2>>*/ _bV_
              (path,
               text,
               function(successResult)
                { /*<<src/AtomReasonDiagnostics.re 58 35>>*/  /*<<src/AtomReasonDiagnostics.re 58 35>>*/ var
                  _ha_=
                    /*<<src/AtomReasonDiagnostics.re 58 35>>*/ _bn_
                    (path,successResult);
                  /*<<src/AtomReasonDiagnostics.re 60 7>>*/ return  /*<<src/AtomReasonDiagnostics.re 60 7>>*/ caml_call1
                         (resolve,_ha_) /*<<src/AtomReasonDiagnostics.re 60 7>>*/ },
               reject) /*<<src/AtomReasonDiagnostics.re 63 1>>*/ }
    function _b0_(a,b)
     { /*<<src/StringUtils.re 8 18>>*/  /*<<src/StringUtils.re 8 18>>*/ var
       _g__=
         /*<<src/StringUtils.re 8 18>>*/ _Y_(a,b);
       /*<<src/StringUtils.re 8 36>>*/ return 0 === _g__?1:0 /*<<src/StringUtils.re 8 42>>*/ }
    function _b1_(r,s)
     { /*<<src/StringUtils.re 26 42>>*/ var
        /*<<src/StringUtils.re 26 42>>*/ s$0=
         /*<<src/StringUtils.re 26 42>>*/ s.toString(),
        /*<<src/StringUtils.re 28 2>>*/ jsArr=
         /*<<src/StringUtils.re 28 2>>*/ s$0.split(r),
        /*<<src/StringUtils.re 29 2>>*/ _g9_=
         /*<<src/StringUtils.re 29 2>>*/ caml_js_to_array(jsArr),
        /*<<src/StringUtils.re 29 12>>*/ lst=
         /*<<src/StringUtils.re 29 12>>*/ _h_(_g9_);
       /*<<src/StringUtils.re 30 2>>*/ return  /*<<src/StringUtils.re 30 2>>*/ _u_
              (function(itm)
                { /*<<src/StringUtils.re 30 23>>*/ return  /*<<src/StringUtils.re 30 23>>*/ caml_js_to_string
                         (itm) /*<<src/StringUtils.re 30 39>>*/ },
               lst) /*<<src/StringUtils.re 31 1>>*/ }
     /*<<src/AtomReasonFormat.re 14 15>>*/  /*<<src/AtomReasonFormat.re 14 15>>*/ var
     _b2_=
       /*<<src/AtomReasonFormat.re 14 15>>*/ require("../lib/fixedEnv");
     /*<<src/AtomReasonFormat.re 14 61>>*/ function _b3_(stdOutLines,param)
     { /*<<src/AtomReasonFormat.re 23 85>>*/ var
       curCursorColumn=param[2],
       curCursorRow=param[1],
       _gU_=0,
        /*<<src/AtomReasonFormat.re 23 85>>*/ result=[0,_gU_],
        /*<<src/AtomReasonFormat.re 25 2>>*/ arrLen=stdOutLines.length - 1,
        /*<<src/AtomReasonFormat.re 25 2>>*/ _gV_=0,
        /*<<src/AtomReasonFormat.re 26 2>>*/ charCount=[0,_gV_],
        /*<<src/AtomReasonFormat.re 26 2>>*/ _gW_=0,
        /*<<src/AtomReasonFormat.re 27 2>>*/ colCount=[0,_gW_],
        /*<<src/AtomReasonFormat.re 27 2>>*/ _gX_=0,
        /*<<src/AtomReasonFormat.re 28 2>>*/ rowCount=[0,_gX_],
        /*<<src/AtomReasonFormat.re 28 2>>*/ _gY_=0,
        /*<<src/AtomReasonFormat.re 29 2>>*/ finalCharCount=[0,_gY_],
        /*<<src/AtomReasonFormat.re 29 2>>*/ _gZ_=0,
        /*<<src/AtomReasonFormat.re 30 2>>*/ _g0_=arrLen - 1 | 0;
       /*<<src/AtomReasonFormat.re 30 2>>*/ if(!(_g0_ < 0))
       {var iArr=_gZ_;
         /*<<src/AtomReasonFormat.re 30 32>>*/ for(;;)
         { /*<<src/AtomReasonFormat.re 30 32>>*/ var
            /*<<src/AtomReasonFormat.re 30 32>>*/ line=
             /*<<src/AtomReasonFormat.re 30 32>>*/ caml_check_bound
              (stdOutLines,iArr)
             [iArr + 1],
            /*<<src/AtomReasonFormat.re 32 4>>*/ lineLen=
             /*<<src/AtomReasonFormat.re 32 4>>*/ caml_ml_string_length(line),
            /*<<src/AtomReasonFormat.re 32 4>>*/ _g4_=0,
            /*<<src/AtomReasonFormat.re 34 4>>*/ lenNotEndingInWhiteSpace=
            [0,_g4_],
            /*<<src/AtomReasonFormat.re 34 4>>*/ _g5_=0,
            /*<<src/AtomReasonFormat.re 36 4>>*/ _g6_=lineLen - 1 | 0;
           /*<<src/AtomReasonFormat.re 36 4>>*/ if(!(_g6_ < 0))
           {var chPos=_g5_;
             /*<<src/AtomReasonFormat.re 36 36>>*/ for(;;)
             { /*<<src/AtomReasonFormat.re 36 36>>*/ var
                /*<<src/AtomReasonFormat.re 36 36>>*/ ch=
                 /*<<src/AtomReasonFormat.re 36 36>>*/ caml_string_get
                 (line,chPos),
                /*<<src/AtomReasonFormat.re 38 6>>*/ switch$0=
                10 === ch
                 ?0
                 :13 === ch
                   ?0
                   :(colCount[1]
                     =
                     colCount[1]
                     +
                     1
                     |
                     0,
                     lenNotEndingInWhiteSpace[1]
                     =
                     lenNotEndingInWhiteSpace[1]
                     +
                     1
                     |
                     0,
                     1);
               /*<<camlinternalFormatBasics.ml 502 8>>*/ if(!switch$0)
               { /*<<src/AtomReasonFormat.re 38 38>>*/ rowCount[1]
                =
                rowCount[1]
                +
                1
                |
                0;
                 /*<<src/AtomReasonFormat.re 40 8>>*/ colCount[1] = 0}
               /*<<src/AtomReasonFormat.re 45 6>>*/ charCount[1]
              =
              charCount[1]
              +
              1
              |
              0;
               /*<<src/AtomReasonFormat.re 46 6>>*/ if
               (rowCount[1] <= curCursorRow)
               if(colCount[1] <= curCursorColumn)
                finalCharCount[1] = charCount[1];
               /*<<src/AtomReasonFormat.re 36 36>>*/ var _g8_=chPos + 1 | 0;
              if(_g6_ !== chPos){var chPos=_g8_;continue}
              break}}
           /*<<src/AtomReasonFormat.re 52 4>>*/ result[1]
          =
          [0,line,result[1]];
           /*<<src/AtomReasonFormat.re 30 32>>*/  /*<<src/AtomReasonFormat.re 52 4>>*/ var
           _g7_=
            iArr + 1 | 0;
          if(_g0_ !== iArr){var iArr=_g7_;continue}
          break}}
       /*<<src/AtomReasonFormat.re 23 85>>*/ var
        /*<<src/AtomReasonFormat.re 54 2>>*/ _g1_=result[1],
        /*<<src/AtomReasonFormat.re 56 51>>*/ _g2_=
         /*<<src/AtomReasonFormat.re 56 51>>*/ _t_(_g1_),
        /*<<src/AtomReasonFormat.re 56 34>>*/ _g3_=
         /*<<src/AtomReasonFormat.re 56 34>>*/ _P_(_b4_,_g2_);
       /*<<src/AtomReasonFormat.re 56 77>>*/ return [0,finalCharCount[1],_g3_]}
     /*<<src/AtomReasonFormat.re 14 61>>*/ function _b5_
     (editor,subText,isInterface,onComplete,onFailure)
     { /*<<src/AtomReasonFormat.re 67 2>>*/ var
        /*<<src/AtomReasonFormat.re 67 2>>*/ stdOutLines=[0,[0]],
        /*<<src/AtomReasonFormat.re 68 2>>*/ stdErrLines=[0,[0]],
        /*<<src/AtomReasonFormat.re 70 11>>*/ match=
         /*<<src/AtomReasonFormat.re 70 11>>*/ _aD_(_b6_);
       /*<<src/AtomReasonFormat.re 70 54>>*/ if
       (typeof match !== "number" && 0 === match[0])
       { /*<<src/AtomReasonFormat.re 71 24>>*/ var
          /*<<src/AtomReasonFormat.re 71 24>>*/ pth=match[1],
          /*<<src/AtomReasonFormat.re 75 11>>*/ match$0=
           /*<<src/AtomReasonFormat.re 75 11>>*/ _aD_(_b8_);
         /*<<src/AtomReasonFormat.re 75 53>>*/ if(typeof match$0 === "number")
         var switch$0=0;
        else
          /*<<src/AtomReasonFormat.re 75 53>>*/ if(1 === match$0[0])
          { /*<<src/AtomReasonFormat.re 76 21>>*/  /*<<src/AtomReasonFormat.re 76 21>>*/ var
            n=
             match$0[1];
            /*<<src/AtomReasonFormat.re 76 21>>*/ if(0 < (n | 0))
             /*<<src/AtomReasonFormat.re 76 43>>*/ var
              /*<<src/AtomReasonFormat.re 76 43>>*/ _gI_=[0,n | 0],
             printWidth=_gI_,
             switch$0=1;
           else
            var switch$0=0}
         else
          var switch$0=0;
         /*<<camlinternalFormatBasics.ml 502 8>>*/ if(!switch$0)
         var printWidth=0;
         /*<<src/AtomReasonFormat.re 71 24>>*/ var
          /*<<src/AtomReasonFormat.re 79 2>>*/ onStdOut=
          function(line)
           { /*<<src/AtomReasonFormat.re 79 23>>*/ var
              /*<<src/AtomReasonFormat.re 79 23>>*/ _gR_=[0,line],
              /*<<src/AtomReasonFormat.re 79 23>>*/ _gS_=stdOutLines[1],
              /*<<src/AtomReasonFormat.re 79 46>>*/ _gT_=
               /*<<src/AtomReasonFormat.re 79 46>>*/ _f_(_gS_,_gR_);
             /*<<src/AtomReasonFormat.re 79 88>>*/ stdOutLines[1] = _gT_;
             /*<<src/AtomReasonFormat.re 79 88>>*/ return 0 /*<<src/AtomReasonFormat.re 79 88>>*/ },
          /*<<src/AtomReasonFormat.re 80 2>>*/ onStdErr=
          function(line)
           { /*<<src/AtomReasonFormat.re 80 23>>*/ var
              /*<<src/AtomReasonFormat.re 80 23>>*/ _gO_=[0,line],
              /*<<src/AtomReasonFormat.re 80 23>>*/ _gP_=stdErrLines[1],
              /*<<src/AtomReasonFormat.re 80 46>>*/ _gQ_=
               /*<<src/AtomReasonFormat.re 80 46>>*/ _f_(_gP_,_gO_);
             /*<<src/AtomReasonFormat.re 80 88>>*/ stdErrLines[1] = _gQ_;
             /*<<src/AtomReasonFormat.re 80 88>>*/ return 0 /*<<src/AtomReasonFormat.re 80 88>>*/ },
          /*<<src/AtomReasonFormat.re 81 16>>*/ cursors=
           /*<<src/AtomReasonFormat.re 81 16>>*/ _aS_(editor);
         /*<<src/AtomReasonFormat.re 82 2>>*/ if(cursors)
          /*<<src/AtomReasonFormat.re 85 30>>*/ var
           /*<<src/AtomReasonFormat.re 85 30>>*/ firstCursor=cursors[1],
           /*<<src/AtomReasonFormat.re 85 30>>*/ _gx_=
            /*<<src/AtomReasonFormat.re 85 30>>*/ _aL_(firstCursor),
          match$1=_gx_;
        else
         var match$1=_cl_;
         /*<<src/AtomReasonFormat.re 71 24>>*/ var
         origCursorCol=match$1[2],
         origCursorRow=match$1[1],
          /*<<src/AtomReasonFormat.re 87 2>>*/ onExit=
          function(code)
           { /*<<src/AtomReasonFormat.re 87 21>>*/ var
              /*<<src/AtomReasonFormat.re 87 21>>*/ _gK_=
              [0,origCursorRow,origCursorCol],
              /*<<src/AtomReasonFormat.re 87 21>>*/ _gL_=stdOutLines[1],
              /*<<src/AtomReasonFormat.re 89 6>>*/ formatResult=
               /*<<src/AtomReasonFormat.re 89 6>>*/ _b3_(_gL_,_gK_),
              /*<<src/AtomReasonFormat.re 90 4>>*/ _gM_=stdErrLines[1],
              /*<<src/AtomReasonFormat.re 90 36>>*/ _gN_=
               /*<<src/AtomReasonFormat.re 90 36>>*/ _h_(_gM_),
              /*<<src/AtomReasonFormat.re 90 17>>*/ stdErr=
               /*<<src/AtomReasonFormat.re 90 17>>*/ _P_(_b9_,_gN_);
             /*<<src/AtomReasonFormat.re 91 4>>*/ return  /*<<src/AtomReasonFormat.re 91 4>>*/ caml_call3
                    (onComplete,code,formatResult,stdErr) /*<<src/AtomReasonFormat.re 92 3>>*/ };
         /*<<src/AtomReasonFormat.re 93 2>>*/ if(printWidth)
          /*<<src/AtomReasonFormat.re 96 27>>*/ var
           /*<<src/AtomReasonFormat.re 96 27>>*/ printWidth$0=printWidth[1],
           /*<<src/AtomReasonFormat.re 96 27>>*/ _gy_=0,
           /*<<src/AtomReasonFormat.re 96 44>>*/ _gz_=
            /*<<src/AtomReasonFormat.re 96 44>>*/ string_of_int(printWidth$0),
          printWidthArgs=[0,_b__,[0,_gz_,_gy_]];
        else
         var printWidthArgs=0;
         /*<<src/AtomReasonFormat.re 71 24>>*/ var
          /*<<src/AtomReasonFormat.re 100 32>>*/ _gA_=
           /*<<src/AtomReasonFormat.re 100 32>>*/ _aT_(editor),
          /*<<src/AtomReasonFormat.re 100 13>>*/ match$2=
           /*<<src/AtomReasonFormat.re 100 13>>*/ _aN_(_gA_),
          /*<<src/AtomReasonFormat.re 100 64>>*/ syntaxArg=
           /*<<src/AtomReasonFormat.re 100 64>>*/ caml_string_notequal
            (match$2,_b$_)
           ?_ca_
           :_ck_,
          /*<<src/AtomReasonFormat.re 104 4>>*/ _gB_=0,
          /*<<src/AtomReasonFormat.re 104 4>>*/ _gC_=
          0 === isInterface?_cb_:_cj_,
         _gD_=
          [0,
           _cg_,
           [0,
            _cf_,
            [0,
             _ce_,
             [0,syntaxArg,[0,_cd_,[0,syntaxArg,[0,_cc_,[0,_gC_,_gB_]]]]]]]],
          /*<<src/AtomReasonFormat.re 104 4>>*/ args=
           /*<<src/AtomReasonFormat.re 104 4>>*/ _c_(printWidthArgs,_gD_),
          /*<<src/AtomReasonFormat.re 115 2>>*/ _gE_=[0,onExit],
          /*<<src/AtomReasonFormat.re 115 2>>*/ _gF_=[0,onStdErr],
          /*<<src/AtomReasonFormat.re 115 2>>*/ _gG_=[0,onStdOut],
          /*<<src/AtomReasonFormat.re 115 2>>*/ _gH_=[0,[0,_a1_,_b2_,_a0_]],
          /*<<src/AtomReasonFormat.re 116 4>>*/ proc=
           /*<<src/AtomReasonFormat.re 116 4>>*/ _a4_
           (_gH_,_gG_,_gF_,_gE_,pth,args),
          /*<<src/AtomReasonFormat.re 123 19>>*/ errorTitle=
           /*<<src/AtomReasonFormat.re 123 19>>*/ _b_(_ch_,pth),
          /*<<src/AtomReasonFormat.re 124 2>>*/ handleError=
          function(error,handle)
           { /*<<src/AtomReasonFormat.re 124 34>>*/  /*<<src/AtomReasonFormat.re 124 34>>*/ var
             _gJ_=
              [0,[0,error,_aX_[2],_aX_[3]]];
             /*<<src/AtomReasonFormat.re 125 4>>*/  /*<<src/AtomReasonFormat.re 125 4>>*/ _aY_
             (_gJ_,errorTitle);
             /*<<src/AtomReasonFormat.re 130 4>>*/  /*<<src/AtomReasonFormat.re 130 4>>*/ caml_call1
             (onFailure,_ci_);
             /*<<src/AtomReasonFormat.re 130 24>>*/ return  /*<<src/AtomReasonFormat.re 130 24>>*/ caml_call1
                    (handle,0) /*<<src/AtomReasonFormat.re 132 3>>*/ };
         /*<<src/AtomReasonFormat.re 133 2>>*/  /*<<src/AtomReasonFormat.re 133 2>>*/ _a$_
         (proc,handleError);
         /*<<src/AtomReasonFormat.re 71 24>>*/  /*<<src/AtomReasonFormat.re 135 16>>*/ var
         process=
           /*<<src/AtomReasonFormat.re 135 16>>*/ _ba_(proc);
         /*<<src/AtomReasonFormat.re 136 2>>*/  /*<<src/AtomReasonFormat.re 136 2>>*/ _a2_
         (process,subText);
         /*<<src/AtomReasonFormat.re 136 41>>*/ return  /*<<src/AtomReasonFormat.re 136 41>>*/ _a3_
                (process)}
       /*<<src/AtomReasonFormat.re 67 2>>*/  /*<<src/AtomReasonFormat.re 72 11>>*/ var
       _gw_=
        [0,Invalid_argument,_b7_];
       /*<<src/AtomReasonFormat.re 72 96>>*/ throw _gw_ /*<<src/AtomReasonFormat.re 137 31>>*/ }
     /*<<src/AtomReasonFormat.re 14 61>>*/ function _cm_
     (editor,range,notifySuccess,notifyInvalid,notifyInfo,resolve,reject)
     { /*<<src/AtomReasonFormat.re 161 15>>*/ var
        /*<<src/AtomReasonFormat.re 161 15>>*/ buffer=
         /*<<src/AtomReasonFormat.re 161 15>>*/ _aQ_(editor),
        /*<<src/AtomReasonFormat.re 162 13>>*/ text=
         /*<<src/AtomReasonFormat.re 162 13>>*/ _aJ_(buffer),
        /*<<src/AtomReasonFormat.re 163 16>>*/ subText=
         /*<<src/AtomReasonFormat.re 163 16>>*/ _aK_(buffer,range);
       /*<<src/AtomReasonFormat.re 164 2>>*/ function _gr_
       (code,formatResult,stdErr)
       { /*<<src/AtomReasonFormat.re 169 67>>*/ if(code == 0)
         { /*<<src/AtomReasonFormat.re 172 15>>*/ var
            /*<<src/AtomReasonFormat.re 172 15>>*/ _gu_=formatResult[2],
            /*<<src/AtomReasonFormat.re 172 18>>*/ _gv_=
             /*<<src/AtomReasonFormat.re 172 18>>*/ _b0_(_gu_,text);
           /*<<src/AtomReasonFormat.re 174 9>>*/ if(_gv_)
            /*<<src/AtomReasonFormat.re 174 10>>*/ caml_call1(notifyInfo,_cn_);
          else
            /*<<src/AtomReasonFormat.re 176 15>>*/ caml_call1
            (notifySuccess,_co_)}
        else
          /*<<src/AtomReasonFormat.re 170 31>>*/ caml_call1
          (notifyInvalid,_cp_);
         /*<<src/AtomReasonFormat.re 178 9>>*/  /*<<src/AtomReasonFormat.re 178 9>>*/ var
         match=
          code == 0?1:0;
         /*<<src/AtomReasonFormat.re 178 9>>*/ return 0 === match
                ? /*<<src/AtomReasonFormat.re 179 45>>*/ caml_call1
                  (reject,stdErr)
                : /*<<src/AtomReasonFormat.re 179 22>>*/ caml_call1
                  (resolve,formatResult) /*<<src/AtomReasonFormat.re 180 7>>*/ }
       /*<<src/AtomReasonFormat.re 167 30>>*/ var
        /*<<src/AtomReasonFormat.re 167 30>>*/ _gs_=
         /*<<src/AtomReasonFormat.re 167 30>>*/ _aR_(editor),
        /*<<src/AtomReasonFormat.re 167 17>>*/ _gt_=
         /*<<src/AtomReasonFormat.re 167 17>>*/ _be_(_gs_);
       /*<<src/AtomReasonFormat.re 167 54>>*/ return  /*<<src/AtomReasonFormat.re 167 54>>*/ _b5_
              (editor,subText,_gt_,_gr_,reject) /*<<src/AtomReasonFormat.re 183 1>>*/ }
     /*<<src/AtomReasonFormat.re 14 61>>*/ function _cq_
     (editor,range,notifySuccess,notifyInvalid,notifyInfo,resolve,reject)
     { /*<<src/AtomReasonFormat.re 193 15>>*/ var
        /*<<src/AtomReasonFormat.re 193 15>>*/ buffer=
         /*<<src/AtomReasonFormat.re 193 15>>*/ _aQ_(editor),
        /*<<src/AtomReasonFormat.re 194 16>>*/ subText=
         /*<<src/AtomReasonFormat.re 194 16>>*/ _aK_(buffer,range);
       /*<<src/AtomReasonFormat.re 195 2>>*/ function _gm_
       (code,formatResult,stdErr)
       { /*<<src/AtomReasonFormat.re 200 67>>*/ if(code == 0)
         { /*<<src/AtomReasonFormat.re 203 15>>*/ var
            /*<<src/AtomReasonFormat.re 203 15>>*/ _gp_=formatResult[2],
            /*<<src/AtomReasonFormat.re 203 18>>*/ _gq_=
             /*<<src/AtomReasonFormat.re 203 18>>*/ _b0_(_gp_,subText);
           /*<<src/AtomReasonFormat.re 205 9>>*/ if(_gq_)
            /*<<src/AtomReasonFormat.re 205 10>>*/ caml_call1(notifyInfo,_cr_);
          else
            /*<<src/AtomReasonFormat.re 207 15>>*/ caml_call1
            (notifySuccess,_cs_)}
        else
          /*<<src/AtomReasonFormat.re 201 31>>*/ caml_call1
          (notifyInvalid,_ct_);
         /*<<src/AtomReasonFormat.re 209 9>>*/  /*<<src/AtomReasonFormat.re 209 9>>*/ var
         match=
          code == 0?1:0;
         /*<<src/AtomReasonFormat.re 209 9>>*/ return 0 === match
                ? /*<<src/AtomReasonFormat.re 211 55>>*/ caml_call1
                  (reject,stdErr)
                : /*<<src/AtomReasonFormat.re 211 22>>*/ caml_call1
                  (resolve,formatResult[2]) /*<<src/AtomReasonFormat.re 212 7>>*/ }
       /*<<src/AtomReasonFormat.re 198 30>>*/ var
        /*<<src/AtomReasonFormat.re 198 30>>*/ _gn_=
         /*<<src/AtomReasonFormat.re 198 30>>*/ _aR_(editor),
        /*<<src/AtomReasonFormat.re 198 17>>*/ _go_=
         /*<<src/AtomReasonFormat.re 198 17>>*/ _be_(_gn_);
       /*<<src/AtomReasonFormat.re 198 54>>*/ return  /*<<src/AtomReasonFormat.re 198 54>>*/ _b5_
              (editor,subText,_go_,_gm_,reject) /*<<src/AtomReasonFormat.re 215 1>>*/ }
     /*<<src/AtomReasonLocate.re 8 16>>*/ var
      /*<<src/AtomReasonLocate.re 8 16>>*/ notiflyer=
       /*<<src/AtomReasonLocate.re 8 16>>*/ require("../lib/Notiflyer"),
      /*<<src/AtomReasonLocate.re 11 20>>*/ _cu_=
       /*<<src/AtomReasonLocate.re 12 22>>*/ function()
        { /*<<src/AtomReasonLocate.re 13 24>>*/ function goToLocation
          (file,line,column,center)
          {center = center == null?true:center;
            /*<<src/AtomReasonLocate.re 15 26>>*/ return  /*<<src/AtomReasonLocate.re 15 33>>*/  /*<<src/AtomReasonLocate.re 15 33>>*/ atom.workspace.open
                    (file,
                     {initialLine:line,initialColumn:column,searchAllPanes:true}).then
                   (function(editor)
                     { /*<<src/AtomReasonLocate.re 21 28>>*/ if(center)
                        /*<<src/AtomReasonLocate.re 21 40>>*/ return  /*<<src/AtomReasonLocate.re 22 37>>*/ editor.scrollToBufferPosition
                               ([line,column],{center:true});
                       /*<<src/AtomReasonLocate.re 24 28>>*/ return editor /*<<src/AtomReasonLocate.re 20 32>>*/ }) /*<<src/AtomReasonLocate.re 26 24>>*/ }
          /*<<src/AtomReasonLocate.re 28 24>>*/ return function(res)
          { /*<<src/AtomReasonLocate.re 29 26>>*/ goToLocation
            (res.file,res.pos.line - 1,res.pos.col) /*<<src/AtomReasonLocate.re 28 31>>*/ } /*<<src/AtomReasonLocate.re 12 22>>*/ }
       ();
     /*<<src/AtomReasonLocate.re 32 2>>*/ function _cv_(result)
     { /*<<src/AtomReasonLocate.re 34 27>>*/ return  /*<<src/AtomReasonLocate.re 34 27>>*/ _cu_
              (result) /*<<src/AtomReasonLocate.re 34 87>>*/ }
     /*<<src/AtomReasonLocate.re 32 2>>*/ function _cw_
     (path,text,extension,range,resolve,reject)
     { /*<<src/AtomReasonLocate.re 36 100>>*/ var
        /*<<src/AtomReasonLocate.re 36 100>>*/ endPosition=range[2],
        /*<<src/AtomReasonLocate.re 36 100>>*/ startPosition=range[1],
        /*<<src/AtomReasonLocate.re 38 5>>*/ _gf_=
         /*<<src/AtomReasonLocate.re 38 5>>*/ caml_equal
         (startPosition,endPosition);
       /*<<src/AtomReasonLocate.re 38 35>>*/ return _gf_
              ? /*<<src/AtomReasonLocate.re 38 36>>*/ caml_call1
                (resolve,null$0)
              : /*<<src/AtomReasonLocate.re 41 9>>*/ _bW_
                (path,
                 text,
                 extension,
                 startPosition,
                 function(result)
                  { /*<<src/AtomReasonLocate.re 49 17>>*/  /*<<src/AtomReasonLocate.re 49 17>>*/ var
                    a=
                      /*<<src/AtomReasonLocate.re 49 17>>*/ _bD_(result);
                    /*<<src/AtomReasonLocate.re 49 68>>*/ if
                    (typeof a === "number")
                     /*<<src/AtomReasonLocate.re 52 12>>*/ return  /*<<src/AtomReasonLocate.re 52 12>>*/ caml_call1
                            (resolve,null$0);
                   else
                    { /*<<src/AtomReasonLocate.re 49 68>>*/ if(0 === a[0])
                      { /*<<src/AtomReasonLocate.re 54 12>>*/ var
                         /*<<src/AtomReasonLocate.re 54 12>>*/ err=a[1],
                         /*<<src/AtomReasonLocate.re 54 12>>*/ failCallback=
                          /*<<src/AtomReasonLocate.re 54 12>>*/ caml_js_wrap_callback
                          (function(param)
                            { /*<<src/AtomReasonLocate.re 56 82>>*/  /*<<src/AtomReasonLocate.re 56 82>>*/ var
                              _gk_=
                                /*<<src/AtomReasonLocate.re 56 82>>*/ err.toString();
                              /*<<src/AtomReasonLocate.re 56 95>>*/ return  /*<<src/AtomReasonLocate.re 56 95>>*/ notiflyer.showInfoBar
                                     ( /*<<src/AtomReasonLocate.re 56 95>>*/ function(_gl_)
                                        { /*<<src/AtomReasonLocate.re 56 16>>*/ return _gl_ /*<<src/AtomReasonLocate.re 56 97>>*/ }
                                       (_gk_)) /*<<src/AtomReasonLocate.re 56 97>>*/ }),
                         /*<<src/AtomReasonLocate.re 60 26>>*/ _gg_=
                          /*<<src/AtomReasonLocate.re 60 26>>*/ _aH_(range),
                         /*<<src/AtomReasonLocate.re 58 20>>*/ _gh_=
                         {"range":_gg_,"callback":failCallback};
                        /*<<src/AtomReasonLocate.re 63 13>>*/ return  /*<<src/AtomReasonLocate.re 63 13>>*/ caml_call1
                               (resolve,_gh_)}
                      /*<<src/AtomReasonLocate.re 65 12>>*/  /*<<src/AtomReasonLocate.re 65 12>>*/ notiflyer.clearFeedbackBar
                      ();
                      /*<<src/AtomReasonLocate.re 65 65>>*/ var
                       /*<<src/AtomReasonLocate.re 65 65>>*/ successJumpToLocationCallback=
                        /*<<src/AtomReasonLocate.re 65 65>>*/ caml_js_wrap_callback
                        (function(param)
                          { /*<<src/AtomReasonLocate.re 66 76>>*/ return  /*<<src/AtomReasonLocate.re 66 76>>*/ _cv_
                                   (result) /*<<src/AtomReasonLocate.re 66 95>>*/ }),
                       /*<<src/AtomReasonLocate.re 69 26>>*/ _gi_=
                        /*<<src/AtomReasonLocate.re 69 26>>*/ _aH_(range),
                       /*<<src/AtomReasonLocate.re 67 20>>*/ _gj_=
                       {"range":_gi_,"callback":successJumpToLocationCallback};
                      /*<<src/AtomReasonLocate.re 72 13>>*/ return  /*<<src/AtomReasonLocate.re 72 13>>*/ caml_call1
                             (resolve,_gj_)} /*<<src/AtomReasonLocate.re 73 11>>*/ },
                 reject) /*<<src/AtomReasonLocate.re 77 1>>*/ }
    function _cx_(editor,ranges)
     { /*<<src/AtomReasonOccurrences.re 9 2>>*/  /*<<src/AtomReasonOccurrences.re 9 2>>*/ var
       _ge_=
        0 < ranges.length - 1?1:0;
       /*<<src/AtomReasonOccurrences.re 9 2>>*/ return _ge_
              ? /*<<src/AtomReasonOccurrences.re 9 31>>*/ _aU_(editor,ranges)
              :_ge_ /*<<src/AtomReasonOccurrences.re 11 3>>*/ }
    function _cy_(kind,value)
     { /*<<src/AtomReasonOutline.re 10 29>>*/ var
        /*<<src/AtomReasonOutline.re 10 29>>*/ _gc_=
         /*<<src/AtomReasonOutline.re 10 29>>*/ value.toString(),
        /*<<src/AtomReasonOutline.re 9 28>>*/ _gd_=
         /*<<src/AtomReasonOutline.re 9 28>>*/ kind.toString();
       /*<<src/AtomReasonOutline.re 9 44>>*/ return {"kind":_gd_,"value":_gc_} /*<<src/AtomReasonOutline.re 11 2>>*/ }
    function _cz_(grammar,data)
     { /*<<src/AtomReasonOutline.re 14 32>>*/ var
        /*<<src/AtomReasonOutline.re 14 32>>*/ _f6_=data.kind,
        /*<<src/AtomReasonOutline.re 14 59>>*/ merlinKind=
         /*<<src/AtomReasonOutline.re 14 59>>*/ caml_js_to_string(_f6_),
        /*<<src/AtomReasonOutline.re 15 26>>*/ _f7_=data.name,
        /*<<src/AtomReasonOutline.re 15 53>>*/ name=
         /*<<src/AtomReasonOutline.re 15 53>>*/ caml_js_to_string(_f7_);
       /*<<src/AtomReasonOutline.re 16 2>>*/ if
       ( /*<<src/AtomReasonOutline.re 16 2>>*/ caml_string_notequal
         (merlinKind,_cA_))
       if(caml_string_notequal(merlinKind,_cB_))
        if(caml_string_notequal(merlinKind,_cC_))
          /*<<src/AtomReasonOutline.re 25 14>>*/ var
           /*<<src/AtomReasonOutline.re 25 14>>*/ _f8_=
            /*<<src/AtomReasonOutline.re 25 14>>*/ _X_(merlinKind),
          kind=_f8_;
        else
          /*<<src/AtomReasonOutline.re 19 6>>*/ var
          kind=
           825328612 <= grammar?_cR_:_cS_;
       else
        var kind=_cT_;
      else
       var kind=_cU_;
       /*<<src/AtomReasonOutline.re 27 2>>*/ if
       ( /*<<src/AtomReasonOutline.re 27 2>>*/ caml_string_notequal
         (merlinKind,_cD_))
       if(caml_string_notequal(merlinKind,_cE_))
        if(caml_string_notequal(merlinKind,_cF_))
         if(caml_string_notequal(merlinKind,_cG_))
          if(caml_string_notequal(merlinKind,_cH_))
           if(caml_string_notequal(merlinKind,_cI_))
            if(caml_string_notequal(merlinKind,_cJ_))
              /*<<src/AtomReasonOutline.re 36 14>>*/ var
               /*<<src/AtomReasonOutline.re 36 14>>*/ _f9_=
                /*<<src/AtomReasonOutline.re 36 14>>*/ _cy_(_cK_,name),
              nameToken=_f9_,
              switch$0=1;
            else
              /*<<src/AtomReasonOutline.re 29 17>>*/ var
               /*<<src/AtomReasonOutline.re 29 17>>*/ _ga_=
                /*<<src/AtomReasonOutline.re 29 17>>*/ _cy_(_cO_,name),
              nameToken=_ga_,
              switch$0=1;
           else
             /*<<src/AtomReasonOutline.re 35 16>>*/ var
              /*<<src/AtomReasonOutline.re 35 16>>*/ _gb_=
               /*<<src/AtomReasonOutline.re 35 16>>*/ _cy_(_cP_,name),
             nameToken=_gb_,
             switch$0=1;
          else
           var switch$0=0;
         else
          var switch$0=0;
        else
         var switch$0=0;
       else
        var switch$0=0;
      else
       var switch$0=0;
       /*<<camlinternalFormatBasics.ml 502 8>>*/ if(!switch$0)
       var nameToken= /*<<src/AtomReasonOutline.re 34 21>>*/ _cy_(_cQ_,name);
       /*<<src/AtomReasonOutline.re 14 32>>*/ var
        /*<<src/AtomReasonOutline.re 41 6>>*/ _f__=
         /*<<src/AtomReasonOutline.re 41 6>>*/ _cy_(_cM_,_cL_),
        /*<<src/AtomReasonOutline.re 40 6>>*/ _f$_=
         /*<<src/AtomReasonOutline.re 40 6>>*/ _cy_(_cN_,kind);
       /*<<src/AtomReasonOutline.re 40 31>>*/ return  /*<<src/AtomReasonOutline.re 40 31>>*/ caml_js_from_array
              ([0,_f$_,_f__,nameToken]) /*<<src/AtomReasonOutline.re 45 1>>*/ }
    function _cV_(grammar,entries)
     { /*<<src/AtomReasonOutline.re 67 21>>*/ var
        /*<<src/AtomReasonOutline.re 67 21>>*/ _fW_=
         /*<<src/AtomReasonOutline.re 67 21>>*/ caml_js_to_array(entries),
        /*<<src/AtomReasonOutline.re 67 6>>*/ _fX_=
         /*<<src/AtomReasonOutline.re 67 6>>*/ _h_(_fW_);
       /*<<src/AtomReasonOutline.re 67 43>>*/ function _fY_(data)
       { /*<<src/AtomReasonOutline.re 52 68>>*/ var
          /*<<src/AtomReasonOutline.re 52 68>>*/ _f0_=data.start,
          /*<<src/AtomReasonOutline.re 52 22>>*/ start=
           /*<<src/AtomReasonOutline.re 52 22>>*/ _bj_(_f0_),
          /*<<src/AtomReasonOutline.re 55 67>>*/ _f1_=data.end,
          /*<<src/AtomReasonOutline.re 55 21>>*/ endd=
           /*<<src/AtomReasonOutline.re 55 21>>*/ _bj_(_f1_),
          /*<<src/AtomReasonOutline.re 58 10>>*/ children=data.children,
          /*<<src/AtomReasonOutline.re 63 42>>*/ _f2_=
           /*<<src/AtomReasonOutline.re 63 42>>*/ _cV_(grammar,children),
          /*<<src/AtomReasonOutline.re 62 28>>*/ _f3_=
           /*<<src/AtomReasonOutline.re 62 28>>*/ _aE_(endd),
          /*<<src/AtomReasonOutline.re 61 30>>*/ _f4_=
           /*<<src/AtomReasonOutline.re 61 30>>*/ _aE_(start),
          /*<<src/AtomReasonOutline.re 60 30>>*/ _f5_=
           /*<<src/AtomReasonOutline.re 60 30>>*/ _cz_(grammar,data);
         /*<<src/AtomReasonOutline.re 60 53>>*/ return {"tokenizedText":_f5_,
                "startPosition":_f4_,
                "endPosition":_f3_,
                "children":_f2_} /*<<src/AtomReasonOutline.re 65 9>>*/ }
       /*<<src/AtomReasonOutline.re 49 4>>*/ var
        /*<<src/AtomReasonOutline.re 49 4>>*/ entries$0=
         /*<<src/AtomReasonOutline.re 49 4>>*/ _v_(_fY_,_fX_),
        /*<<src/AtomReasonOutline.re 68 11>>*/ _fZ_=
         /*<<src/AtomReasonOutline.re 68 11>>*/ _j_(entries$0);
       /*<<src/AtomReasonOutline.re 68 34>>*/ return  /*<<src/AtomReasonOutline.re 68 34>>*/ caml_js_from_array
              (_fZ_) /*<<src/AtomReasonOutline.re 69 1>>*/ }
    function _cW_(path,text,grammar,resolve,reject)
     { /*<<src/AtomReasonOutline.re 71 72>>*/  /*<<src/AtomReasonOutline.re 71 72>>*/ var
       grammar$0=
         /*<<src/AtomReasonOutline.re 71 72>>*/ caml_string_notequal
          (grammar,_cX_)
         ?691738988
         :825328612;
       /*<<src/AtomReasonOutline.re 77 2>>*/ return  /*<<src/AtomReasonOutline.re 77 2>>*/ _bY_
              (path,
               text,
               function(result)
                { /*<<src/AtomReasonOutline.re 83 44>>*/ var
                   /*<<src/AtomReasonOutline.re 83 44>>*/ _fU_=
                    /*<<src/AtomReasonOutline.re 83 44>>*/ _cV_
                    (grammar$0,result),
                   /*<<src/AtomReasonOutline.re 81 28>>*/ _fV_=
                   {"outlineTrees":_fU_};
                  /*<<src/AtomReasonOutline.re 85 7>>*/ return  /*<<src/AtomReasonOutline.re 85 7>>*/ caml_call1
                         (resolve,_fV_) /*<<src/AtomReasonOutline.re 85 7>>*/ },
               reject) /*<<src/AtomReasonOutline.re 88 1>>*/ }
    function _cY_(x,d)
     { /*<<src/NuclideJs.re 11 2>>*/ if(x)
       { /*<<src/NuclideJs.re 13 14>>*/  /*<<src/NuclideJs.re 13 14>>*/ var
         s=
          x[1];
         /*<<src/NuclideJs.re 13 14>>*/ return s}
       /*<<src/NuclideJs.re 12 12>>*/ return d /*<<src/NuclideJs.re 14 3>>*/ }
    function _cZ_(param)
     { /*<<src/NuclideJs.re 19 4>>*/ return 0 === param?"Error":"Warning" /*<<src/NuclideJs.re 21 36>>*/ }
    function _c0_(trace)
     { /*<<src/NuclideJs.re 30 27>>*/ var
        /*<<src/NuclideJs.re 30 27>>*/ range=trace[5],
        /*<<src/NuclideJs.re 30 27>>*/ filePath=trace[4],
        /*<<src/NuclideJs.re 30 27>>*/ html=trace[3],
        /*<<src/NuclideJs.re 30 27>>*/ text=trace[2],
        /*<<src/NuclideJs.re 32 6>>*/ _fJ_=
         /*<<src/NuclideJs.re 32 6>>*/ filePath.toString(),
        /*<<src/NuclideJs.re 35 58>>*/ _fK_=[0,_c1_,_fJ_],
        /*<<src/NuclideJs.re 34 45>>*/ _fL_=
         /*<<src/NuclideJs.re 34 45>>*/ _cY_(text,_c2_),
        /*<<src/NuclideJs.re 34 58>>*/ _fM_=
         /*<<src/NuclideJs.re 34 58>>*/ _fL_.toString(),
        /*<<src/NuclideJs.re 34 59>>*/ _fN_=[0,_c3_,_fM_],
        /*<<src/NuclideJs.re 33 34>>*/ _fO_="trace",
        /*<<src/NuclideJs.re 33 53>>*/ fields=[0,[0,_c4_,_fO_],_fN_,_fK_];
       /*<<src/NuclideJs.re 37 6>>*/ if(html)
        /*<<src/NuclideJs.re 40 20>>*/ var
         /*<<src/NuclideJs.re 40 20>>*/ h=html[1],
         /*<<src/NuclideJs.re 40 20>>*/ _fP_=[0,[0,_c5_,h]],
         /*<<src/NuclideJs.re 40 20>>*/ _fQ_=
          /*<<src/NuclideJs.re 40 20>>*/ _f_(fields,_fP_),
        fields$0=_fQ_;
      else
       var fields$0=fields;
       /*<<src/NuclideJs.re 42 6>>*/ if(range)
        /*<<src/NuclideJs.re 45 20>>*/ var
         /*<<src/NuclideJs.re 45 20>>*/ r=range[1],
         /*<<src/NuclideJs.re 45 69>>*/ _fR_=
          /*<<src/NuclideJs.re 45 69>>*/ _aH_(r),
         /*<<src/NuclideJs.re 45 88>>*/ _fS_=[0,[0,_c6_,_fR_]],
         /*<<src/NuclideJs.re 45 20>>*/ _fT_=
          /*<<src/NuclideJs.re 45 20>>*/ _f_(fields$0,_fS_),
        fields$1=_fT_;
      else
       var fields$1=fields$0;
       /*<<src/NuclideJs.re 47 6>>*/ return  /*<<src/NuclideJs.re 47 6>>*/ caml_js_object
              (fields$1) /*<<src/NuclideJs.re 48 5>>*/ }
    function _c7_(diagnosticMessage)
     { /*<<src/NuclideJs.re 53 6>>*/ if(0 === diagnosticMessage[0])
       { /*<<src/NuclideJs.re 60 47>>*/ var
         match=diagnosticMessage[1],
         trace=match[8],
         range=match[7],
         html=match[6],
         text=match[5],
         filePath=match[4],
         typee=match[3],
         providerName=match[2],
          /*<<src/NuclideJs.re 60 47>>*/ _fb_=
           /*<<src/NuclideJs.re 60 47>>*/ _cY_(text,_c8_),
          /*<<src/NuclideJs.re 60 60>>*/ _fc_=
           /*<<src/NuclideJs.re 60 60>>*/ _fb_.toString(),
          /*<<src/NuclideJs.re 60 61>>*/ _fd_=[0,_c9_,_fc_],
          /*<<src/NuclideJs.re 59 40>>*/ _fe_=
           /*<<src/NuclideJs.re 59 40>>*/ filePath.toString(),
          /*<<src/NuclideJs.re 59 60>>*/ _ff_=[0,_c__,_fe_],
          /*<<src/NuclideJs.re 58 36>>*/ _fg_=
           /*<<src/NuclideJs.re 58 36>>*/ _cZ_(typee),
          /*<<src/NuclideJs.re 58 62>>*/ _fh_=[0,_c$_,_fg_],
          /*<<src/NuclideJs.re 57 44>>*/ _fi_=
           /*<<src/NuclideJs.re 57 44>>*/ providerName.toString(),
          /*<<src/NuclideJs.re 57 68>>*/ _fj_=[0,_da_,_fi_],
          /*<<src/NuclideJs.re 56 37>>*/ _fk_="file",
          /*<<src/NuclideJs.re 56 55>>*/ fields=
          [0,[0,_db_,_fk_],_fj_,_fh_,_ff_,_fd_];
         /*<<src/NuclideJs.re 62 8>>*/ if(html)
          /*<<src/NuclideJs.re 65 22>>*/ var
           /*<<src/NuclideJs.re 65 22>>*/ h=html[1],
           /*<<src/NuclideJs.re 65 22>>*/ _fl_=[0,[0,_dc_,h]],
           /*<<src/NuclideJs.re 65 22>>*/ _fm_=
            /*<<src/NuclideJs.re 65 22>>*/ _f_(fields,_fl_),
          fields$0=_fm_;
        else
         var fields$0=fields;
         /*<<src/NuclideJs.re 67 8>>*/ if(range)
          /*<<src/NuclideJs.re 70 22>>*/ var
           /*<<src/NuclideJs.re 70 22>>*/ r=range[1],
           /*<<src/NuclideJs.re 70 71>>*/ _fn_=
            /*<<src/NuclideJs.re 70 71>>*/ _aH_(r),
           /*<<src/NuclideJs.re 70 90>>*/ _fo_=[0,[0,_dd_,_fn_]],
           /*<<src/NuclideJs.re 70 22>>*/ _fp_=
            /*<<src/NuclideJs.re 70 22>>*/ _f_(fields$0,_fo_),
          fields$1=_fp_;
        else
         var fields$1=fields$0;
         /*<<src/NuclideJs.re 72 8>>*/ if(trace)
          /*<<src/NuclideJs.re 76 54>>*/ var
          ts=trace[1],
           /*<<src/NuclideJs.re 76 54>>*/ _fq_=
            /*<<src/NuclideJs.re 76 54>>*/ _g_(_c0_,ts),
           /*<<src/NuclideJs.re 76 79>>*/ jsTraces=
            /*<<src/NuclideJs.re 76 79>>*/ caml_js_from_array(_fq_),
           /*<<src/NuclideJs.re 77 12>>*/ _fr_=[0,[0,_de_,jsTraces]],
           /*<<src/NuclideJs.re 77 12>>*/ _fs_=
            /*<<src/NuclideJs.re 77 12>>*/ _f_(fields$1,_fr_),
          fields$2=_fs_;
        else
         var fields$2=fields$1;
         /*<<src/NuclideJs.re 79 8>>*/ return  /*<<src/NuclideJs.re 79 8>>*/ caml_js_object
                (fields$2)}
       /*<<src/NuclideJs.re 85 47>>*/ var
       match$0=diagnosticMessage[1],
       trace$0=match$0[7],
       range$0=match$0[6],
       html$0=match$0[5],
       text$0=match$0[4],
       typee$0=match$0[3],
       providerName$0=match$0[2],
        /*<<src/NuclideJs.re 85 47>>*/ _ft_=
         /*<<src/NuclideJs.re 85 47>>*/ _cY_(text$0,_df_),
        /*<<src/NuclideJs.re 85 60>>*/ _fu_=
         /*<<src/NuclideJs.re 85 60>>*/ _ft_.toString(),
        /*<<src/NuclideJs.re 85 61>>*/ _fv_=[0,_dg_,_fu_],
        /*<<src/NuclideJs.re 84 36>>*/ _fw_=
         /*<<src/NuclideJs.re 84 36>>*/ _cZ_(typee$0),
        /*<<src/NuclideJs.re 84 62>>*/ _fx_=[0,_dh_,_fw_],
        /*<<src/NuclideJs.re 83 44>>*/ _fy_=
         /*<<src/NuclideJs.re 83 44>>*/ providerName$0.toString(),
        /*<<src/NuclideJs.re 83 68>>*/ _fz_=[0,_di_,_fy_],
        /*<<src/NuclideJs.re 82 37>>*/ _fA_="project",
        /*<<src/NuclideJs.re 82 58>>*/ fields$3=
        [0,[0,_dj_,_fA_],_fz_,_fx_,_fv_];
       /*<<src/NuclideJs.re 87 8>>*/ if(html$0)
        /*<<src/NuclideJs.re 90 22>>*/ var
         /*<<src/NuclideJs.re 90 22>>*/ h$0=html$0[1],
         /*<<src/NuclideJs.re 90 22>>*/ _fB_=[0,[0,_dk_,h$0]],
         /*<<src/NuclideJs.re 90 22>>*/ _fC_=
          /*<<src/NuclideJs.re 90 22>>*/ _f_(fields$3,_fB_),
        fields$4=_fC_;
      else
       var fields$4=fields$3;
       /*<<src/NuclideJs.re 92 8>>*/ if(range$0)
        /*<<src/NuclideJs.re 95 22>>*/ var
         /*<<src/NuclideJs.re 95 22>>*/ r$0=range$0[1],
         /*<<src/NuclideJs.re 95 71>>*/ _fD_=
          /*<<src/NuclideJs.re 95 71>>*/ _aH_(r$0),
         /*<<src/NuclideJs.re 95 90>>*/ _fE_=[0,[0,_dl_,_fD_]],
         /*<<src/NuclideJs.re 95 22>>*/ _fF_=
          /*<<src/NuclideJs.re 95 22>>*/ _f_(fields$4,_fE_),
        fields$5=_fF_;
      else
       var fields$5=fields$4;
       /*<<src/NuclideJs.re 97 8>>*/ if(trace$0)
        /*<<src/NuclideJs.re 101 54>>*/ var
        ts$0=trace$0[1],
         /*<<src/NuclideJs.re 101 54>>*/ _fG_=
          /*<<src/NuclideJs.re 101 54>>*/ _g_(_c0_,ts$0),
         /*<<src/NuclideJs.re 101 79>>*/ jsTraces$0=
          /*<<src/NuclideJs.re 101 79>>*/ caml_js_from_array(_fG_),
         /*<<src/NuclideJs.re 102 12>>*/ _fH_=[0,[0,_dm_,jsTraces$0]],
         /*<<src/NuclideJs.re 102 12>>*/ _fI_=
          /*<<src/NuclideJs.re 102 12>>*/ _f_(fields$5,_fH_),
        fields$6=_fI_;
      else
       var fields$6=fields$5;
       /*<<src/NuclideJs.re 104 8>>*/ return  /*<<src/NuclideJs.re 104 8>>*/ caml_js_object
              (fields$6) /*<<src/NuclideJs.re 105 7>>*/ }
    function _dn_(result)
     { /*<<src/NuclideJs.re 110 50>>*/ var
        /*<<src/NuclideJs.re 110 50>>*/ _e__=result[2],
        /*<<src/NuclideJs.re 112 35>>*/ _e$_=
         /*<<src/NuclideJs.re 112 35>>*/ _e__.toString(),
        /*<<src/NuclideJs.re 112 63>>*/ _fa_=result[1];
       /*<<src/NuclideJs.re 111 87>>*/ return {"newCursor":_fa_,
              "formatted":_e$_} /*<<src/NuclideJs.re 113 4>>*/ }
    function _do_(o)
     { /*<<src/NuclideJs.re 120 25>>*/ var
        /*<<src/NuclideJs.re 120 25>>*/ _e6_=o.prefix,
        /*<<src/NuclideJs.re 120 51>>*/ _e7_=
         /*<<src/NuclideJs.re 120 51>>*/ caml_js_to_string(_e6_),
        /*<<src/NuclideJs.re 119 31>>*/ _e8_=o.editor,
        /*<<src/NuclideJs.re 119 12>>*/ _e9_=
         /*<<src/NuclideJs.re 119 12>>*/ _aO_(_e8_);
       /*<<src/NuclideJs.re 119 57>>*/ return [0,_e9_,_e7_] /*<<src/NuclideJs.re 121 3>>*/ }
    function _dp_(param)
     { /*<<src/NuclideJs.re 127 4>>*/ switch(param)
       {case 0: /*<<src/NuclideJs.re 132 18>>*/ return "variable";
        case 1: /*<<src/NuclideJs.re 133 18>>*/ return "constant";
        case 2: /*<<src/NuclideJs.re 134 18>>*/ return "property";
        case 3: /*<<src/NuclideJs.re 128 15>>*/ return "value";
        case 4: /*<<src/NuclideJs.re 135 16>>*/ return "method";
        case 5: /*<<src/NuclideJs.re 136 18>>*/ return "function";
        case 6: /*<<src/NuclideJs.re 129 15>>*/ return "class";
        case 7: /*<<src/NuclideJs.re 130 17>>*/ return "require";
        case 8: /*<<src/NuclideJs.re 131 14>>*/ return "type";
        case 9: /*<<src/NuclideJs.re 137 17>>*/ return "keyword";
        case 10: /*<<src/NuclideJs.re 138 13>>*/ return "tag";
        case 11: /*<<src/NuclideJs.re 139 17>>*/ return "snippet";
        default: /*<<src/NuclideJs.re 140 16>>*/ return "import"} /*<<src/NuclideJs.re 140 34>>*/ }
    function _dq_(e)
     { /*<<src/NuclideJs.re 141 21>>*/ var
        /*<<src/NuclideJs.re 141 21>>*/ _eU_=e[6],
        /*<<src/NuclideJs.re 147 43>>*/ _eV_=
         /*<<src/NuclideJs.re 147 43>>*/ _eU_.toString(),
        /*<<src/NuclideJs.re 147 74>>*/ _eW_=e[5],
        /*<<src/NuclideJs.re 146 37>>*/ _eX_=
         /*<<src/NuclideJs.re 146 37>>*/ _eW_.toString(),
        /*<<src/NuclideJs.re 146 62>>*/ _eY_=e[4],
        /*<<src/NuclideJs.re 145 30>>*/ _eZ_=
         /*<<src/NuclideJs.re 145 30>>*/ _dp_(_eY_),
        /*<<src/NuclideJs.re 145 48>>*/ _e0_=e[3],
        /*<<src/NuclideJs.re 144 37>>*/ _e1_=
         /*<<src/NuclideJs.re 144 37>>*/ _e0_.toString(),
        /*<<src/NuclideJs.re 144 62>>*/ _e2_=e[2],
        /*<<src/NuclideJs.re 143 30>>*/ _e3_=
         /*<<src/NuclideJs.re 143 30>>*/ _e2_.toString(),
        /*<<src/NuclideJs.re 143 48>>*/ _e4_=e[1],
        /*<<src/NuclideJs.re 142 35>>*/ _e5_=
         /*<<src/NuclideJs.re 142 35>>*/ _e4_.toString();
       /*<<src/NuclideJs.re 142 58>>*/ return {"leftLabel":_e5_,
              "text":_e3_,
              "displayText":_e1_,
              "type":_eZ_,
              "description":_eX_,
              "replacementPrefix":_eV_} /*<<src/NuclideJs.re 148 4>>*/ }
    function _dr_(jsEditor)
     { /*<<src/Index.re 19 22>>*/ return  /*<<src/Index.re 19 22>>*/ _aV_
              (function(resolve,reject)
                { /*<<src/Index.re 21 10>>*/ function _eQ_(successResult)
                  { /*<<src/Index.re 26 25>>*/ var
                     /*<<src/Index.re 26 25>>*/ _eS_=
                      /*<<src/Index.re 26 25>>*/ _g_(_c7_,successResult),
                     /*<<src/Index.re 26 84>>*/ _eT_=
                      /*<<src/Index.re 26 84>>*/ caml_js_from_array(_eS_);
                    /*<<src/Index.re 27 15>>*/ return  /*<<src/Index.re 27 15>>*/ caml_call1
                           (resolve,_eT_) /*<<src/Index.re 27 15>>*/ }
                  /*<<src/Index.re 23 20>>*/  /*<<src/Index.re 23 20>>*/ var
                  _eR_=
                    /*<<src/Index.re 23 20>>*/ _aO_(jsEditor);
                  /*<<src/Index.re 23 49>>*/ return  /*<<src/Index.re 23 49>>*/ _bZ_
                         (_eR_,_eQ_,reject) /*<<src/Index.re 30 18>>*/ }) /*<<src/Index.re 31 7>>*/ }
     /*<<src/Index.re 17 2>>*/  /*<<src/Index.re 17 2>>*/ var
     _ds_=
       /*<<src/Index.re 17 2>>*/ caml_js_wrap_callback(_dr_);
     /*<<src/Index.re 15 0>>*/  /*<<src/Index.re 15 0>>*/ _bb_(_dt_,_ds_);
     /*<<src/Index.re 33 3>>*/ function _du_
     (jsEditor,jsRange,jsNotifySuccess,jsNotifyInvalid,jsNotifyInfo)
     { /*<<src/Index.re 40 21>>*/ var
        /*<<src/Index.re 40 21>>*/ editor=
         /*<<src/Index.re 40 21>>*/ _aO_(jsEditor),
        /*<<src/Index.re 41 20>>*/ range=
         /*<<src/Index.re 41 20>>*/ _aI_(jsRange);
       /*<<src/Index.re 42 8>>*/ function notifySuccess(msg)
       { /*<<src/Index.re 43 64>>*/  /*<<src/Index.re 43 64>>*/ var
         _eP_=
           /*<<src/Index.re 43 64>>*/ msg.toString();
         /*<<src/Index.re 43 79>>*/ return  /*<<src/Index.re 43 79>>*/ jsNotifySuccess
                (_eP_) /*<<src/Index.re 43 81>>*/ }
       /*<<src/Index.re 44 8>>*/ function notifyInvalid(msg)
       { /*<<src/Index.re 45 64>>*/  /*<<src/Index.re 45 64>>*/ var
         _eO_=
           /*<<src/Index.re 45 64>>*/ msg.toString();
         /*<<src/Index.re 45 79>>*/ return  /*<<src/Index.re 45 79>>*/ jsNotifyInvalid
                (_eO_) /*<<src/Index.re 45 81>>*/ }
       /*<<src/Index.re 46 8>>*/ function notifyInfo(msg)
       { /*<<src/Index.re 46 81>>*/  /*<<src/Index.re 46 81>>*/ var
         _eN_=
           /*<<src/Index.re 46 81>>*/ msg.toString();
         /*<<src/Index.re 46 96>>*/ return  /*<<src/Index.re 46 96>>*/ jsNotifyInfo
                (_eN_) /*<<src/Index.re 46 98>>*/ }
       /*<<src/Index.re 47 8>>*/ return  /*<<src/Index.re 47 8>>*/ _aV_
              (function(resolve,reject)
                { /*<<src/Index.re 49 12>>*/ function _eK_(rejectedMsg)
                  { /*<<src/Index.re 56 41>>*/  /*<<src/Index.re 56 41>>*/ var
                    _eM_=
                      /*<<src/Index.re 56 41>>*/ rejectedMsg.toString();
                    /*<<src/Index.re 56 64>>*/ return  /*<<src/Index.re 56 64>>*/ caml_call1
                           (reject,_eM_) /*<<src/Index.re 56 64>>*/ }
                  /*<<src/Index.re 49 12>>*/ return  /*<<src/Index.re 49 12>>*/ _cm_
                         (editor,
                          range,
                          notifySuccess,
                          notifyInvalid,
                          notifyInfo,
                          function(successResult)
                           { /*<<src/Index.re 55 44>>*/  /*<<src/Index.re 55 44>>*/ var
                             _eL_=
                               /*<<src/Index.re 55 44>>*/ _dn_(successResult);
                             /*<<src/Index.re 55 85>>*/ return  /*<<src/Index.re 55 85>>*/ caml_call1
                                    (resolve,_eL_) /*<<src/Index.re 55 85>>*/ },
                          _eK_) /*<<src/Index.re 56 65>>*/ }) /*<<src/Index.re 58 7>>*/ }
     /*<<src/Index.re 37 2>>*/  /*<<src/Index.re 37 2>>*/ var
     _dv_=
       /*<<src/Index.re 37 2>>*/ caml_js_wrap_callback(_du_);
     /*<<src/Index.re 35 0>>*/  /*<<src/Index.re 35 0>>*/ _bb_(_dw_,_dv_);
     /*<<src/Index.re 60 3>>*/ function _dx_
     (jsEditor,jsRange,jsNotifySuccess,jsNotifyInvalid,jsNotifyInfo)
     { /*<<src/Index.re 67 21>>*/ var
        /*<<src/Index.re 67 21>>*/ editor=
         /*<<src/Index.re 67 21>>*/ _aO_(jsEditor),
        /*<<src/Index.re 68 20>>*/ range=
         /*<<src/Index.re 68 20>>*/ _aI_(jsRange);
       /*<<src/Index.re 69 8>>*/ function notifySuccess(msg)
       { /*<<src/Index.re 70 64>>*/  /*<<src/Index.re 70 64>>*/ var
         _eJ_=
           /*<<src/Index.re 70 64>>*/ msg.toString();
         /*<<src/Index.re 70 79>>*/ return  /*<<src/Index.re 70 79>>*/ jsNotifySuccess
                (_eJ_) /*<<src/Index.re 70 81>>*/ }
       /*<<src/Index.re 71 8>>*/ function notifyInvalid(msg)
       { /*<<src/Index.re 72 64>>*/  /*<<src/Index.re 72 64>>*/ var
         _eI_=
           /*<<src/Index.re 72 64>>*/ msg.toString();
         /*<<src/Index.re 72 79>>*/ return  /*<<src/Index.re 72 79>>*/ jsNotifyInvalid
                (_eI_) /*<<src/Index.re 72 81>>*/ }
       /*<<src/Index.re 73 8>>*/ function notifyInfo(msg)
       { /*<<src/Index.re 73 81>>*/  /*<<src/Index.re 73 81>>*/ var
         _eH_=
           /*<<src/Index.re 73 81>>*/ msg.toString();
         /*<<src/Index.re 73 96>>*/ return  /*<<src/Index.re 73 96>>*/ jsNotifyInfo
                (_eH_) /*<<src/Index.re 73 98>>*/ }
       /*<<src/Index.re 74 8>>*/ return  /*<<src/Index.re 74 8>>*/ _aV_
              (function(resolve,reject)
                { /*<<src/Index.re 76 12>>*/ function _eE_(rejectedMsg)
                  { /*<<src/Index.re 83 41>>*/  /*<<src/Index.re 83 41>>*/ var
                    _eG_=
                      /*<<src/Index.re 83 41>>*/ rejectedMsg.toString();
                    /*<<src/Index.re 83 64>>*/ return  /*<<src/Index.re 83 64>>*/ caml_call1
                           (reject,_eG_) /*<<src/Index.re 83 64>>*/ }
                  /*<<src/Index.re 76 12>>*/ return  /*<<src/Index.re 76 12>>*/ _cq_
                         (editor,
                          range,
                          notifySuccess,
                          notifyInvalid,
                          notifyInfo,
                          function(successResult)
                           { /*<<src/Index.re 82 44>>*/  /*<<src/Index.re 82 44>>*/ var
                             _eF_=
                               /*<<src/Index.re 82 44>>*/ successResult.toString();
                             /*<<src/Index.re 82 69>>*/ return  /*<<src/Index.re 82 69>>*/ caml_call1
                                    (resolve,_eF_) /*<<src/Index.re 82 69>>*/ },
                          _eE_) /*<<src/Index.re 83 65>>*/ }) /*<<src/Index.re 85 7>>*/ }
     /*<<src/Index.re 64 2>>*/  /*<<src/Index.re 64 2>>*/ var
     _dy_=
       /*<<src/Index.re 64 2>>*/ caml_js_wrap_callback(_dx_);
     /*<<src/Index.re 62 0>>*/  /*<<src/Index.re 62 0>>*/ _bb_(_dz_,_dy_);
     /*<<src/Index.re 87 3>>*/ function _dA_(request)
     { /*<<src/Index.re 94 22>>*/ var
        /*<<src/Index.re 94 22>>*/ request$0=
         /*<<src/Index.re 94 22>>*/ _do_(request),
        /*<<src/Index.re 95 8>>*/ editor=request$0[1],
        /*<<src/Index.re 96 8>>*/ prefix=request$0[2],
        /*<<src/Index.re 97 39>>*/ _ee_=
         /*<<src/Index.re 97 39>>*/ _aQ_(editor),
        /*<<src/Index.re 97 19>>*/ text= /*<<src/Index.re 97 19>>*/ _aJ_(_ee_),
        /*<<src/Index.re 99 18>>*/ _ef_=
         /*<<src/Index.re 99 18>>*/ _aS_(editor),
        /*<<src/Index.re 98 68>>*/ _eg_= /*<<src/Index.re 98 68>>*/ _n_(_ef_),
        /*<<src/Index.re 98 38>>*/ position=
         /*<<src/Index.re 98 38>>*/ _aL_(_eg_),
        /*<<src/Index.re 100 9>>*/ col=position[2],
        /*<<src/Index.re 100 9>>*/ line=position[1],
        /*<<src/Index.re 107 8>>*/ _eh_=0,
        /*<<src/Index.re 107 36>>*/ _ei_=
         /*<<src/Index.re 107 36>>*/ _aP_(editor,line),
        /*<<src/Index.re 107 25>>*/ linePrefix=
         /*<<src/Index.re 107 25>>*/ _O_(_ei_,_eh_,col),
        /*<<src/Index.re 108 8>>*/ match=
        0 ===  /*<<src/Index.re 108 8>>*/ caml_ml_string_length(linePrefix)
         ?1
         :0;
       /*<<src/Index.re 108 8>>*/ if(0 === match)
       { /*<<src/Index.re 111 12>>*/ var
          /*<<src/Index.re 111 12>>*/ regex=/([ |\t\[\](){}<>,+*\/-])/,
          /*<<src/Index.re 113 24>>*/ lst=
           /*<<src/Index.re 113 24>>*/ _b1_(regex,linePrefix),
          /*<<src/Index.re 114 24>>*/ len=
           /*<<src/Index.re 114 24>>*/ _m_(lst),
          /*<<src/Index.re 115 14>>*/ match$0=0 < len?1:0;
         /*<<src/Index.re 115 14>>*/ if(0 === match$0)
         var linePrefix$0=linePrefix;
        else
          /*<<src/Index.re 115 24>>*/ var
           /*<<src/Index.re 115 24>>*/ _es_=len - 1 | 0,
           /*<<src/Index.re 115 24>>*/ _et_=
            /*<<src/Index.re 115 24>>*/ _p_(lst,_es_),
          linePrefix$0=_et_;
         /*<<src/Index.re 111 12>>*/ var linePrefix$1=linePrefix$0}
      else
       var linePrefix$1=linePrefix;
       /*<<src/Index.re 94 22>>*/  /*<<src/Index.re 118 24>>*/ var
       _ej_=
         /*<<src/Index.re 118 24>>*/ _S_(linePrefix$1);
       /*<<src/Index.re 118 48>>*/ if
       (0 !==  /*<<src/Index.re 118 48>>*/ caml_ml_string_length(_ej_))
       { /*<<src/Index.re 118 72>>*/  /*<<src/Index.re 118 72>>*/ var
         _ek_=
           /*<<src/Index.re 118 72>>*/ _S_(prefix);
         /*<<src/Index.re 118 92>>*/ if
         (0 !==  /*<<src/Index.re 118 92>>*/ caml_ml_string_length(_ek_))
         { /*<<src/Index.re 121 15>>*/ var
            /*<<src/Index.re 121 15>>*/ _el_=46,
            /*<<src/Index.re 123 16>>*/ _em_=
             /*<<src/Index.re 123 16>>*/ _W_(prefix,_el_);
           /*<<src/Index.re 123 42>>*/ if(_em_)
           { /*<<src/Index.re 123 46>>*/ var
             _en_=46,
              /*<<src/Index.re 123 46>>*/ _eo_=
               /*<<src/Index.re 123 46>>*/ _U_(prefix,_en_);
             /*<<src/Index.re 123 69>>*/ if(0 === _eo_)
              /*<<src/Index.re 123 77>>*/ var
               /*<<src/Index.re 123 77>>*/ _ep_=
                /*<<src/Index.re 123 77>>*/ caml_ml_string_length(prefix)
               -
               1
               |
               0,
               /*<<src/Index.re 123 77>>*/ _eq_=1,
               /*<<src/Index.re 123 77>>*/ _er_=
                /*<<src/Index.re 123 77>>*/ _O_(prefix,_eq_,_ep_),
              replacementPrefix=_er_,
              switch$0=1;
            else
             var switch$0=0}
          else
           var switch$0=0;
           /*<<camlinternalFormatBasics.ml 502 8>>*/ if(!switch$0)
           var replacementPrefix=prefix;
           /*<<src/Index.re 128 10>>*/ return  /*<<src/Index.re 128 10>>*/ _aV_
                  (function(resolve,reject)
                    { /*<<src/Index.re 130 14>>*/ function _ew_(result)
                      { /*<<src/Index.re 138 22>>*/ var
                         /*<<src/Index.re 138 22>>*/ _ey_=result.entries,
                         /*<<src/Index.re 138 52>>*/ resultRe=
                          /*<<src/Index.re 138 52>>*/ _u_
                          (_by_,
                            /*<<src/Index.re 138 52>>*/ _h_
                            ( /*<<src/Index.re 138 52>>*/ function(_eD_)
                               { /*<<?>>*/ return caml_js_to_array(_eD_)}
                              (_ey_)));
                        /*<<src/Index.re 143 31>>*/ function _ez_(_eC_)
                        { /*<<?>>*/ return _bz_(replacementPrefix,_eC_)}
                        /*<<src/Index.re 145 23>>*/  /*<<src/Index.re 145 23>>*/ var
                        _eA_=
                          /*<<src/Index.re 145 23>>*/ _j_
                          ( /*<<src/Index.re 145 23>>*/ _u_
                            (_dq_, /*<<src/Index.re 145 23>>*/ _u_(_ez_,resultRe)));
                        /*<<src/Index.re 145 23>>*/ return  /*<<src/Index.re 145 23>>*/ caml_call1
                               (resolve,
                                 /*<<src/Index.re 145 23>>*/ function(_eB_)
                                  { /*<<?>>*/ return caml_js_from_array(_eB_)}
                                 (_eA_)) /*<<src/Index.re 150 19>>*/ }
                      /*<<src/Index.re 131 22>>*/  /*<<src/Index.re 131 22>>*/ var
                      _ex_=
                        /*<<src/Index.re 131 22>>*/ _bh_(editor);
                      /*<<src/Index.re 131 35>>*/ return  /*<<src/Index.re 131 35>>*/ _bU_
                             (_ex_,text,position,linePrefix$1,_ew_,reject) /*<<src/Index.re 153 22>>*/ })}}
       /*<<src/Index.re 119 10>>*/ return  /*<<src/Index.re 119 10>>*/ _aV_
              (function(resolve,reject)
                { /*<<src/Index.re 120 64>>*/ var
                   /*<<src/Index.re 120 64>>*/ _eu_=[0],
                   /*<<src/Index.re 120 72>>*/ _ev_=
                    /*<<src/Index.re 120 72>>*/ caml_js_from_array(_eu_);
                  /*<<src/Index.re 120 87>>*/ return  /*<<src/Index.re 120 87>>*/ caml_call1
                         (resolve,_ev_) /*<<src/Index.re 120 87>>*/ }) /*<<src/Index.re 156 7>>*/ }
     /*<<src/Index.re 91 2>>*/  /*<<src/Index.re 91 2>>*/ var
     _dB_=
       /*<<src/Index.re 91 2>>*/ caml_js_wrap_callback(_dA_);
     /*<<src/Index.re 89 0>>*/  /*<<src/Index.re 89 0>>*/ _bb_(_dC_,_dB_);
     /*<<src/Index.re 158 3>>*/ function _dD_(jsEditor,position)
     { /*<<src/Index.re 168 23>>*/ var
        /*<<src/Index.re 168 23>>*/ position$0=
         /*<<src/Index.re 168 23>>*/ _aF_(position),
        /*<<src/Index.re 169 39>>*/ _d__=
         /*<<src/Index.re 169 39>>*/ _aQ_(jsEditor),
        /*<<src/Index.re 169 19>>*/ text=
         /*<<src/Index.re 169 19>>*/ _aJ_(_d__);
       /*<<src/Index.re 170 8>>*/ return  /*<<src/Index.re 170 8>>*/ _aV_
              (function(resolve,reject)
                { /*<<src/Index.re 172 12>>*/ function _d$_(rejectedMsg)
                  { /*<<src/Index.re 177 41>>*/  /*<<src/Index.re 177 41>>*/ var
                    _ed_=
                      /*<<src/Index.re 177 41>>*/ rejectedMsg.toString();
                    /*<<src/Index.re 177 64>>*/ return  /*<<src/Index.re 177 64>>*/ caml_call1
                           (reject,_ed_) /*<<src/Index.re 177 64>>*/ }
                  /*<<src/Index.re 172 12>>*/ function _ea_(result)
                  { /*<<src/Index.re 176 37>>*/  /*<<src/Index.re 176 37>>*/ var
                    _ec_=
                      /*<<src/Index.re 176 37>>*/ _bB_(result);
                    /*<<src/Index.re 176 97>>*/ return  /*<<src/Index.re 176 97>>*/ caml_call1
                           (resolve,_ec_) /*<<src/Index.re 176 97>>*/ }
                  /*<<src/Index.re 173 20>>*/  /*<<src/Index.re 173 20>>*/ var
                  _eb_=
                    /*<<src/Index.re 173 20>>*/ _bh_(jsEditor);
                  /*<<src/Index.re 173 35>>*/ return  /*<<src/Index.re 173 35>>*/ _bT_
                         (_eb_,text,position$0,_ea_,_d$_) /*<<src/Index.re 177 65>>*/ }) /*<<src/Index.re 179 7>>*/ }
     /*<<src/Index.re 162 2>>*/  /*<<src/Index.re 162 2>>*/ var
     _dE_=
       /*<<src/Index.re 162 2>>*/ caml_js_wrap_callback(_dD_);
     /*<<src/Index.re 160 0>>*/  /*<<src/Index.re 160 0>>*/ _bb_(_dF_,_dE_);
     /*<<src/Index.re 181 3>>*/ function _dG_(jsEditor,param,range)
     { /*<<src/Index.re 188 8>>*/ return  /*<<src/Index.re 188 8>>*/ _aV_
              (function(resolve,reject)
                { /*<<src/Index.re 190 22>>*/ var
                   /*<<src/Index.re 190 22>>*/ path=
                    /*<<src/Index.re 190 22>>*/ _bh_(jsEditor),
                   /*<<src/Index.re 191 41>>*/ _d7_=
                    /*<<src/Index.re 191 41>>*/ _aQ_(jsEditor),
                   /*<<src/Index.re 191 21>>*/ text=
                    /*<<src/Index.re 191 21>>*/ _aJ_(_d7_),
                   /*<<src/Index.re 192 10>>*/ _d8_=[0,path],
                   /*<<src/Index.re 192 26>>*/ match=
                    /*<<src/Index.re 192 26>>*/ _be_(_d8_),
                   /*<<src/Index.re 192 50>>*/ extension=0 === match?_dH_:_dI_,
                   /*<<src/Index.re 197 19>>*/ _d9_=
                    /*<<src/Index.re 197 19>>*/ _aI_(range);
                  /*<<src/Index.re 197 44>>*/ return  /*<<src/Index.re 197 44>>*/ _cw_
                         (path,text,extension,_d9_,resolve,reject) /*<<src/Index.re 200 9>>*/ }) /*<<src/Index.re 201 7>>*/ }
     /*<<src/Index.re 185 2>>*/  /*<<src/Index.re 185 2>>*/ var
     _dJ_=
       /*<<src/Index.re 185 2>>*/ caml_js_wrap_callback(_dG_);
     /*<<src/Index.re 183 0>>*/  /*<<src/Index.re 183 0>>*/ _bb_(_dK_,_dJ_);
     /*<<src/Index.re 203 3>>*/ function _dL_(jsEditor)
     { /*<<src/Index.re 210 21>>*/ var
        /*<<src/Index.re 210 21>>*/ editor=
         /*<<src/Index.re 210 21>>*/ _aO_(jsEditor),
        /*<<src/Index.re 211 62>>*/ _d0_=
         /*<<src/Index.re 211 62>>*/ _aS_(editor),
        /*<<src/Index.re 211 53>>*/ _d1_=
         /*<<src/Index.re 211 53>>*/ _n_(_d0_),
        /*<<src/Index.re 211 23>>*/ position=
         /*<<src/Index.re 211 23>>*/ _aL_(_d1_),
        /*<<src/Index.re 212 39>>*/ _d2_=
         /*<<src/Index.re 212 39>>*/ _aQ_(jsEditor),
        /*<<src/Index.re 212 19>>*/ text=
         /*<<src/Index.re 212 19>>*/ _aJ_(_d2_);
       /*<<src/Index.re 213 8>>*/ function _d3_(rejectedMsg)
       { /*<<src/Index.re 223 30>>*/ return 0 /*<<src/Index.re 223 32>>*/ }
       /*<<src/Index.re 213 8>>*/ function _d4_(result)
       { /*<<src/Index.re 219 14>>*/  /*<<src/Index.re 219 14>>*/ var
         _d6_=
           /*<<src/Index.re 219 14>>*/ _bC_(result);
         /*<<src/Index.re 219 67>>*/ return  /*<<src/Index.re 219 67>>*/ _cx_
                (editor,_d6_) /*<<src/Index.re 220 70>>*/ }
       /*<<src/Index.re 214 16>>*/  /*<<src/Index.re 214 16>>*/ var
       _d5_=
         /*<<src/Index.re 214 16>>*/ _bh_(jsEditor);
       /*<<src/Index.re 214 31>>*/ return  /*<<src/Index.re 214 31>>*/ _bX_
              (_d5_,text,position,_d4_,_d3_) /*<<src/Index.re 224 7>>*/ }
     /*<<src/Index.re 207 2>>*/  /*<<src/Index.re 207 2>>*/ var
     _dM_=
       /*<<src/Index.re 207 2>>*/ caml_js_wrap_callback(_dL_);
     /*<<src/Index.re 205 0>>*/  /*<<src/Index.re 205 0>>*/ _bb_(_dN_,_dM_);
     /*<<src/Index.re 226 3>>*/ function _dO_(jsEditor)
     { /*<<src/Index.re 233 8>>*/ return  /*<<src/Index.re 233 8>>*/ _aV_
              (function(resolve,reject)
                { /*<<src/Index.re 235 22>>*/ var
                   /*<<src/Index.re 235 22>>*/ path=
                    /*<<src/Index.re 235 22>>*/ _bh_(jsEditor),
                   /*<<src/Index.re 236 41>>*/ _dY_=
                    /*<<src/Index.re 236 41>>*/ _aQ_(jsEditor),
                   /*<<src/Index.re 236 21>>*/ text=
                    /*<<src/Index.re 236 21>>*/ _aJ_(_dY_),
                   /*<<src/Index.re 237 42>>*/ _dZ_=
                    /*<<src/Index.re 237 42>>*/ _aT_(jsEditor),
                   /*<<src/Index.re 237 24>>*/ grammar=
                    /*<<src/Index.re 237 24>>*/ _aN_(_dZ_);
                  /*<<src/Index.re 238 10>>*/ return  /*<<src/Index.re 238 10>>*/ _cW_
                         (path,text,grammar,resolve,reject) /*<<src/Index.re 244 9>>*/ }) /*<<src/Index.re 245 7>>*/ }
     /*<<src/Index.re 230 2>>*/  /*<<src/Index.re 230 2>>*/ var
     _dP_=
       /*<<src/Index.re 230 2>>*/ caml_js_wrap_callback(_dO_);
     /*<<src/Index.re 228 0>>*/  /*<<src/Index.re 228 0>>*/ _bb_(_dQ_,_dP_);
     /*<<src/JsUtils.re 8 16>>*/ (function(a)
      { /*<<src/JsUtils.re 9 31>>*/ return !!a /*<<src/JsUtils.re 9 18>>*/ });
     /*<<src/OcamlTypeToReasonType.re 10 19>>*/  /*<<src/OcamlTypeToReasonType.re 10 19>>*/ require
     ("child_process");
     /*<<src/OcamlTypeToReasonType.re 12 15>>*/  /*<<src/OcamlTypeToReasonType.re 12 15>>*/ require
     ("../lib/fixedEnv");
     /*<<src/Index.re 230 2>>*/ var
      /*<<src/OcamlTypeToReasonType.re 12 61>>*/ _dR_=20,
      /*<<src/OcamlTypeToReasonType.re 12 61>>*/ _dS_=0;
     /*<<src/OcamlTypeToReasonType.re 17 18>>*/  /*<<src/OcamlTypeToReasonType.re 17 18>>*/ _an_
     (_dS_,_dR_);
     /*<<src/Index.re 230 2>>*/  /*<<src/OcamlTypeToReasonType.re 17 35>>*/ var
     _dT_=
      0;
     /*<<std_exit.ml 16 8>>*/  /*<<std_exit.ml 16 8>>*/ do_at_exit(_dT_);
     /*<<std_exit.ml 16 20>>*/ return /*<<?>>*/ }
  (function(){return this}()));

//# sourceMappingURL=app.map