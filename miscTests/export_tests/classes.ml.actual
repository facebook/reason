class some = let a = 2  in object val x = (a : int) end[@@export ]
class istack =
  object
    val mutable v = ([0; 2] : int list)
    method pop : int option=
      match v with | hd::tl -> (v <- tl; Some hd) | [] -> None
    method push (hd : int) = (v <- hd :: v : unit)
  end[@@export ]
class ['a] stack (init : 'a list)  (binit : int) =
  object
    val mutable v = (init : 'a list)
    method pop : 'a option=
      match v with | hd::tl -> (v <- tl; Some hd) | [] -> None
    method push (hd : 'a) = (v <- hd :: v : unit)
  end[@@export ]
class square (w : int) =
  object (self)
    method width : int= w
    method area : int= self#width * self#width
    method larger (other : square) = (self#area > other#area : bool)
  end[@@export ]
class asquare (w : int) = let a = 2  in
  object (self)
    inherit  some
    method width : int= w + a
    method area : int= self#width * self#width
    method larger (other : asquare) = (self#area > other#area : bool)
  end[@@export ]
class m : asquare = (asquare 20)[@@export ]
class bsquare =
  object inherit  (asquare 20) initializer print_string "awesome" end
[@@export ]
